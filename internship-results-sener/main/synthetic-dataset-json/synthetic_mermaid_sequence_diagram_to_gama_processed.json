{"instruction":{"0":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Patient\n            participant Receptionist\n            participant Doctor\n            participant Lab\n            participant Pharmacy\n\n            Patient->>Receptionist: Registers\n            Receptionist->>Doctor: Schedules appointment\n            Doctor->>Patient: Consults\n            Doctor->>Lab: Orders test\n            Lab->>Doctor: Sends test results\n            Doctor->>Pharmacy: Prescribes medication\n            Pharmacy->>Patient: Dispenses medication\n            Doctor->>Patient: Discharge","1":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Student\n            participant Registrar\n            participant Instructor\n            participant ExamSystem\n            participant GradingSystem\n\n            Student->>Registrar: Registers for course\n            Registrar->>Instructor: Enrolls student\n            Student->>Instructor: Attends classes\n            Student->>Instructor: Submits assignments\n            Instructor->>ExamSystem: Schedules exams\n            Student->>ExamSystem: Takes exams\n            ExamSystem->>Instructor: Sends exam results\n            Instructor->>GradingSystem: Submits final grades\n            GradingSystem->>Student: Receives grades","2":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Sales\n            participant Inventory\n            participant Dispatch\n            participant Billing\n            participant Delivery\n\n            Customer->>Sales: Places order\n            Sales->>Inventory: Checks availability\n            Inventory-->>Sales: Confirms stock\n            Sales->>Dispatch: Requests dispatch\n            Dispatch->>Billing: Notifies dispatch\n            Billing->>Customer: Issues invoice\n            Dispatch->>Delivery: Ships goods\n            Delivery->>Customer: Updates delivery status","3":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Tourist\n            participant Airline\n            participant Hotel\n            participant TourOperator\n\n            Tourist->>Airline: Books flight\n            Airline->>Tourist: Sends ticket\n            Tourist->>Hotel: Checks in\n            Tourist->>TourOperator: Attends tour\n            TourOperator->>Tourist: Provides tour service\n            Tourist->>Hotel: Checks out\n            Tourist->>Airline: Takes return flight","4":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Company\n            participant ResearchTeam\n            participant DataAnalyst\n            participant PresentationTeam\n\n            Company->>ResearchTeam: Commissions market research\n            ResearchTeam->>DataAnalyst: Gathers data\n            DataAnalyst->>ResearchTeam: Analyzes data\n            ResearchTeam->>PresentationTeam: Prepares report\n            PresentationTeam->>Company: Presents findings","5":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Patient\n            participant Reception\n            participant Specialist\n            participant SurgeryTeam\n            participant Recovery\n            participant Billing\n\n            Patient->>Reception: Books appointment\n            Reception->>Specialist: Schedules consultation\n            Patient->>Specialist: Consults specialist\n            Specialist->>SurgeryTeam: Orders surgery\n            SurgeryTeam->>Recovery: Transfers patient post-surgery\n            Recovery->>Patient: Monitors recovery\n            Recovery->>Billing: Sends discharge notice\n            Billing->>Patient: Processes payment\n            Billing->>Patient: Discharges patient","6":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Employee\n            participant HR\n            participant IT\n            participant Manager\n            participant ProjectTeam\n\n            Employee->>HR: Completes paperwork\n            HR->>IT: Requests system access\n            IT->>Employee: Provides access\n            HR->>Manager: Notifies of new hire\n            Manager->>ProjectTeam: Assigns project\n            Employee->>ProjectTeam: Starts tasks\n            ProjectTeam->>Manager: Monitors progress\n            Employee->>Manager: Submits final report","7":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Bank\n            participant LoanOfficer\n            participant Underwriting\n            participant Disbursement\n            participant Repayment\n\n            Customer->>Bank: Applies for loan\n            Bank->>LoanOfficer: Reviews application\n            LoanOfficer->>Underwriting: Conducts risk assessment\n            Underwriting->>LoanOfficer: Approves loan\n            LoanOfficer->>Disbursement: Initiates disbursement\n            Disbursement->>Customer: Transfers funds\n            Repayment->>Customer: Sets up repayment schedule\n            Customer->>Repayment: Makes payments","8":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant PublicHealthTeam\n            participant FieldAgents\n            participant DataAnalyst\n            participant Epidemiologist\n            participant ResponseTeam\n\n            PublicHealthTeam->>FieldAgents: Deploys to affected area\n            FieldAgents->>DataAnalyst: Collects data\n            DataAnalyst->>Epidemiologist: Analyzes trends\n            Epidemiologist->>PublicHealthTeam: Recommends measures\n            PublicHealthTeam->>ResponseTeam: Implements control measures","9":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant DesignTeam\n            participant TestingTeam\n            participant Production\n            participant Marketing\n            participant Sales\n            participant Customer\n\n            DesignTeam->>TestingTeam: Submits prototypes\n            TestingTeam->>DesignTeam: Sends feedback\n            DesignTeam->>Production: Finalizes design\n            Production->>Marketing: Begins production\n            Marketing->>Sales: Launches campaign\n            Sales->>Customer: Sells cars","10":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant MonitoringTeam\n            participant WeatherService\n            participant EmergencyServices\n            participant EvacuationTeam\n            participant ReliefTeam\n\n            MonitoringTeam->>WeatherService: Receives weather data\n            WeatherService->>MonitoringTeam: Issues alerts\n            MonitoringTeam->>EmergencyServices: Coordinates response\n            EmergencyServices->>EvacuationTeam: Organizes evacuations\n            ReliefTeam->>EmergencyServices: Provides relief","11":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant DevelopmentTeam\n            participant TestingTeam\n            participant Operations\n            participant SupportTeam\n            participant Customer\n\n            DevelopmentTeam->>TestingTeam: Delivers software build\n            TestingTeam->>DevelopmentTeam: Reports bugs\n            DevelopmentTeam->>TestingTeam: Fixes bugs\n            TestingTeam->>Operations: Approves release\n            Operations->>Customer: Deploys application\n            Customer->>SupportTeam: Reports issues\n            SupportTeam->>DevelopmentTeam: Escalates issues","12":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Policyholder\n            participant ClaimsDepartment\n            participant DocumentReview\n            participant AssessmentTeam\n            participant Approvals\n            participant Disbursement\n\n            Policyholder->>ClaimsDepartment: Submits claim\n            ClaimsDepartment->>DocumentReview: Reviews documents\n            DocumentReview->>AssessmentTeam: Assesses damage\n            AssessmentTeam->>Approvals: Recommends approval\n            Approvals->>Disbursement: Approves claim\n            Disbursement->>Policyholder: Disburses funds","13":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant OrderProcessing\n            participant Warehouse\n            participant Shipping\n            participant Delivery\n\n            Customer->>OrderProcessing: Places order\n            OrderProcessing->>Warehouse: Requests fulfillment\n            Warehouse->>Shipping: Picks and packs goods\n            Shipping->>Delivery: Ships goods\n            Delivery->>Customer: Delivers order","14":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ResearchTeam\n            participant FundingAgency\n            participant ReviewBoard\n            participant Journal\n            participant Conference\n\n            ResearchTeam->>FundingAgency: Submits grant proposal\n            FundingAgency->>ReviewBoard: Requests review\n            ReviewBoard->>FundingAgency: Approves grant\n            FundingAgency->>ResearchTeam: Provides funding\n            ResearchTeam->>Journal: Submits research findings\n            Journal->>ResearchTeam: Publishes paper\n            ResearchTeam->>Conference: Presents findings","15":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Applicant\n            participant Admissions\n            participant Evaluation\n            participant Registrar\n            participant Orientation\n\n            Applicant->>Admissions: Submits application\n            Admissions->>Evaluation: Reviews application\n            Evaluation->>Admissions: Recommends admission\n            Admissions->>Registrar: Admits student\n            Registrar->>Orientation: Schedules orientation","16":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant R&D\n            participant ClinicalTrials\n            participant RegulatoryAgency\n            participant Marketing\n            participant Sales\n\n            R&D->>ClinicalTrials: Submits drug for trials\n            ClinicalTrials->>R&D: Reports results\n            R&D->>RegulatoryAgency: Seeks approval\n            RegulatoryAgency->>R&D: Grants approval\n            R&D->>Marketing: Initiates launch campaign\n            Marketing->>Sales: Launches drug","17":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant ECommercePlatform\n            participant PaymentGateway\n            participant Warehouse\n            participant CourierService\n\n            Customer->>ECommercePlatform: Places order\n            ECommercePlatform->>PaymentGateway: Processes payment\n            PaymentGateway->>ECommercePlatform: Confirms payment\n            ECommercePlatform->>Warehouse: Sends order details\n            Warehouse->>CourierService: Prepares and ships order\n            CourierService->>Customer: Delivers package","18":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ProjectManager\n            participant TeamLeads\n            participant Resources\n            participant Client\n\n            ProjectManager->>TeamLeads: Allocates resources\n            TeamLeads->>Resources: Utilizes resources\n            Resources->>ProjectManager: Provides updates\n            ProjectManager->>Client: Delivers final product","19":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant CityPlanning\n            participant Public\n            participant FinanceDepartment\n            participant ConstructionTeam\n\n            CityPlanning->>Public: Holds consultations\n            Public->>CityPlanning: Provides feedback\n            CityPlanning->>FinanceDepartment: Secures funding\n            FinanceDepartment->>CityPlanning: Approves budget\n            CityPlanning->>ConstructionTeam: Begins construction","20":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Retailer\n            participant Supplier\n            participant Inventory\n            participant Customer\n\n            Retailer->>Supplier: Places order\n            Supplier->>Retailer: Ships goods\n            Retailer->>Inventory: Stocks goods\n            Customer->>Retailer: Purchases products","21":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant HealthcareProvider\n            participant Patient\n            participant DataEntry\n            participant HealthAuthorities\n\n            HealthcareProvider->>Patient: Administers vaccine\n            Patient->>DataEntry: Provides information\n            DataEntry->>HealthcareProvider: Records vaccination data\n            HealthcareProvider->>HealthAuthorities: Reports vaccination data","22":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Website\n            participant ShoppingCart\n            participant Checkout\n            participant Confirmation\n\n            Customer->>Website: Browses items\n            Website->>ShoppingCart: Adds items to cart\n            ShoppingCart->>Checkout: Proceeds to checkout\n            Checkout->>Customer: Processes payment\n            Checkout->>Confirmation: Sends order confirmation\n            Confirmation->>Customer: Confirms order","23":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Author\n            participant Editor\n            participant DesignTeam\n            participant Printing\n            participant Distribution\n\n            Author->>Editor: Submits manuscript\n            Editor->>Author: Provides feedback\n            Author->>Editor: Revises manuscript\n            Editor->>DesignTeam: Requests cover design\n            DesignTeam->>Editor: Delivers cover\n            Editor->>Printing: Sends final manuscript\n            Printing->>Distribution: Prints and ships books","24":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant TechCompany\n            participant Marketing\n            participant Customer\n            participant DevelopmentTeam\n            participant SupportTeam\n\n            TechCompany->>Marketing: Launches campaign\n            Marketing->>Customer: Collects feedback\n            Customer->>SupportTeam: Provides feedback\n            SupportTeam->>DevelopmentTeam: Suggests updates\n            DevelopmentTeam->>TechCompany: Releases updates","25":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant CensusBureau\n            participant FieldAgents\n            participant DataAnalyst\n            participant PolicyMakers\n\n            CensusBureau->>FieldAgents: Conducts surveys\n            FieldAgents->>CensusBureau: Submits data\n            CensusBureau->>DataAnalyst: Analyzes data\n            DataAnalyst->>PolicyMakers: Publishes reports","26":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ProductionCompany\n            participant Theaters\n            participant StreamingService\n            participant Audience\n\n            ProductionCompany->>Theaters: Distributes movie\n            Theaters->>Audience: Screens movie\n            ProductionCompany->>StreamingService: Streams movie\n            Audience->>StreamingService: Watches movie online","27":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Bank\n            participant AccountOpening\n            participant CardIssuance\n            participant OnlineBanking\n\n            Customer->>Bank: Requests account opening\n            Bank->>AccountOpening: Processes application\n            AccountOpening->>Customer: Opens account\n            AccountOpening->>CardIssuance: Issues debit card\n            CardIssuance->>Customer: Sends card\n            AccountOpening->>OnlineBanking: Activates online banking\n            OnlineBanking->>Customer: Provides access","28":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant TravelAgency\n            participant Airline\n            participant Hotel\n            participant TourOperator\n            participant Tourist\n\n            TravelAgency->>Airline: Books flights\n            Airline->>TravelAgency: Sends flight details\n            TravelAgency->>Hotel: Reserves rooms\n            Hotel->>TravelAgency: Confirms reservation\n            TravelAgency->>TourOperator: Arranges tours\n            TourOperator->>Tourist: Provides tour services","29":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant FoodApp\n            participant Restaurant\n            participant DeliveryDriver\n\n            Customer->>FoodApp: Places order\n            FoodApp->>Restaurant: Sends order details\n            Restaurant->>DeliveryDriver: Prepares order\n            DeliveryDriver->>Customer: Delivers food","30":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Professor\n            participant Students\n            participant ResearchTeam\n            participant GradingSystem\n\n            Professor->>Students: Assigns project\n            Students->>ResearchTeam: Conducts research\n            ResearchTeam->>Students: Provides guidance\n            Students->>Professor: Submits reports\n            Professor->>GradingSystem: Assigns grades","31":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Supplier\n            participant Receiving\n            participant Processing\n            participant Assembly\n            participant Shipping\n            participant Distributor\n\n            Supplier->>Receiving: Delivers raw materials\n            Receiving->>Processing: Transfers materials\n            Processing->>Assembly: Passes processed components\n            Assembly->>Shipping: Prepares finished products\n            Shipping->>Distributor: Ships products","32":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Candidate\n            participant CampaignTeam\n            participant Voters\n            participant Opponents\n            participant ElectionCommission\n\n            Candidate->>CampaignTeam: Plans campaign\n            CampaignTeam->>Voters: Organizes rallies\n            Candidate->>Opponents: Participates in debates\n            Voters->>ElectionCommission: Casts votes\n            ElectionCommission->>Candidate: Declares winner","33":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant OnlineStore\n            participant ProductListing\n            participant OrderProcessing\n            participant Returns\n            participant Inventory\n\n            Customer->>OnlineStore: Browses products\n            OnlineStore->>ProductListing: Manages listings\n            Customer->>OrderProcessing: Places order\n            OrderProcessing->>Customer: Processes order\n            Customer->>Returns: Requests return\n            Returns->>Inventory: Restocks item","34":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant EventPlanner\n            participant Venue\n            participant Speakers\n            participant Vendors\n\n            EventPlanner->>Venue: Books venue\n            Venue->>EventPlanner: Confirms booking\n            EventPlanner->>Speakers: Arranges speakers\n            Speakers->>EventPlanner: Confirms participation\n            EventPlanner->>Vendors: Coordinates services","35":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Bank\n            participant CreditDepartment\n            participant CardIssuance\n            participant Transactions\n\n            Customer->>Bank: Applies for credit card\n            Bank->>CreditDepartment: Evaluates application\n            CreditDepartment->>Bank: Approves credit limit\n            Bank->>CardIssuance: Issues card\n            CardIssuance->>Customer: Sends credit card\n            Customer->>Transactions: Makes purchases\n            Transactions->>Bank: Processes transactions","36":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Patient\n            participant RecordsManagement\n            participant AppointmentSystem\n            participant Lab\n            participant Doctor\n\n            Patient->>AppointmentSystem: Schedules appointment\n            AppointmentSystem->>RecordsManagement: Updates records\n            Patient->>Doctor: Attends appointment\n            Doctor->>Lab: Orders tests\n            Lab->>Doctor: Sends results\n            Doctor->>RecordsManagement: Updates medical history","37":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Supplier\n            participant Manufacturer\n            participant InventoryManagement\n            participant Logistics\n            participant Retailer\n\n            Supplier->>Manufacturer: Delivers raw materials\n            Manufacturer->>InventoryManagement: Stores finished products\n            InventoryManagement->>Logistics: Arranges shipment\n            Logistics->>Retailer: Delivers products","38":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Client\n            participant AdAgency\n            participant CreativeTeam\n            participant MediaChannels\n\n            Client->>AdAgency: Commissions campaign\n            AdAgency->>CreativeTeam: Develops content\n            CreativeTeam->>MediaChannels: Distributes content\n            MediaChannels->>Client: Runs campaign","39":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ProductOwner\n            participant DevelopmentTeam\n            participant IntegrationTeam\n            participant TestingTeam\n            participant Operations\n\n            ProductOwner->>DevelopmentTeam: Defines feature\n            DevelopmentTeam->>IntegrationTeam: Integrates with system\n            IntegrationTeam->>TestingTeam: Requests testing\n            TestingTeam->>Operations: Approves for deployment\n            Operations->>Production: Deploys feature","40":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ProductTeam\n            participant Users\n            participant FeedbackSystem\n            participant DevelopmentTeam\n\n            ProductTeam->>Users: Launches new feature\n            Users->>FeedbackSystem: Provides feedback\n            FeedbackSystem->>DevelopmentTeam: Suggests improvements\n            DevelopmentTeam->>ProductTeam: Updates feature","41":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ResearchTeam\n            participant ClinicalTrials\n            participant RegulatoryAgency\n            participant ApprovalCommittee\n\n            ResearchTeam->>ClinicalTrials: Conducts trials\n            ClinicalTrials->>ResearchTeam: Reports results\n            ResearchTeam->>RegulatoryAgency: Submits findings\n            RegulatoryAgency->>ApprovalCommittee: Reviews and approves","42":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant RetailChain\n            participant HR\n            participant InventoryTeam\n            participant Customers\n\n            RetailChain->>HR: Hires staff\n            HR->>RetailChain: Recruits and trains\n            RetailChain->>InventoryTeam: Stocks store\n            InventoryTeam->>Customers: Opens for business","43":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant AutoCompany\n            participant ServiceCenter\n            participant RepairTeam\n\n            AutoCompany->>Customer: Issues recall notice\n            Customer->>ServiceCenter: Schedules repair\n            ServiceCenter->>RepairTeam: Fixes defect\n            RepairTeam->>Customer: Returns vehicle","44":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant GovAgency\n            participant Business\n            participant ComplianceDept\n\n            GovAgency->>Business: Issues regulation\n            Business->>ComplianceDept: Ensures compliance\n            ComplianceDept->>GovAgency: Reports adherence","45":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant RentalService\n            participant FleetManagement\n            participant VehiclePreparation\n\n            Customer->>RentalService: Books vehicle\n            RentalService->>FleetManagement: Assigns vehicle\n            FleetManagement->>VehiclePreparation: Prepares car\n            VehiclePreparation->>Customer: Hands over vehicle","46":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Researcher\n            participant StudyParticipants\n            participant DataAnalyst\n            participant Journal\n\n            Researcher->>StudyParticipants: Conducts study\n            StudyParticipants->>Researcher: Provides data\n            Researcher->>DataAnalyst: Analyzes results\n            DataAnalyst->>Researcher: Reports findings\n            Researcher->>Journal: Publishes paper","47":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Patient\n            participant ERTeam\n            participant DiagnosisTeam\n            participant TreatmentTeam\n            participant MedicalRecords\n\n            Patient->>ERTeam: Admitted to ER\n            ERTeam->>DiagnosisTeam: Diagnoses condition\n            DiagnosisTeam->>TreatmentTeam: Prescribes treatment\n            TreatmentTeam->>MedicalRecords: Updates records","48":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Reporter\n            participant Editor\n            participant BroadcastTeam\n            participant Viewers\n\n            Reporter->>Editor: Sends footage\n            Editor->>BroadcastTeam: Finalizes content\n            BroadcastTeam->>Viewers: Broadcasts event","49":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Waiter\n            participant Kitchen\n            participant Cashier\n\n            Customer->>Waiter: Places order\n            Waiter->>Kitchen: Sends order to kitchen\n            Kitchen->>Waiter: Prepares food\n            Waiter->>Customer: Serves food\n            Customer->>Cashier: Pays bill","50":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Guest\n            participant BookingSystem\n            participant Reception\n            participant Housekeeping\n            participant Billing\n\n            Guest->>BookingSystem: Makes reservation\n            BookingSystem->>Reception: Confirms booking\n            Guest->>Reception: Checks in\n            Reception->>Housekeeping: Provides services\n            Guest->>Billing: Checks out","51":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Student\n            participant LearningPlatform\n            participant EnrollmentSystem\n            participant Instructor\n            participant Assessment\n\n            Student->>LearningPlatform: Registers on platform\n            LearningPlatform->>EnrollmentSystem: Enrolls in course\n            EnrollmentSystem->>Instructor: Informs about new student\n            Instructor->>LearningPlatform: Delivers lessons\n            LearningPlatform->>Assessment: Conducts assessments\n            Assessment->>Student: Provides feedback","52":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ConstructionCompany\n            participant Client\n            participant DesignTeam\n            participant ConstructionTeam\n            participant Inspection\n\n            Client->>ConstructionCompany: Awards contract\n            ConstructionCompany->>DesignTeam: Designs building\n            DesignTeam->>ConstructionTeam: Provides plans\n            ConstructionTeam->>Inspection: Completes construction\n            Inspection->>Client: Passes inspection\n            ConstructionTeam->>Client: Hands over building","53":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Designer\n            participant ProductionTeam\n            participant FashionShow\n            participant Buyers\n\n            Designer->>ProductionTeam: Designs collection\n            ProductionTeam->>Designer: Produces garments\n            Designer->>FashionShow: Showcases collection\n            Buyers->>Designer: Places orders","54":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Institution\n            participant HR\n            participant Teacher\n            participant Students\n            participant Evaluation\n\n            Institution->>HR: Recruits teacher\n            HR->>Teacher: Onboards new hire\n            Institution->>Teacher: Assigns classes\n            Teacher->>Students: Teaches classes\n            Evaluation->>Institution: Assesses performance","55":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Startup\n            participant DevelopmentTeam\n            participant TestingTeam\n            participant AppStore\n            participant Users\n\n            Startup->>DevelopmentTeam: Develops app\n            DevelopmentTeam->>TestingTeam: Submits for testing\n            TestingTeam->>DevelopmentTeam: Reports issues\n            DevelopmentTeam->>AppStore: Launches app\n            AppStore->>Users: Provides access\n            Users->>Startup: Gives feedback","56":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Sender\n            participant CourierCompany\n            participant SortingFacility\n            participant DeliveryDriver\n            participant Recipient\n\n            Sender->>CourierCompany: Hands over package\n            CourierCompany->>SortingFacility: Sorts package\n            SortingFacility->>DeliveryDriver: Assigns for delivery\n            DeliveryDriver->>Recipient: Delivers package","57":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant TelecomCompany\n            participant Technician\n            participant Router\n            participant ActivationTeam\n\n            Customer->>TelecomCompany: Requests new connection\n            TelecomCompany->>Technician: Schedules installation\n            Technician->>Router: Configures equipment\n            Technician->>ActivationTeam: Requests activation\n            ActivationTeam->>Customer: Activates service","58":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant ECommercePlatform\n            participant Marketing\n            participant Customers\n            participant OrderManagement\n\n            ECommercePlatform->>Marketing: Launches product line\n            Marketing->>Customers: Promotes product\n            Customers->>OrderManagement: Places orders\n            OrderManagement->>Customers: Processes orders","59":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant OnlineBank\n            participant LoanProcessing\n            participant ApprovalTeam\n            participant Disbursement\n\n            Customer->>OnlineBank: Submits loan application\n            OnlineBank->>LoanProcessing: Reviews application\n            LoanProcessing->>ApprovalTeam: Seeks approval\n            ApprovalTeam->>Disbursement: Approves loan\n            Disbursement->>Customer: Disburses funds","60":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Government\n            participant CampaignTeam\n            participant Public\n            participant ImpactAssessment\n\n            Government->>CampaignTeam: Launches campaign\n            CampaignTeam->>Public: Distributes materials\n            Public->>ImpactAssessment: Provides feedback\n            ImpactAssessment->>Government: Tracks impact","61":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Flight\n            participant Airport\n            participant BaggageHandling\n            participant Passengers\n            participant TransferService\n\n            Flight->>Airport: Arrives at gate\n            Airport->>BaggageHandling: Manages baggage\n            BaggageHandling->>Passengers: Delivers baggage\n            Airport->>TransferService: Facilitates transfers","62":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Client\n            participant LawFirm\n            participant ResearchTeam\n            participant Court\n\n            Client->>LawFirm: Engages services\n            LawFirm->>ResearchTeam: Conducts research\n            ResearchTeam->>LawFirm: Provides findings\n            LawFirm->>Court: Files lawsuit\n            Court->>LawFirm: Schedules hearing\n            LawFirm->>Client: Represents in court","63":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Employer\n            participant RecruitmentAgency\n            participant Candidates\n            participant Interviewer\n            participant HR\n\n            Employer->>RecruitmentAgency: Requests candidates\n            RecruitmentAgency->>Candidates: Sources candidates\n            Candidates->>Interviewer: Attends interviews\n            Interviewer->>HR: Selects candidates\n            HR->>Employer: Places candidates","64":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Patient\n            participant SurgeryScheduling\n            participant OperatingRoom\n            participant SurgeryTeam\n            participant RecoveryRoom\n\n            Patient->>SurgeryScheduling: Schedules surgery\n            SurgeryScheduling->>OperatingRoom: Prepares room\n            SurgeryTeam->>Patient: Performs surgery\n            OperatingRoom->>RecoveryRoom: Transfers patient\n            RecoveryRoom->>Patient: Monitors recovery","65":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Charity\n            participant Donors\n            participant FundraisingTeam\n            participant Beneficiaries\n\n            Charity->>FundraisingTeam: Launches campaign\n            FundraisingTeam->>Donors: Requests donations\n            Donors->>Charity: Sends funds\n            Charity->>Beneficiaries: Distributes aid","66":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant EnergyCompany\n            participant ConstructionTeam\n            participant GridOperator\n            participant Consumers\n\n            EnergyCompany->>ConstructionTeam: Builds solar plant\n            ConstructionTeam->>GridOperator: Connects to grid\n            GridOperator->>Consumers: Supplies electricity","67":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant TeamManager\n            participant Recruiter\n            participant Players\n            participant Coaches\n            participant TournamentOrganizers\n\n            TeamManager->>Recruiter: Identifies players\n            Recruiter->>Players: Recruits players\n            TeamManager->>Coaches: Plans training\n            Coaches->>Players: Conducts training\n            TeamManager->>TournamentOrganizers: Registers team\n            Players->>TournamentOrganizers: Participates in matches","68":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Patient\n            participant AdmissionDesk\n            participant TreatmentTeam\n            participant Billing\n            participant DischargeDesk\n\n            Patient->>AdmissionDesk: Admits to hospital\n            AdmissionDesk->>TreatmentTeam: Provides treatment plan\n            TreatmentTeam->>Billing: Sends treatment costs\n            Billing->>Patient: Processes payment\n            DischargeDesk->>Patient: Discharges from hospital","69":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Artist\n            participant MusicLabel\n            participant RecordingStudio\n            participant StreamingPlatforms\n            participant Listeners\n\n            MusicLabel->>Artist: Signs contract\n            Artist->>RecordingStudio: Records album\n            RecordingStudio->>MusicLabel: Delivers album\n            MusicLabel->>StreamingPlatforms: Releases album\n            Listeners->>StreamingPlatforms: Streams music","70":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Client\n            participant FinancialAdvisor\n            participant PortfolioManager\n            participant ReportingTeam\n\n            Client->>FinancialAdvisor: Seeks investment advice\n            FinancialAdvisor->>PortfolioManager: Allocates investments\n            PortfolioManager->>ReportingTeam: Tracks performance\n            ReportingTeam->>Client: Provides reports","71":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant Supermarket\n            participant StockRoom\n            participant Cashier\n            participant PaymentGateway\n\n            Supermarket->>StockRoom: Restocks shelves\n            Customer->>Supermarket: Selects products\n            Customer->>Cashier: Proceeds to checkout\n            Cashier->>PaymentGateway: Processes payment","72":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant GameStudio\n            participant TestingTeam\n            participant Marketing\n            participant Players\n            participant SupportTeam\n\n            GameStudio->>TestingTeam: Develops game\n            TestingTeam->>GameStudio: Reports bugs\n            GameStudio->>Marketing: Launches game\n            Marketing->>Players: Promotes game\n            Players->>SupportTeam: Requests support\n            SupportTeam->>GameStudio: Suggests updates","73":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Passenger\n            participant RideSharingApp\n            participant Driver\n            participant PaymentSystem\n\n            Passenger->>RideSharingApp: Requests ride\n            RideSharingApp->>Driver: Assigns ride\n            Driver->>Passenger: Picks up passenger\n            RideSharingApp->>Passenger: Tracks ride\n            Passenger->>PaymentSystem: Pays for ride","74":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Client\n            participant CyberSecurity\n            participant ThreatDetection\n            participant ResponseTeam\n            participant ClientData\n\n            Client->>CyberSecurity: Engages security services\n            ThreatDetection->>CyberSecurity: Detects threat\n            CyberSecurity->>ResponseTeam: Analyzes and deploys countermeasures\n            ResponseTeam->>ClientData: Protects data","75":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant TelecomCompany\n            participant NetworkTeam\n            participant Infrastructure\n            participant Customers\n\n            TelecomCompany->>NetworkTeam: Initiates 5G rollout\n            NetworkTeam->>Infrastructure: Upgrades network\n            Infrastructure->>TelecomCompany: Confirms upgrade\n            TelecomCompany->>Customers: Provides 5G services","76":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant RoboticsCompany\n            participant DesignTeam\n            participant Prototyping\n            participant TestingTeam\n            participant Production\n\n            RoboticsCompany->>DesignTeam: Designs new robot\n            DesignTeam->>Prototyping: Builds prototype\n            Prototyping->>TestingTeam: Conducts testing\n            TestingTeam->>Production: Approves for mass production\n            Production->>RoboticsCompany: Begins production","77":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant CosmeticsBrand\n            participant R&D\n            participant TestingTeam\n            participant Marketing\n            participant GlobalDistributors\n\n            CosmeticsBrand->>R&D: Develops new product\n            R&D->>TestingTeam: Tests for safety\n            TestingTeam->>CosmeticsBrand: Approves product\n            CosmeticsBrand->>Marketing: Plans global campaign\n            Marketing->>GlobalDistributors: Distributes product","78":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant ServiceCenter\n            participant MaintenanceTeam\n            participant Billing\n\n            Customer->>ServiceCenter: Schedules maintenance\n            ServiceCenter->>MaintenanceTeam: Assigns service\n            MaintenanceTeam->>Billing: Completes service\n            Billing->>Customer: Processes payment\n            MaintenanceTeam->>Customer: Returns vehicle","79":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant CityCouncil\n            participant Public\n            participant LegalTeam\n            participant Enforcement\n\n            CityCouncil->>Public: Proposes new zoning law\n            Public->>CityCouncil: Participates in hearings\n            CityCouncil->>LegalTeam: Drafts final law\n            LegalTeam->>Enforcement: Implements law","80":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Applicant\n            participant AdmissionsCommittee\n            participant ReviewBoard\n            participant University\n\n            Applicant->>University: Submits application\n            University->>ReviewBoard: Sends for review\n            ReviewBoard->>AdmissionsCommittee: Recommends admissions\n            AdmissionsCommittee->>University: Admits students","81":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Sender\n            participant PostalService\n            participant SortingFacility\n            participant MailCarrier\n            participant Recipient\n\n            Sender->>PostalService: Sends mail\n            PostalService->>SortingFacility: Sorts mail\n            SortingFacility->>MailCarrier: Assigns for delivery\n            MailCarrier->>Recipient: Delivers mail","82":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Customer\n            participant SalesConsultant\n            participant DesignTeam\n            participant AssemblyLine\n            participant DeliveryService\n\n            Customer->>SalesConsultant: Requests customization\n            SalesConsultant->>DesignTeam: Finalizes design\n            DesignTeam->>AssemblyLine: Sends to production\n            AssemblyLine->>DeliveryService: Prepares for delivery\n            DeliveryService->>Customer: Delivers custom car","83":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant TechFirm\n            participant AIResearchTeam\n            participant DataEngineers\n            participant BusinessUnit\n\n            TechFirm->>AIResearchTeam: Develops AI model\n            AIResearchTeam->>DataEngineers: Provides data\n            DataEngineers->>AIResearchTeam: Trains model\n            AIResearchTeam->>BusinessUnit: Deploys model","84":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant LogisticsCompany\n            participant RoutePlanner\n            participant LoadingDock\n            participant DeliveryDriver\n            participant Customer\n\n            LogisticsCompany->>RoutePlanner: Optimizes routes\n            RoutePlanner->>LoadingDock: Loads cargo\n            LoadingDock->>DeliveryDriver: Assigns delivery\n            DeliveryDriver->>Customer: Delivers shipment","85":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant NonProfit\n            participant Auctioneer\n            participant Bidders\n            participant Winners\n\n            NonProfit->>Auctioneer: Organizes auction\n            Bidders->>Auctioneer: Places bids\n            Auctioneer->>Winners: Awards items","86":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Developer\n            participant LandOwner\n            participant Architect\n            participant ConstructionTeam\n            participant Buyers\n\n            Developer->>LandOwner: Acquires land\n            Developer->>Architect: Designs housing project\n            Architect->>ConstructionTeam: Provides plans\n            ConstructionTeam->>Developer: Builds homes\n            Buyers->>Developer: Purchases homes","87":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Government\n            participant CensusBureau\n            participant FieldAgents\n            participant DataAnalysts\n            participant Public\n\n            Government->>CensusBureau: Organizes census\n            CensusBureau->>FieldAgents: Collects data\n            FieldAgents->>DataAnalysts: Submits data\n            DataAnalysts->>Government: Analyzes results\n            Government->>Public: Publishes statistics","88":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Client\n            participant CloudProvider\n            participant ServerProvisioning\n            participant DeploymentTeam\n            participant Monitoring\n\n            Client->>CloudProvider: Requests servers\n            CloudProvider->>ServerProvisioning: Provisions servers\n            ServerProvisioning->>DeploymentTeam: Deploys applications\n            Monitoring->>Client: Monitors performance","89":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant Passenger\n            participant BookingSystem\n            participant CheckIn\n            participant BaggageHandling\n\n            Passenger->>BookingSystem: Books flight\n            BookingSystem->>CheckIn: Confirms booking\n            Passenger->>CheckIn: Checks in\n            CheckIn->>BaggageHandling: Sends baggage","90":"given the following UML sequence diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: sequenceDiagram\n            participant GovernmentAgency\n            participant MonitoringStation\n            participant DataAnalyst\n            participant EnvironmentalRegulations\n\n            MonitoringStation->>GovernmentAgency: Sends air quality data\n            GovernmentAgency->>DataAnalyst: Analyzes data\n            DataAnalyst->>GovernmentAgency: Reports findings\n            GovernmentAgency->>EnvironmentalRegulations: Enforces regulations"},"output":{"0":"model generated_model\n\nspecies patient {\n  action registers (receptionist r) {\n    write \"patient registers to receptionist\";\n  }\n}\n\nspecies receptionist {\n  action schedules_appointment (doctor r) {\n    write \"receptionist schedules appointment to doctor\";\n  }\n}\n\nspecies doctor {\n  action consults (patient r) {\n    write \"doctor consults to patient\";\n  }\n}\n\n  action orders_test (lab r) {\n    write \"doctor orders test to lab\";\n  }\n}\n\nspecies lab {\n  action sends_test_results (doctor r) {\n    write \"lab sends test results to doctor\";\n  }\n}\n\n  action prescribes_medication (pharmacy r) {\n    write \"doctor prescribes medication to pharmacy\";\n  }\n}\n\nspecies pharmacy {\n  action dispenses_medication (patient r) {\n    write \"pharmacy dispenses medication to patient\";\n  }\n}\n\n  action discharge (patient r) {\n    write \"doctor discharge to patient\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create patient number: 1;\n    create receptionist number: 1;\n    create doctor number: 1;\n    create lab number: 1;\n    create pharmacy number: 1;\n    do (one_of(patient) registers(one_of(receptionist)));\n    do (one_of(receptionist) schedules_appointment(one_of(doctor)));\n    do (one_of(doctor) consults(one_of(patient)));\n    do (one_of(doctor) orders_test(one_of(lab)));\n    do (one_of(lab) sends_test_results(one_of(doctor)));\n    do (one_of(doctor) prescribes_medication(one_of(pharmacy)));\n    do (one_of(pharmacy) dispenses_medication(one_of(patient)));\n    do (one_of(doctor) discharge(one_of(patient)));\n  }\n}","1":"model generated_model\n\nspecies student {\n  action registers_for_course (registrar r) {\n    write \"student registers for course to registrar\";\n  }\n}\n\nspecies registrar {\n  action enrolls_student (instructor r) {\n    write \"registrar enrolls student to instructor\";\n  }\n}\n\n  action attends_classes (instructor r) {\n    write \"student attends classes to instructor\";\n  }\n}\n\n  action submits_assignments (instructor r) {\n    write \"student submits assignments to instructor\";\n  }\n}\n\nspecies instructor {\n  action schedules_exams (examsystem r) {\n    write \"instructor schedules exams to examsystem\";\n  }\n}\n\n  action takes_exams (examsystem r) {\n    write \"student takes exams to examsystem\";\n  }\n}\n\nspecies examsystem {\n  action sends_exam_results (instructor r) {\n    write \"examsystem sends exam results to instructor\";\n  }\n}\n\n  action submits_final_grades (gradingsystem r) {\n    write \"instructor submits final grades to gradingsystem\";\n  }\n}\n\nspecies gradingsystem {\n  action receives_grades (student r) {\n    write \"gradingsystem receives grades to student\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create student number: 1;\n    create registrar number: 1;\n    create instructor number: 1;\n    create examsystem number: 1;\n    create gradingsystem number: 1;\n    do (one_of(student) registers_for_course(one_of(registrar)));\n    do (one_of(registrar) enrolls_student(one_of(instructor)));\n    do (one_of(student) attends_classes(one_of(instructor)));\n    do (one_of(student) submits_assignments(one_of(instructor)));\n    do (one_of(instructor) schedules_exams(one_of(examsystem)));\n    do (one_of(student) takes_exams(one_of(examsystem)));\n    do (one_of(examsystem) sends_exam_results(one_of(instructor)));\n    do (one_of(instructor) submits_final_grades(one_of(gradingsystem)));\n    do (one_of(gradingsystem) receives_grades(one_of(student)));\n  }\n}","2":"model generated_model\n\nspecies customer {\n  action places_order (sales r) {\n    write \"customer places order to sales\";\n  }\n}\n\nspecies sales {\n  action checks_availability (inventory r) {\n    write \"sales checks availability to inventory\";\n  }\n}\n\nspecies inventory- {\n  action confirms_stock (sales r) {\n    write \"inventory- confirms stock to sales\";\n  }\n}\n\n  action requests_dispatch (dispatch r) {\n    write \"sales requests dispatch to dispatch\";\n  }\n}\n\nspecies dispatch {\n  action notifies_dispatch (billing r) {\n    write \"dispatch notifies dispatch to billing\";\n  }\n}\n\nspecies billing {\n  action issues_invoice (customer r) {\n    write \"billing issues invoice to customer\";\n  }\n}\n\n  action ships_goods (delivery r) {\n    write \"dispatch ships goods to delivery\";\n  }\n}\n\nspecies delivery {\n  action updates_delivery_status (customer r) {\n    write \"delivery updates delivery status to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create sales number: 1;\n    create inventory number: 1;\n    create dispatch number: 1;\n    create billing number: 1;\n    create delivery number: 1;\n    do (one_of(customer) places_order(one_of(sales)));\n    do (one_of(sales) checks_availability(one_of(inventory)));\n    do (one_of(inventory-) confirms_stock(one_of(sales)));\n    do (one_of(sales) requests_dispatch(one_of(dispatch)));\n    do (one_of(dispatch) notifies_dispatch(one_of(billing)));\n    do (one_of(billing) issues_invoice(one_of(customer)));\n    do (one_of(dispatch) ships_goods(one_of(delivery)));\n    do (one_of(delivery) updates_delivery_status(one_of(customer)));\n  }\n}","3":"model generated_model\n\nspecies tourist {\n  action books_flight (airline r) {\n    write \"tourist books flight to airline\";\n  }\n}\n\nspecies airline {\n  action sends_ticket (tourist r) {\n    write \"airline sends ticket to tourist\";\n  }\n}\n\n  action checks_in (hotel r) {\n    write \"tourist checks in to hotel\";\n  }\n}\n\n  action attends_tour (touroperator r) {\n    write \"tourist attends tour to touroperator\";\n  }\n}\n\nspecies touroperator {\n  action provides_tour_service (tourist r) {\n    write \"touroperator provides tour service to tourist\";\n  }\n}\n\n  action checks_out (hotel r) {\n    write \"tourist checks out to hotel\";\n  }\n}\n\n  action takes_return_flight (airline r) {\n    write \"tourist takes return flight to airline\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create tourist number: 1;\n    create airline number: 1;\n    create hotel number: 1;\n    create touroperator number: 1;\n    do (one_of(tourist) books_flight(one_of(airline)));\n    do (one_of(airline) sends_ticket(one_of(tourist)));\n    do (one_of(tourist) checks_in(one_of(hotel)));\n    do (one_of(tourist) attends_tour(one_of(touroperator)));\n    do (one_of(touroperator) provides_tour_service(one_of(tourist)));\n    do (one_of(tourist) checks_out(one_of(hotel)));\n    do (one_of(tourist) takes_return_flight(one_of(airline)));\n  }\n}","4":"model generated_model\n\nspecies company {\n  action commissions_market_research (researchteam r) {\n    write \"company commissions market research to researchteam\";\n  }\n}\n\nspecies researchteam {\n  action gathers_data (dataanalyst r) {\n    write \"researchteam gathers data to dataanalyst\";\n  }\n}\n\nspecies dataanalyst {\n  action analyzes_data (researchteam r) {\n    write \"dataanalyst analyzes data to researchteam\";\n  }\n}\n\n  action prepares_report (presentationteam r) {\n    write \"researchteam prepares report to presentationteam\";\n  }\n}\n\nspecies presentationteam {\n  action presents_findings (company r) {\n    write \"presentationteam presents findings to company\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create company number: 1;\n    create researchteam number: 1;\n    create dataanalyst number: 1;\n    create presentationteam number: 1;\n    do (one_of(company) commissions_market_research(one_of(researchteam)));\n    do (one_of(researchteam) gathers_data(one_of(dataanalyst)));\n    do (one_of(dataanalyst) analyzes_data(one_of(researchteam)));\n    do (one_of(researchteam) prepares_report(one_of(presentationteam)));\n    do (one_of(presentationteam) presents_findings(one_of(company)));\n  }\n}","5":"model generated_model\n\nspecies patient {\n  action books_appointment (reception r) {\n    write \"patient books appointment to reception\";\n  }\n}\n\nspecies reception {\n  action schedules_consultation (specialist r) {\n    write \"reception schedules consultation to specialist\";\n  }\n}\n\n  action consults_specialist (specialist r) {\n    write \"patient consults specialist to specialist\";\n  }\n}\n\nspecies specialist {\n  action orders_surgery (surgeryteam r) {\n    write \"specialist orders surgery to surgeryteam\";\n  }\n}\n\nspecies surgeryteam {\n  action transfers_patient_post-surgery (recovery r) {\n    write \"surgeryteam transfers patient post-surgery to recovery\";\n  }\n}\n\nspecies recovery {\n  action monitors_recovery (patient r) {\n    write \"recovery monitors recovery to patient\";\n  }\n}\n\n  action sends_discharge_notice (billing r) {\n    write \"recovery sends discharge notice to billing\";\n  }\n}\n\nspecies billing {\n  action processes_payment (patient r) {\n    write \"billing processes payment to patient\";\n  }\n}\n\n  action discharges_patient (patient r) {\n    write \"billing discharges patient to patient\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create patient number: 1;\n    create reception number: 1;\n    create specialist number: 1;\n    create surgeryteam number: 1;\n    create recovery number: 1;\n    create billing number: 1;\n    do (one_of(patient) books_appointment(one_of(reception)));\n    do (one_of(reception) schedules_consultation(one_of(specialist)));\n    do (one_of(patient) consults_specialist(one_of(specialist)));\n    do (one_of(specialist) orders_surgery(one_of(surgeryteam)));\n    do (one_of(surgeryteam) transfers_patient_post-surgery(one_of(recovery)));\n    do (one_of(recovery) monitors_recovery(one_of(patient)));\n    do (one_of(recovery) sends_discharge_notice(one_of(billing)));\n    do (one_of(billing) processes_payment(one_of(patient)));\n    do (one_of(billing) discharges_patient(one_of(patient)));\n  }\n}","6":"model generated_model\n\nspecies employee {\n  action completes_paperwork (hr r) {\n    write \"employee completes paperwork to hr\";\n  }\n}\n\nspecies hr {\n  action requests_system_access (it r) {\n    write \"hr requests system access to it\";\n  }\n}\n\nspecies it {\n  action provides_access (employee r) {\n    write \"it provides access to employee\";\n  }\n}\n\n  action notifies_of_new_hire (manager r) {\n    write \"hr notifies of new hire to manager\";\n  }\n}\n\nspecies manager {\n  action assigns_project (projectteam r) {\n    write \"manager assigns project to projectteam\";\n  }\n}\n\n  action starts_tasks (projectteam r) {\n    write \"employee starts tasks to projectteam\";\n  }\n}\n\nspecies projectteam {\n  action monitors_progress (manager r) {\n    write \"projectteam monitors progress to manager\";\n  }\n}\n\n  action submits_final_report (manager r) {\n    write \"employee submits final report to manager\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create employee number: 1;\n    create hr number: 1;\n    create it number: 1;\n    create manager number: 1;\n    create projectteam number: 1;\n    do (one_of(employee) completes_paperwork(one_of(hr)));\n    do (one_of(hr) requests_system_access(one_of(it)));\n    do (one_of(it) provides_access(one_of(employee)));\n    do (one_of(hr) notifies_of_new_hire(one_of(manager)));\n    do (one_of(manager) assigns_project(one_of(projectteam)));\n    do (one_of(employee) starts_tasks(one_of(projectteam)));\n    do (one_of(projectteam) monitors_progress(one_of(manager)));\n    do (one_of(employee) submits_final_report(one_of(manager)));\n  }\n}","7":"model generated_model\n\nspecies customer {\n  action applies_for_loan (bank r) {\n    write \"customer applies for loan to bank\";\n  }\n}\n\nspecies bank {\n  action reviews_application (loanofficer r) {\n    write \"bank reviews application to loanofficer\";\n  }\n}\n\nspecies loanofficer {\n  action conducts_risk_assessment (underwriting r) {\n    write \"loanofficer conducts risk assessment to underwriting\";\n  }\n}\n\nspecies underwriting {\n  action approves_loan (loanofficer r) {\n    write \"underwriting approves loan to loanofficer\";\n  }\n}\n\n  action initiates_disbursement (disbursement r) {\n    write \"loanofficer initiates disbursement to disbursement\";\n  }\n}\n\nspecies disbursement {\n  action transfers_funds (customer r) {\n    write \"disbursement transfers funds to customer\";\n  }\n}\n\nspecies repayment {\n  action sets_up_repayment_schedule (customer r) {\n    write \"repayment sets up repayment schedule to customer\";\n  }\n}\n\n  action makes_payments (repayment r) {\n    write \"customer makes payments to repayment\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create bank number: 1;\n    create loanofficer number: 1;\n    create underwriting number: 1;\n    create disbursement number: 1;\n    create repayment number: 1;\n    do (one_of(customer) applies_for_loan(one_of(bank)));\n    do (one_of(bank) reviews_application(one_of(loanofficer)));\n    do (one_of(loanofficer) conducts_risk_assessment(one_of(underwriting)));\n    do (one_of(underwriting) approves_loan(one_of(loanofficer)));\n    do (one_of(loanofficer) initiates_disbursement(one_of(disbursement)));\n    do (one_of(disbursement) transfers_funds(one_of(customer)));\n    do (one_of(repayment) sets_up_repayment_schedule(one_of(customer)));\n    do (one_of(customer) makes_payments(one_of(repayment)));\n  }\n}","8":"model generated_model\n\nspecies publichealthteam {\n  action deploys_to_affected_area (fieldagents r) {\n    write \"publichealthteam deploys to affected area to fieldagents\";\n  }\n}\n\nspecies fieldagents {\n  action collects_data (dataanalyst r) {\n    write \"fieldagents collects data to dataanalyst\";\n  }\n}\n\nspecies dataanalyst {\n  action analyzes_trends (epidemiologist r) {\n    write \"dataanalyst analyzes trends to epidemiologist\";\n  }\n}\n\nspecies epidemiologist {\n  action recommends_measures (publichealthteam r) {\n    write \"epidemiologist recommends measures to publichealthteam\";\n  }\n}\n\n  action implements_control_measures (responseteam r) {\n    write \"publichealthteam implements control measures to responseteam\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create publichealthteam number: 1;\n    create fieldagents number: 1;\n    create dataanalyst number: 1;\n    create epidemiologist number: 1;\n    create responseteam number: 1;\n    do (one_of(publichealthteam) deploys_to_affected_area(one_of(fieldagents)));\n    do (one_of(fieldagents) collects_data(one_of(dataanalyst)));\n    do (one_of(dataanalyst) analyzes_trends(one_of(epidemiologist)));\n    do (one_of(epidemiologist) recommends_measures(one_of(publichealthteam)));\n    do (one_of(publichealthteam) implements_control_measures(one_of(responseteam)));\n  }\n}","9":"model generated_model\n\nspecies designteam {\n  action submits_prototypes (testingteam r) {\n    write \"designteam submits prototypes to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action sends_feedback (designteam r) {\n    write \"testingteam sends feedback to designteam\";\n  }\n}\n\n  action finalizes_design (production r) {\n    write \"designteam finalizes design to production\";\n  }\n}\n\nspecies production {\n  action begins_production (marketing r) {\n    write \"production begins production to marketing\";\n  }\n}\n\nspecies marketing {\n  action launches_campaign (sales r) {\n    write \"marketing launches campaign to sales\";\n  }\n}\n\nspecies sales {\n  action sells_cars (customer r) {\n    write \"sales sells cars to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create designteam number: 1;\n    create testingteam number: 1;\n    create production number: 1;\n    create marketing number: 1;\n    create sales number: 1;\n    create customer number: 1;\n    do (one_of(designteam) submits_prototypes(one_of(testingteam)));\n    do (one_of(testingteam) sends_feedback(one_of(designteam)));\n    do (one_of(designteam) finalizes_design(one_of(production)));\n    do (one_of(production) begins_production(one_of(marketing)));\n    do (one_of(marketing) launches_campaign(one_of(sales)));\n    do (one_of(sales) sells_cars(one_of(customer)));\n  }\n}","10":"model generated_model\n\nspecies monitoringteam {\n  action receives_weather_data (weatherservice r) {\n    write \"monitoringteam receives weather data to weatherservice\";\n  }\n}\n\nspecies weatherservice {\n  action issues_alerts (monitoringteam r) {\n    write \"weatherservice issues alerts to monitoringteam\";\n  }\n}\n\n  action coordinates_response (emergencyservices r) {\n    write \"monitoringteam coordinates response to emergencyservices\";\n  }\n}\n\nspecies emergencyservices {\n  action organizes_evacuations (evacuationteam r) {\n    write \"emergencyservices organizes evacuations to evacuationteam\";\n  }\n}\n\nspecies reliefteam {\n  action provides_relief (emergencyservices r) {\n    write \"reliefteam provides relief to emergencyservices\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create monitoringteam number: 1;\n    create weatherservice number: 1;\n    create emergencyservices number: 1;\n    create evacuationteam number: 1;\n    create reliefteam number: 1;\n    do (one_of(monitoringteam) receives_weather_data(one_of(weatherservice)));\n    do (one_of(weatherservice) issues_alerts(one_of(monitoringteam)));\n    do (one_of(monitoringteam) coordinates_response(one_of(emergencyservices)));\n    do (one_of(emergencyservices) organizes_evacuations(one_of(evacuationteam)));\n    do (one_of(reliefteam) provides_relief(one_of(emergencyservices)));\n  }\n}","11":"model generated_model\n\nspecies developmentteam {\n  action delivers_software_build (testingteam r) {\n    write \"developmentteam delivers software build to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action reports_bugs (developmentteam r) {\n    write \"testingteam reports bugs to developmentteam\";\n  }\n}\n\n  action fixes_bugs (testingteam r) {\n    write \"developmentteam fixes bugs to testingteam\";\n  }\n}\n\n  action approves_release (operations r) {\n    write \"testingteam approves release to operations\";\n  }\n}\n\nspecies operations {\n  action deploys_application (customer r) {\n    write \"operations deploys application to customer\";\n  }\n}\n\nspecies customer {\n  action reports_issues (supportteam r) {\n    write \"customer reports issues to supportteam\";\n  }\n}\n\nspecies supportteam {\n  action escalates_issues (developmentteam r) {\n    write \"supportteam escalates issues to developmentteam\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create developmentteam number: 1;\n    create testingteam number: 1;\n    create operations number: 1;\n    create supportteam number: 1;\n    create customer number: 1;\n    do (one_of(developmentteam) delivers_software_build(one_of(testingteam)));\n    do (one_of(testingteam) reports_bugs(one_of(developmentteam)));\n    do (one_of(developmentteam) fixes_bugs(one_of(testingteam)));\n    do (one_of(testingteam) approves_release(one_of(operations)));\n    do (one_of(operations) deploys_application(one_of(customer)));\n    do (one_of(customer) reports_issues(one_of(supportteam)));\n    do (one_of(supportteam) escalates_issues(one_of(developmentteam)));\n  }\n}","12":"model generated_model\n\nspecies policyholder {\n  action submits_claim (claimsdepartment r) {\n    write \"policyholder submits claim to claimsdepartment\";\n  }\n}\n\nspecies claimsdepartment {\n  action reviews_documents (documentreview r) {\n    write \"claimsdepartment reviews documents to documentreview\";\n  }\n}\n\nspecies documentreview {\n  action assesses_damage (assessmentteam r) {\n    write \"documentreview assesses damage to assessmentteam\";\n  }\n}\n\nspecies assessmentteam {\n  action recommends_approval (approvals r) {\n    write \"assessmentteam recommends approval to approvals\";\n  }\n}\n\nspecies approvals {\n  action approves_claim (disbursement r) {\n    write \"approvals approves claim to disbursement\";\n  }\n}\n\nspecies disbursement {\n  action disburses_funds (policyholder r) {\n    write \"disbursement disburses funds to policyholder\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create policyholder number: 1;\n    create claimsdepartment number: 1;\n    create documentreview number: 1;\n    create assessmentteam number: 1;\n    create approvals number: 1;\n    create disbursement number: 1;\n    do (one_of(policyholder) submits_claim(one_of(claimsdepartment)));\n    do (one_of(claimsdepartment) reviews_documents(one_of(documentreview)));\n    do (one_of(documentreview) assesses_damage(one_of(assessmentteam)));\n    do (one_of(assessmentteam) recommends_approval(one_of(approvals)));\n    do (one_of(approvals) approves_claim(one_of(disbursement)));\n    do (one_of(disbursement) disburses_funds(one_of(policyholder)));\n  }\n}","13":"model generated_model\n\nspecies customer {\n  action places_order (orderprocessing r) {\n    write \"customer places order to orderprocessing\";\n  }\n}\n\nspecies orderprocessing {\n  action requests_fulfillment (warehouse r) {\n    write \"orderprocessing requests fulfillment to warehouse\";\n  }\n}\n\nspecies warehouse {\n  action picks_and_packs_goods (shipping r) {\n    write \"warehouse picks and packs goods to shipping\";\n  }\n}\n\nspecies shipping {\n  action ships_goods (delivery r) {\n    write \"shipping ships goods to delivery\";\n  }\n}\n\nspecies delivery {\n  action delivers_order (customer r) {\n    write \"delivery delivers order to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create orderprocessing number: 1;\n    create warehouse number: 1;\n    create shipping number: 1;\n    create delivery number: 1;\n    do (one_of(customer) places_order(one_of(orderprocessing)));\n    do (one_of(orderprocessing) requests_fulfillment(one_of(warehouse)));\n    do (one_of(warehouse) picks_and_packs_goods(one_of(shipping)));\n    do (one_of(shipping) ships_goods(one_of(delivery)));\n    do (one_of(delivery) delivers_order(one_of(customer)));\n  }\n}","14":"model generated_model\n\nspecies researchteam {\n  action submits_grant_proposal (fundingagency r) {\n    write \"researchteam submits grant proposal to fundingagency\";\n  }\n}\n\nspecies fundingagency {\n  action requests_review (reviewboard r) {\n    write \"fundingagency requests review to reviewboard\";\n  }\n}\n\nspecies reviewboard {\n  action approves_grant (fundingagency r) {\n    write \"reviewboard approves grant to fundingagency\";\n  }\n}\n\n  action provides_funding (researchteam r) {\n    write \"fundingagency provides funding to researchteam\";\n  }\n}\n\n  action submits_research_findings (journal r) {\n    write \"researchteam submits research findings to journal\";\n  }\n}\n\nspecies journal {\n  action publishes_paper (researchteam r) {\n    write \"journal publishes paper to researchteam\";\n  }\n}\n\n  action presents_findings (conference r) {\n    write \"researchteam presents findings to conference\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create researchteam number: 1;\n    create fundingagency number: 1;\n    create reviewboard number: 1;\n    create journal number: 1;\n    create conference number: 1;\n    do (one_of(researchteam) submits_grant_proposal(one_of(fundingagency)));\n    do (one_of(fundingagency) requests_review(one_of(reviewboard)));\n    do (one_of(reviewboard) approves_grant(one_of(fundingagency)));\n    do (one_of(fundingagency) provides_funding(one_of(researchteam)));\n    do (one_of(researchteam) submits_research_findings(one_of(journal)));\n    do (one_of(journal) publishes_paper(one_of(researchteam)));\n    do (one_of(researchteam) presents_findings(one_of(conference)));\n  }\n}","15":"model generated_model\n\nspecies applicant {\n  action submits_application (admissions r) {\n    write \"applicant submits application to admissions\";\n  }\n}\n\nspecies admissions {\n  action reviews_application (evaluation r) {\n    write \"admissions reviews application to evaluation\";\n  }\n}\n\nspecies evaluation {\n  action recommends_admission (admissions r) {\n    write \"evaluation recommends admission to admissions\";\n  }\n}\n\n  action admits_student (registrar r) {\n    write \"admissions admits student to registrar\";\n  }\n}\n\nspecies registrar {\n  action schedules_orientation (orientation r) {\n    write \"registrar schedules orientation to orientation\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create applicant number: 1;\n    create admissions number: 1;\n    create evaluation number: 1;\n    create registrar number: 1;\n    create orientation number: 1;\n    do (one_of(applicant) submits_application(one_of(admissions)));\n    do (one_of(admissions) reviews_application(one_of(evaluation)));\n    do (one_of(evaluation) recommends_admission(one_of(admissions)));\n    do (one_of(admissions) admits_student(one_of(registrar)));\n    do (one_of(registrar) schedules_orientation(one_of(orientation)));\n  }\n}","16":"model generated_model\n\nspecies r&d {\n  action submits_drug_for_trials (clinicaltrials r) {\n    write \"r&d submits drug for trials to clinicaltrials\";\n  }\n}\n\nspecies clinicaltrials {\n  action reports_results (r&d r) {\n    write \"clinicaltrials reports results to r&d\";\n  }\n}\n\n  action seeks_approval (regulatoryagency r) {\n    write \"r&d seeks approval to regulatoryagency\";\n  }\n}\n\nspecies regulatoryagency {\n  action grants_approval (r&d r) {\n    write \"regulatoryagency grants approval to r&d\";\n  }\n}\n\n  action initiates_launch_campaign (marketing r) {\n    write \"r&d initiates launch campaign to marketing\";\n  }\n}\n\nspecies marketing {\n  action launches_drug (sales r) {\n    write \"marketing launches drug to sales\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create r&d number: 1;\n    create clinicaltrials number: 1;\n    create regulatoryagency number: 1;\n    create marketing number: 1;\n    create sales number: 1;\n    do (one_of(r&d) submits_drug_for_trials(one_of(clinicaltrials)));\n    do (one_of(clinicaltrials) reports_results(one_of(r&d)));\n    do (one_of(r&d) seeks_approval(one_of(regulatoryagency)));\n    do (one_of(regulatoryagency) grants_approval(one_of(r&d)));\n    do (one_of(r&d) initiates_launch_campaign(one_of(marketing)));\n    do (one_of(marketing) launches_drug(one_of(sales)));\n  }\n}","17":"model generated_model\n\nspecies customer {\n  action places_order (ecommerceplatform r) {\n    write \"customer places order to ecommerceplatform\";\n  }\n}\n\nspecies ecommerceplatform {\n  action processes_payment (paymentgateway r) {\n    write \"ecommerceplatform processes payment to paymentgateway\";\n  }\n}\n\nspecies paymentgateway {\n  action confirms_payment (ecommerceplatform r) {\n    write \"paymentgateway confirms payment to ecommerceplatform\";\n  }\n}\n\n  action sends_order_details (warehouse r) {\n    write \"ecommerceplatform sends order details to warehouse\";\n  }\n}\n\nspecies warehouse {\n  action prepares_and_ships_order (courierservice r) {\n    write \"warehouse prepares and ships order to courierservice\";\n  }\n}\n\nspecies courierservice {\n  action delivers_package (customer r) {\n    write \"courierservice delivers package to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create ecommerceplatform number: 1;\n    create paymentgateway number: 1;\n    create warehouse number: 1;\n    create courierservice number: 1;\n    do (one_of(customer) places_order(one_of(ecommerceplatform)));\n    do (one_of(ecommerceplatform) processes_payment(one_of(paymentgateway)));\n    do (one_of(paymentgateway) confirms_payment(one_of(ecommerceplatform)));\n    do (one_of(ecommerceplatform) sends_order_details(one_of(warehouse)));\n    do (one_of(warehouse) prepares_and_ships_order(one_of(courierservice)));\n    do (one_of(courierservice) delivers_package(one_of(customer)));\n  }\n}","18":"model generated_model\n\nspecies projectmanager {\n  action allocates_resources (teamleads r) {\n    write \"projectmanager allocates resources to teamleads\";\n  }\n}\n\nspecies teamleads {\n  action utilizes_resources (resources r) {\n    write \"teamleads utilizes resources to resources\";\n  }\n}\n\nspecies resources {\n  action provides_updates (projectmanager r) {\n    write \"resources provides updates to projectmanager\";\n  }\n}\n\n  action delivers_final_product (client r) {\n    write \"projectmanager delivers final product to client\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create projectmanager number: 1;\n    create teamleads number: 1;\n    create resources number: 1;\n    create client number: 1;\n    do (one_of(projectmanager) allocates_resources(one_of(teamleads)));\n    do (one_of(teamleads) utilizes_resources(one_of(resources)));\n    do (one_of(resources) provides_updates(one_of(projectmanager)));\n    do (one_of(projectmanager) delivers_final_product(one_of(client)));\n  }\n}","19":"model generated_model\n\nspecies cityplanning {\n  action holds_consultations (public r) {\n    write \"cityplanning holds consultations to public\";\n  }\n}\n\nspecies public {\n  action provides_feedback (cityplanning r) {\n    write \"public provides feedback to cityplanning\";\n  }\n}\n\n  action secures_funding (financedepartment r) {\n    write \"cityplanning secures funding to financedepartment\";\n  }\n}\n\nspecies financedepartment {\n  action approves_budget (cityplanning r) {\n    write \"financedepartment approves budget to cityplanning\";\n  }\n}\n\n  action begins_construction (constructionteam r) {\n    write \"cityplanning begins construction to constructionteam\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create cityplanning number: 1;\n    create public number: 1;\n    create financedepartment number: 1;\n    create constructionteam number: 1;\n    do (one_of(cityplanning) holds_consultations(one_of(public)));\n    do (one_of(public) provides_feedback(one_of(cityplanning)));\n    do (one_of(cityplanning) secures_funding(one_of(financedepartment)));\n    do (one_of(financedepartment) approves_budget(one_of(cityplanning)));\n    do (one_of(cityplanning) begins_construction(one_of(constructionteam)));\n  }\n}","20":"model generated_model\n\nspecies retailer {\n  action places_order (supplier r) {\n    write \"retailer places order to supplier\";\n  }\n}\n\nspecies supplier {\n  action ships_goods (retailer r) {\n    write \"supplier ships goods to retailer\";\n  }\n}\n\n  action stocks_goods (inventory r) {\n    write \"retailer stocks goods to inventory\";\n  }\n}\n\nspecies customer {\n  action purchases_products (retailer r) {\n    write \"customer purchases products to retailer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create retailer number: 1;\n    create supplier number: 1;\n    create inventory number: 1;\n    create customer number: 1;\n    do (one_of(retailer) places_order(one_of(supplier)));\n    do (one_of(supplier) ships_goods(one_of(retailer)));\n    do (one_of(retailer) stocks_goods(one_of(inventory)));\n    do (one_of(customer) purchases_products(one_of(retailer)));\n  }\n}","21":"model generated_model\n\nspecies healthcareprovider {\n  action administers_vaccine (patient r) {\n    write \"healthcareprovider administers vaccine to patient\";\n  }\n}\n\nspecies patient {\n  action provides_information (dataentry r) {\n    write \"patient provides information to dataentry\";\n  }\n}\n\nspecies dataentry {\n  action records_vaccination_data (healthcareprovider r) {\n    write \"dataentry records vaccination data to healthcareprovider\";\n  }\n}\n\n  action reports_vaccination_data (healthauthorities r) {\n    write \"healthcareprovider reports vaccination data to healthauthorities\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create healthcareprovider number: 1;\n    create patient number: 1;\n    create dataentry number: 1;\n    create healthauthorities number: 1;\n    do (one_of(healthcareprovider) administers_vaccine(one_of(patient)));\n    do (one_of(patient) provides_information(one_of(dataentry)));\n    do (one_of(dataentry) records_vaccination_data(one_of(healthcareprovider)));\n    do (one_of(healthcareprovider) reports_vaccination_data(one_of(healthauthorities)));\n  }\n}","22":"model generated_model\n\nspecies customer {\n  action browses_items (website r) {\n    write \"customer browses items to website\";\n  }\n}\n\nspecies website {\n  action adds_items_to_cart (shoppingcart r) {\n    write \"website adds items to cart to shoppingcart\";\n  }\n}\n\nspecies shoppingcart {\n  action proceeds_to_checkout (checkout r) {\n    write \"shoppingcart proceeds to checkout to checkout\";\n  }\n}\n\nspecies checkout {\n  action processes_payment (customer r) {\n    write \"checkout processes payment to customer\";\n  }\n}\n\n  action sends_order_confirmation (confirmation r) {\n    write \"checkout sends order confirmation to confirmation\";\n  }\n}\n\nspecies confirmation {\n  action confirms_order (customer r) {\n    write \"confirmation confirms order to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create website number: 1;\n    create shoppingcart number: 1;\n    create checkout number: 1;\n    create confirmation number: 1;\n    do (one_of(customer) browses_items(one_of(website)));\n    do (one_of(website) adds_items_to_cart(one_of(shoppingcart)));\n    do (one_of(shoppingcart) proceeds_to_checkout(one_of(checkout)));\n    do (one_of(checkout) processes_payment(one_of(customer)));\n    do (one_of(checkout) sends_order_confirmation(one_of(confirmation)));\n    do (one_of(confirmation) confirms_order(one_of(customer)));\n  }\n}","23":"model generated_model\n\nspecies author {\n  action submits_manuscript (editor r) {\n    write \"author submits manuscript to editor\";\n  }\n}\n\nspecies editor {\n  action provides_feedback (author r) {\n    write \"editor provides feedback to author\";\n  }\n}\n\n  action revises_manuscript (editor r) {\n    write \"author revises manuscript to editor\";\n  }\n}\n\n  action requests_cover_design (designteam r) {\n    write \"editor requests cover design to designteam\";\n  }\n}\n\nspecies designteam {\n  action delivers_cover (editor r) {\n    write \"designteam delivers cover to editor\";\n  }\n}\n\n  action sends_final_manuscript (printing r) {\n    write \"editor sends final manuscript to printing\";\n  }\n}\n\nspecies printing {\n  action prints_and_ships_books (distribution r) {\n    write \"printing prints and ships books to distribution\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create author number: 1;\n    create editor number: 1;\n    create designteam number: 1;\n    create printing number: 1;\n    create distribution number: 1;\n    do (one_of(author) submits_manuscript(one_of(editor)));\n    do (one_of(editor) provides_feedback(one_of(author)));\n    do (one_of(author) revises_manuscript(one_of(editor)));\n    do (one_of(editor) requests_cover_design(one_of(designteam)));\n    do (one_of(designteam) delivers_cover(one_of(editor)));\n    do (one_of(editor) sends_final_manuscript(one_of(printing)));\n    do (one_of(printing) prints_and_ships_books(one_of(distribution)));\n  }\n}","24":"model generated_model\n\nspecies techcompany {\n  action launches_campaign (marketing r) {\n    write \"techcompany launches campaign to marketing\";\n  }\n}\n\nspecies marketing {\n  action collects_feedback (customer r) {\n    write \"marketing collects feedback to customer\";\n  }\n}\n\nspecies customer {\n  action provides_feedback (supportteam r) {\n    write \"customer provides feedback to supportteam\";\n  }\n}\n\nspecies supportteam {\n  action suggests_updates (developmentteam r) {\n    write \"supportteam suggests updates to developmentteam\";\n  }\n}\n\nspecies developmentteam {\n  action releases_updates (techcompany r) {\n    write \"developmentteam releases updates to techcompany\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create techcompany number: 1;\n    create marketing number: 1;\n    create customer number: 1;\n    create developmentteam number: 1;\n    create supportteam number: 1;\n    do (one_of(techcompany) launches_campaign(one_of(marketing)));\n    do (one_of(marketing) collects_feedback(one_of(customer)));\n    do (one_of(customer) provides_feedback(one_of(supportteam)));\n    do (one_of(supportteam) suggests_updates(one_of(developmentteam)));\n    do (one_of(developmentteam) releases_updates(one_of(techcompany)));\n  }\n}","25":"model generated_model\n\nspecies censusbureau {\n  action conducts_surveys (fieldagents r) {\n    write \"censusbureau conducts surveys to fieldagents\";\n  }\n}\n\nspecies fieldagents {\n  action submits_data (censusbureau r) {\n    write \"fieldagents submits data to censusbureau\";\n  }\n}\n\n  action analyzes_data (dataanalyst r) {\n    write \"censusbureau analyzes data to dataanalyst\";\n  }\n}\n\nspecies dataanalyst {\n  action publishes_reports (policymakers r) {\n    write \"dataanalyst publishes reports to policymakers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create censusbureau number: 1;\n    create fieldagents number: 1;\n    create dataanalyst number: 1;\n    create policymakers number: 1;\n    do (one_of(censusbureau) conducts_surveys(one_of(fieldagents)));\n    do (one_of(fieldagents) submits_data(one_of(censusbureau)));\n    do (one_of(censusbureau) analyzes_data(one_of(dataanalyst)));\n    do (one_of(dataanalyst) publishes_reports(one_of(policymakers)));\n  }\n}","26":"model generated_model\n\nspecies productioncompany {\n  action distributes_movie (theaters r) {\n    write \"productioncompany distributes movie to theaters\";\n  }\n}\n\nspecies theaters {\n  action screens_movie (audience r) {\n    write \"theaters screens movie to audience\";\n  }\n}\n\n  action streams_movie (streamingservice r) {\n    write \"productioncompany streams movie to streamingservice\";\n  }\n}\n\nspecies audience {\n  action watches_movie_online (streamingservice r) {\n    write \"audience watches movie online to streamingservice\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create productioncompany number: 1;\n    create theaters number: 1;\n    create streamingservice number: 1;\n    create audience number: 1;\n    do (one_of(productioncompany) distributes_movie(one_of(theaters)));\n    do (one_of(theaters) screens_movie(one_of(audience)));\n    do (one_of(productioncompany) streams_movie(one_of(streamingservice)));\n    do (one_of(audience) watches_movie_online(one_of(streamingservice)));\n  }\n}","27":"model generated_model\n\nspecies customer {\n  action requests_account_opening (bank r) {\n    write \"customer requests account opening to bank\";\n  }\n}\n\nspecies bank {\n  action processes_application (accountopening r) {\n    write \"bank processes application to accountopening\";\n  }\n}\n\nspecies accountopening {\n  action opens_account (customer r) {\n    write \"accountopening opens account to customer\";\n  }\n}\n\n  action issues_debit_card (cardissuance r) {\n    write \"accountopening issues debit card to cardissuance\";\n  }\n}\n\nspecies cardissuance {\n  action sends_card (customer r) {\n    write \"cardissuance sends card to customer\";\n  }\n}\n\n  action activates_online_banking (onlinebanking r) {\n    write \"accountopening activates online banking to onlinebanking\";\n  }\n}\n\nspecies onlinebanking {\n  action provides_access (customer r) {\n    write \"onlinebanking provides access to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create bank number: 1;\n    create accountopening number: 1;\n    create cardissuance number: 1;\n    create onlinebanking number: 1;\n    do (one_of(customer) requests_account_opening(one_of(bank)));\n    do (one_of(bank) processes_application(one_of(accountopening)));\n    do (one_of(accountopening) opens_account(one_of(customer)));\n    do (one_of(accountopening) issues_debit_card(one_of(cardissuance)));\n    do (one_of(cardissuance) sends_card(one_of(customer)));\n    do (one_of(accountopening) activates_online_banking(one_of(onlinebanking)));\n    do (one_of(onlinebanking) provides_access(one_of(customer)));\n  }\n}","28":"model generated_model\n\nspecies travelagency {\n  action books_flights (airline r) {\n    write \"travelagency books flights to airline\";\n  }\n}\n\nspecies airline {\n  action sends_flight_details (travelagency r) {\n    write \"airline sends flight details to travelagency\";\n  }\n}\n\n  action reserves_rooms (hotel r) {\n    write \"travelagency reserves rooms to hotel\";\n  }\n}\n\nspecies hotel {\n  action confirms_reservation (travelagency r) {\n    write \"hotel confirms reservation to travelagency\";\n  }\n}\n\n  action arranges_tours (touroperator r) {\n    write \"travelagency arranges tours to touroperator\";\n  }\n}\n\nspecies touroperator {\n  action provides_tour_services (tourist r) {\n    write \"touroperator provides tour services to tourist\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create travelagency number: 1;\n    create airline number: 1;\n    create hotel number: 1;\n    create touroperator number: 1;\n    create tourist number: 1;\n    do (one_of(travelagency) books_flights(one_of(airline)));\n    do (one_of(airline) sends_flight_details(one_of(travelagency)));\n    do (one_of(travelagency) reserves_rooms(one_of(hotel)));\n    do (one_of(hotel) confirms_reservation(one_of(travelagency)));\n    do (one_of(travelagency) arranges_tours(one_of(touroperator)));\n    do (one_of(touroperator) provides_tour_services(one_of(tourist)));\n  }\n}","29":"model generated_model\n\nspecies customer {\n  action places_order (foodapp r) {\n    write \"customer places order to foodapp\";\n  }\n}\n\nspecies foodapp {\n  action sends_order_details (restaurant r) {\n    write \"foodapp sends order details to restaurant\";\n  }\n}\n\nspecies restaurant {\n  action prepares_order (deliverydriver r) {\n    write \"restaurant prepares order to deliverydriver\";\n  }\n}\n\nspecies deliverydriver {\n  action delivers_food (customer r) {\n    write \"deliverydriver delivers food to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create foodapp number: 1;\n    create restaurant number: 1;\n    create deliverydriver number: 1;\n    do (one_of(customer) places_order(one_of(foodapp)));\n    do (one_of(foodapp) sends_order_details(one_of(restaurant)));\n    do (one_of(restaurant) prepares_order(one_of(deliverydriver)));\n    do (one_of(deliverydriver) delivers_food(one_of(customer)));\n  }\n}","30":"model generated_model\n\nspecies professor {\n  action assigns_project (students r) {\n    write \"professor assigns project to students\";\n  }\n}\n\nspecies students {\n  action conducts_research (researchteam r) {\n    write \"students conducts research to researchteam\";\n  }\n}\n\nspecies researchteam {\n  action provides_guidance (students r) {\n    write \"researchteam provides guidance to students\";\n  }\n}\n\n  action submits_reports (professor r) {\n    write \"students submits reports to professor\";\n  }\n}\n\n  action assigns_grades (gradingsystem r) {\n    write \"professor assigns grades to gradingsystem\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create professor number: 1;\n    create students number: 1;\n    create researchteam number: 1;\n    create gradingsystem number: 1;\n    do (one_of(professor) assigns_project(one_of(students)));\n    do (one_of(students) conducts_research(one_of(researchteam)));\n    do (one_of(researchteam) provides_guidance(one_of(students)));\n    do (one_of(students) submits_reports(one_of(professor)));\n    do (one_of(professor) assigns_grades(one_of(gradingsystem)));\n  }\n}","31":"model generated_model\n\nspecies supplier {\n  action delivers_raw_materials (receiving r) {\n    write \"supplier delivers raw materials to receiving\";\n  }\n}\n\nspecies receiving {\n  action transfers_materials (processing r) {\n    write \"receiving transfers materials to processing\";\n  }\n}\n\nspecies processing {\n  action passes_processed_components (assembly r) {\n    write \"processing passes processed components to assembly\";\n  }\n}\n\nspecies assembly {\n  action prepares_finished_products (shipping r) {\n    write \"assembly prepares finished products to shipping\";\n  }\n}\n\nspecies shipping {\n  action ships_products (distributor r) {\n    write \"shipping ships products to distributor\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create supplier number: 1;\n    create receiving number: 1;\n    create processing number: 1;\n    create assembly number: 1;\n    create shipping number: 1;\n    create distributor number: 1;\n    do (one_of(supplier) delivers_raw_materials(one_of(receiving)));\n    do (one_of(receiving) transfers_materials(one_of(processing)));\n    do (one_of(processing) passes_processed_components(one_of(assembly)));\n    do (one_of(assembly) prepares_finished_products(one_of(shipping)));\n    do (one_of(shipping) ships_products(one_of(distributor)));\n  }\n}","32":"model generated_model\n\nspecies candidate {\n  action plans_campaign (campaignteam r) {\n    write \"candidate plans campaign to campaignteam\";\n  }\n}\n\nspecies campaignteam {\n  action organizes_rallies (voters r) {\n    write \"campaignteam organizes rallies to voters\";\n  }\n}\n\n  action participates_in_debates (opponents r) {\n    write \"candidate participates in debates to opponents\";\n  }\n}\n\nspecies voters {\n  action casts_votes (electioncommission r) {\n    write \"voters casts votes to electioncommission\";\n  }\n}\n\nspecies electioncommission {\n  action declares_winner (candidate r) {\n    write \"electioncommission declares winner to candidate\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create candidate number: 1;\n    create campaignteam number: 1;\n    create voters number: 1;\n    create opponents number: 1;\n    create electioncommission number: 1;\n    do (one_of(candidate) plans_campaign(one_of(campaignteam)));\n    do (one_of(campaignteam) organizes_rallies(one_of(voters)));\n    do (one_of(candidate) participates_in_debates(one_of(opponents)));\n    do (one_of(voters) casts_votes(one_of(electioncommission)));\n    do (one_of(electioncommission) declares_winner(one_of(candidate)));\n  }\n}","33":"model generated_model\n\nspecies customer {\n  action browses_products (onlinestore r) {\n    write \"customer browses products to onlinestore\";\n  }\n}\n\nspecies onlinestore {\n  action manages_listings (productlisting r) {\n    write \"onlinestore manages listings to productlisting\";\n  }\n}\n\n  action places_order (orderprocessing r) {\n    write \"customer places order to orderprocessing\";\n  }\n}\n\nspecies orderprocessing {\n  action processes_order (customer r) {\n    write \"orderprocessing processes order to customer\";\n  }\n}\n\n  action requests_return (returns r) {\n    write \"customer requests return to returns\";\n  }\n}\n\nspecies returns {\n  action restocks_item (inventory r) {\n    write \"returns restocks item to inventory\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create onlinestore number: 1;\n    create productlisting number: 1;\n    create orderprocessing number: 1;\n    create returns number: 1;\n    create inventory number: 1;\n    do (one_of(customer) browses_products(one_of(onlinestore)));\n    do (one_of(onlinestore) manages_listings(one_of(productlisting)));\n    do (one_of(customer) places_order(one_of(orderprocessing)));\n    do (one_of(orderprocessing) processes_order(one_of(customer)));\n    do (one_of(customer) requests_return(one_of(returns)));\n    do (one_of(returns) restocks_item(one_of(inventory)));\n  }\n}","34":"model generated_model\n\nspecies eventplanner {\n  action books_venue (venue r) {\n    write \"eventplanner books venue to venue\";\n  }\n}\n\nspecies venue {\n  action confirms_booking (eventplanner r) {\n    write \"venue confirms booking to eventplanner\";\n  }\n}\n\n  action arranges_speakers (speakers r) {\n    write \"eventplanner arranges speakers to speakers\";\n  }\n}\n\nspecies speakers {\n  action confirms_participation (eventplanner r) {\n    write \"speakers confirms participation to eventplanner\";\n  }\n}\n\n  action coordinates_services (vendors r) {\n    write \"eventplanner coordinates services to vendors\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create eventplanner number: 1;\n    create venue number: 1;\n    create speakers number: 1;\n    create vendors number: 1;\n    do (one_of(eventplanner) books_venue(one_of(venue)));\n    do (one_of(venue) confirms_booking(one_of(eventplanner)));\n    do (one_of(eventplanner) arranges_speakers(one_of(speakers)));\n    do (one_of(speakers) confirms_participation(one_of(eventplanner)));\n    do (one_of(eventplanner) coordinates_services(one_of(vendors)));\n  }\n}","35":"model generated_model\n\nspecies customer {\n  action applies_for_credit_card (bank r) {\n    write \"customer applies for credit card to bank\";\n  }\n}\n\nspecies bank {\n  action evaluates_application (creditdepartment r) {\n    write \"bank evaluates application to creditdepartment\";\n  }\n}\n\nspecies creditdepartment {\n  action approves_credit_limit (bank r) {\n    write \"creditdepartment approves credit limit to bank\";\n  }\n}\n\n  action issues_card (cardissuance r) {\n    write \"bank issues card to cardissuance\";\n  }\n}\n\nspecies cardissuance {\n  action sends_credit_card (customer r) {\n    write \"cardissuance sends credit card to customer\";\n  }\n}\n\n  action makes_purchases (transactions r) {\n    write \"customer makes purchases to transactions\";\n  }\n}\n\nspecies transactions {\n  action processes_transactions (bank r) {\n    write \"transactions processes transactions to bank\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create bank number: 1;\n    create creditdepartment number: 1;\n    create cardissuance number: 1;\n    create transactions number: 1;\n    do (one_of(customer) applies_for_credit_card(one_of(bank)));\n    do (one_of(bank) evaluates_application(one_of(creditdepartment)));\n    do (one_of(creditdepartment) approves_credit_limit(one_of(bank)));\n    do (one_of(bank) issues_card(one_of(cardissuance)));\n    do (one_of(cardissuance) sends_credit_card(one_of(customer)));\n    do (one_of(customer) makes_purchases(one_of(transactions)));\n    do (one_of(transactions) processes_transactions(one_of(bank)));\n  }\n}","36":"model generated_model\n\nspecies patient {\n  action schedules_appointment (appointmentsystem r) {\n    write \"patient schedules appointment to appointmentsystem\";\n  }\n}\n\nspecies appointmentsystem {\n  action updates_records (recordsmanagement r) {\n    write \"appointmentsystem updates records to recordsmanagement\";\n  }\n}\n\n  action attends_appointment (doctor r) {\n    write \"patient attends appointment to doctor\";\n  }\n}\n\nspecies doctor {\n  action orders_tests (lab r) {\n    write \"doctor orders tests to lab\";\n  }\n}\n\nspecies lab {\n  action sends_results (doctor r) {\n    write \"lab sends results to doctor\";\n  }\n}\n\n  action updates_medical_history (recordsmanagement r) {\n    write \"doctor updates medical history to recordsmanagement\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create patient number: 1;\n    create recordsmanagement number: 1;\n    create appointmentsystem number: 1;\n    create lab number: 1;\n    create doctor number: 1;\n    do (one_of(patient) schedules_appointment(one_of(appointmentsystem)));\n    do (one_of(appointmentsystem) updates_records(one_of(recordsmanagement)));\n    do (one_of(patient) attends_appointment(one_of(doctor)));\n    do (one_of(doctor) orders_tests(one_of(lab)));\n    do (one_of(lab) sends_results(one_of(doctor)));\n    do (one_of(doctor) updates_medical_history(one_of(recordsmanagement)));\n  }\n}","37":"model generated_model\n\nspecies supplier {\n  action delivers_raw_materials (manufacturer r) {\n    write \"supplier delivers raw materials to manufacturer\";\n  }\n}\n\nspecies manufacturer {\n  action stores_finished_products (inventorymanagement r) {\n    write \"manufacturer stores finished products to inventorymanagement\";\n  }\n}\n\nspecies inventorymanagement {\n  action arranges_shipment (logistics r) {\n    write \"inventorymanagement arranges shipment to logistics\";\n  }\n}\n\nspecies logistics {\n  action delivers_products (retailer r) {\n    write \"logistics delivers products to retailer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create supplier number: 1;\n    create manufacturer number: 1;\n    create inventorymanagement number: 1;\n    create logistics number: 1;\n    create retailer number: 1;\n    do (one_of(supplier) delivers_raw_materials(one_of(manufacturer)));\n    do (one_of(manufacturer) stores_finished_products(one_of(inventorymanagement)));\n    do (one_of(inventorymanagement) arranges_shipment(one_of(logistics)));\n    do (one_of(logistics) delivers_products(one_of(retailer)));\n  }\n}","38":"model generated_model\n\nspecies client {\n  action commissions_campaign (adagency r) {\n    write \"client commissions campaign to adagency\";\n  }\n}\n\nspecies adagency {\n  action develops_content (creativeteam r) {\n    write \"adagency develops content to creativeteam\";\n  }\n}\n\nspecies creativeteam {\n  action distributes_content (mediachannels r) {\n    write \"creativeteam distributes content to mediachannels\";\n  }\n}\n\nspecies mediachannels {\n  action runs_campaign (client r) {\n    write \"mediachannels runs campaign to client\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create client number: 1;\n    create adagency number: 1;\n    create creativeteam number: 1;\n    create mediachannels number: 1;\n    do (one_of(client) commissions_campaign(one_of(adagency)));\n    do (one_of(adagency) develops_content(one_of(creativeteam)));\n    do (one_of(creativeteam) distributes_content(one_of(mediachannels)));\n    do (one_of(mediachannels) runs_campaign(one_of(client)));\n  }\n}","39":"model generated_model\n\nspecies productowner {\n  action defines_feature (developmentteam r) {\n    write \"productowner defines feature to developmentteam\";\n  }\n}\n\nspecies developmentteam {\n  action integrates_with_system (integrationteam r) {\n    write \"developmentteam integrates with system to integrationteam\";\n  }\n}\n\nspecies integrationteam {\n  action requests_testing (testingteam r) {\n    write \"integrationteam requests testing to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action approves_for_deployment (operations r) {\n    write \"testingteam approves for deployment to operations\";\n  }\n}\n\nspecies operations {\n  action deploys_feature (production r) {\n    write \"operations deploys feature to production\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create productowner number: 1;\n    create developmentteam number: 1;\n    create integrationteam number: 1;\n    create testingteam number: 1;\n    create operations number: 1;\n    do (one_of(productowner) defines_feature(one_of(developmentteam)));\n    do (one_of(developmentteam) integrates_with_system(one_of(integrationteam)));\n    do (one_of(integrationteam) requests_testing(one_of(testingteam)));\n    do (one_of(testingteam) approves_for_deployment(one_of(operations)));\n    do (one_of(operations) deploys_feature(one_of(production)));\n  }\n}","40":"model generated_model\n\nspecies productteam {\n  action launches_new_feature (users r) {\n    write \"productteam launches new feature to users\";\n  }\n}\n\nspecies users {\n  action provides_feedback (feedbacksystem r) {\n    write \"users provides feedback to feedbacksystem\";\n  }\n}\n\nspecies feedbacksystem {\n  action suggests_improvements (developmentteam r) {\n    write \"feedbacksystem suggests improvements to developmentteam\";\n  }\n}\n\nspecies developmentteam {\n  action updates_feature (productteam r) {\n    write \"developmentteam updates feature to productteam\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create productteam number: 1;\n    create users number: 1;\n    create feedbacksystem number: 1;\n    create developmentteam number: 1;\n    do (one_of(productteam) launches_new_feature(one_of(users)));\n    do (one_of(users) provides_feedback(one_of(feedbacksystem)));\n    do (one_of(feedbacksystem) suggests_improvements(one_of(developmentteam)));\n    do (one_of(developmentteam) updates_feature(one_of(productteam)));\n  }\n}","41":"model generated_model\n\nspecies researchteam {\n  action conducts_trials (clinicaltrials r) {\n    write \"researchteam conducts trials to clinicaltrials\";\n  }\n}\n\nspecies clinicaltrials {\n  action reports_results (researchteam r) {\n    write \"clinicaltrials reports results to researchteam\";\n  }\n}\n\n  action submits_findings (regulatoryagency r) {\n    write \"researchteam submits findings to regulatoryagency\";\n  }\n}\n\nspecies regulatoryagency {\n  action reviews_and_approves (approvalcommittee r) {\n    write \"regulatoryagency reviews and approves to approvalcommittee\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create researchteam number: 1;\n    create clinicaltrials number: 1;\n    create regulatoryagency number: 1;\n    create approvalcommittee number: 1;\n    do (one_of(researchteam) conducts_trials(one_of(clinicaltrials)));\n    do (one_of(clinicaltrials) reports_results(one_of(researchteam)));\n    do (one_of(researchteam) submits_findings(one_of(regulatoryagency)));\n    do (one_of(regulatoryagency) reviews_and_approves(one_of(approvalcommittee)));\n  }\n}","42":"model generated_model\n\nspecies retailchain {\n  action hires_staff (hr r) {\n    write \"retailchain hires staff to hr\";\n  }\n}\n\nspecies hr {\n  action recruits_and_trains (retailchain r) {\n    write \"hr recruits and trains to retailchain\";\n  }\n}\n\n  action stocks_store (inventoryteam r) {\n    write \"retailchain stocks store to inventoryteam\";\n  }\n}\n\nspecies inventoryteam {\n  action opens_for_business (customers r) {\n    write \"inventoryteam opens for business to customers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create retailchain number: 1;\n    create hr number: 1;\n    create inventoryteam number: 1;\n    create customers number: 1;\n    do (one_of(retailchain) hires_staff(one_of(hr)));\n    do (one_of(hr) recruits_and_trains(one_of(retailchain)));\n    do (one_of(retailchain) stocks_store(one_of(inventoryteam)));\n    do (one_of(inventoryteam) opens_for_business(one_of(customers)));\n  }\n}","43":"model generated_model\n\nspecies autocompany {\n  action issues_recall_notice (customer r) {\n    write \"autocompany issues recall notice to customer\";\n  }\n}\n\nspecies customer {\n  action schedules_repair (servicecenter r) {\n    write \"customer schedules repair to servicecenter\";\n  }\n}\n\nspecies servicecenter {\n  action fixes_defect (repairteam r) {\n    write \"servicecenter fixes defect to repairteam\";\n  }\n}\n\nspecies repairteam {\n  action returns_vehicle (customer r) {\n    write \"repairteam returns vehicle to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create autocompany number: 1;\n    create servicecenter number: 1;\n    create repairteam number: 1;\n    do (one_of(autocompany) issues_recall_notice(one_of(customer)));\n    do (one_of(customer) schedules_repair(one_of(servicecenter)));\n    do (one_of(servicecenter) fixes_defect(one_of(repairteam)));\n    do (one_of(repairteam) returns_vehicle(one_of(customer)));\n  }\n}","44":"model generated_model\n\nspecies govagency {\n  action issues_regulation (business r) {\n    write \"govagency issues regulation to business\";\n  }\n}\n\nspecies business {\n  action ensures_compliance (compliancedept r) {\n    write \"business ensures compliance to compliancedept\";\n  }\n}\n\nspecies compliancedept {\n  action reports_adherence (govagency r) {\n    write \"compliancedept reports adherence to govagency\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create govagency number: 1;\n    create business number: 1;\n    create compliancedept number: 1;\n    do (one_of(govagency) issues_regulation(one_of(business)));\n    do (one_of(business) ensures_compliance(one_of(compliancedept)));\n    do (one_of(compliancedept) reports_adherence(one_of(govagency)));\n  }\n}","45":"model generated_model\n\nspecies customer {\n  action books_vehicle (rentalservice r) {\n    write \"customer books vehicle to rentalservice\";\n  }\n}\n\nspecies rentalservice {\n  action assigns_vehicle (fleetmanagement r) {\n    write \"rentalservice assigns vehicle to fleetmanagement\";\n  }\n}\n\nspecies fleetmanagement {\n  action prepares_car (vehiclepreparation r) {\n    write \"fleetmanagement prepares car to vehiclepreparation\";\n  }\n}\n\nspecies vehiclepreparation {\n  action hands_over_vehicle (customer r) {\n    write \"vehiclepreparation hands over vehicle to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create rentalservice number: 1;\n    create fleetmanagement number: 1;\n    create vehiclepreparation number: 1;\n    do (one_of(customer) books_vehicle(one_of(rentalservice)));\n    do (one_of(rentalservice) assigns_vehicle(one_of(fleetmanagement)));\n    do (one_of(fleetmanagement) prepares_car(one_of(vehiclepreparation)));\n    do (one_of(vehiclepreparation) hands_over_vehicle(one_of(customer)));\n  }\n}","46":"model generated_model\n\nspecies researcher {\n  action conducts_study (studyparticipants r) {\n    write \"researcher conducts study to studyparticipants\";\n  }\n}\n\nspecies studyparticipants {\n  action provides_data (researcher r) {\n    write \"studyparticipants provides data to researcher\";\n  }\n}\n\n  action analyzes_results (dataanalyst r) {\n    write \"researcher analyzes results to dataanalyst\";\n  }\n}\n\nspecies dataanalyst {\n  action reports_findings (researcher r) {\n    write \"dataanalyst reports findings to researcher\";\n  }\n}\n\n  action publishes_paper (journal r) {\n    write \"researcher publishes paper to journal\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create researcher number: 1;\n    create studyparticipants number: 1;\n    create dataanalyst number: 1;\n    create journal number: 1;\n    do (one_of(researcher) conducts_study(one_of(studyparticipants)));\n    do (one_of(studyparticipants) provides_data(one_of(researcher)));\n    do (one_of(researcher) analyzes_results(one_of(dataanalyst)));\n    do (one_of(dataanalyst) reports_findings(one_of(researcher)));\n    do (one_of(researcher) publishes_paper(one_of(journal)));\n  }\n}","47":"model generated_model\n\nspecies patient {\n  action admitted_to_er (erteam r) {\n    write \"patient admitted to er to erteam\";\n  }\n}\n\nspecies erteam {\n  action diagnoses_condition (diagnosisteam r) {\n    write \"erteam diagnoses condition to diagnosisteam\";\n  }\n}\n\nspecies diagnosisteam {\n  action prescribes_treatment (treatmentteam r) {\n    write \"diagnosisteam prescribes treatment to treatmentteam\";\n  }\n}\n\nspecies treatmentteam {\n  action updates_records (medicalrecords r) {\n    write \"treatmentteam updates records to medicalrecords\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create patient number: 1;\n    create erteam number: 1;\n    create diagnosisteam number: 1;\n    create treatmentteam number: 1;\n    create medicalrecords number: 1;\n    do (one_of(patient) admitted_to_er(one_of(erteam)));\n    do (one_of(erteam) diagnoses_condition(one_of(diagnosisteam)));\n    do (one_of(diagnosisteam) prescribes_treatment(one_of(treatmentteam)));\n    do (one_of(treatmentteam) updates_records(one_of(medicalrecords)));\n  }\n}","48":"model generated_model\n\nspecies reporter {\n  action sends_footage (editor r) {\n    write \"reporter sends footage to editor\";\n  }\n}\n\nspecies editor {\n  action finalizes_content (broadcastteam r) {\n    write \"editor finalizes content to broadcastteam\";\n  }\n}\n\nspecies broadcastteam {\n  action broadcasts_event (viewers r) {\n    write \"broadcastteam broadcasts event to viewers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create reporter number: 1;\n    create editor number: 1;\n    create broadcastteam number: 1;\n    create viewers number: 1;\n    do (one_of(reporter) sends_footage(one_of(editor)));\n    do (one_of(editor) finalizes_content(one_of(broadcastteam)));\n    do (one_of(broadcastteam) broadcasts_event(one_of(viewers)));\n  }\n}","49":"model generated_model\n\nspecies customer {\n  action places_order (waiter r) {\n    write \"customer places order to waiter\";\n  }\n}\n\nspecies waiter {\n  action sends_order_to_kitchen (kitchen r) {\n    write \"waiter sends order to kitchen to kitchen\";\n  }\n}\n\nspecies kitchen {\n  action prepares_food (waiter r) {\n    write \"kitchen prepares food to waiter\";\n  }\n}\n\n  action serves_food (customer r) {\n    write \"waiter serves food to customer\";\n  }\n}\n\n  action pays_bill (cashier r) {\n    write \"customer pays bill to cashier\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create waiter number: 1;\n    create kitchen number: 1;\n    create cashier number: 1;\n    do (one_of(customer) places_order(one_of(waiter)));\n    do (one_of(waiter) sends_order_to_kitchen(one_of(kitchen)));\n    do (one_of(kitchen) prepares_food(one_of(waiter)));\n    do (one_of(waiter) serves_food(one_of(customer)));\n    do (one_of(customer) pays_bill(one_of(cashier)));\n  }\n}","50":"model generated_model\n\nspecies guest {\n  action makes_reservation (bookingsystem r) {\n    write \"guest makes reservation to bookingsystem\";\n  }\n}\n\nspecies bookingsystem {\n  action confirms_booking (reception r) {\n    write \"bookingsystem confirms booking to reception\";\n  }\n}\n\n  action checks_in (reception r) {\n    write \"guest checks in to reception\";\n  }\n}\n\nspecies reception {\n  action provides_services (housekeeping r) {\n    write \"reception provides services to housekeeping\";\n  }\n}\n\n  action checks_out (billing r) {\n    write \"guest checks out to billing\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create guest number: 1;\n    create bookingsystem number: 1;\n    create reception number: 1;\n    create housekeeping number: 1;\n    create billing number: 1;\n    do (one_of(guest) makes_reservation(one_of(bookingsystem)));\n    do (one_of(bookingsystem) confirms_booking(one_of(reception)));\n    do (one_of(guest) checks_in(one_of(reception)));\n    do (one_of(reception) provides_services(one_of(housekeeping)));\n    do (one_of(guest) checks_out(one_of(billing)));\n  }\n}","51":"model generated_model\n\nspecies student {\n  action registers_on_platform (learningplatform r) {\n    write \"student registers on platform to learningplatform\";\n  }\n}\n\nspecies learningplatform {\n  action enrolls_in_course (enrollmentsystem r) {\n    write \"learningplatform enrolls in course to enrollmentsystem\";\n  }\n}\n\nspecies enrollmentsystem {\n  action informs_about_new_student (instructor r) {\n    write \"enrollmentsystem informs about new student to instructor\";\n  }\n}\n\nspecies instructor {\n  action delivers_lessons (learningplatform r) {\n    write \"instructor delivers lessons to learningplatform\";\n  }\n}\n\n  action conducts_assessments (assessment r) {\n    write \"learningplatform conducts assessments to assessment\";\n  }\n}\n\nspecies assessment {\n  action provides_feedback (student r) {\n    write \"assessment provides feedback to student\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create student number: 1;\n    create learningplatform number: 1;\n    create enrollmentsystem number: 1;\n    create instructor number: 1;\n    create assessment number: 1;\n    do (one_of(student) registers_on_platform(one_of(learningplatform)));\n    do (one_of(learningplatform) enrolls_in_course(one_of(enrollmentsystem)));\n    do (one_of(enrollmentsystem) informs_about_new_student(one_of(instructor)));\n    do (one_of(instructor) delivers_lessons(one_of(learningplatform)));\n    do (one_of(learningplatform) conducts_assessments(one_of(assessment)));\n    do (one_of(assessment) provides_feedback(one_of(student)));\n  }\n}","52":"model generated_model\n\nspecies client {\n  action awards_contract (constructioncompany r) {\n    write \"client awards contract to constructioncompany\";\n  }\n}\n\nspecies constructioncompany {\n  action designs_building (designteam r) {\n    write \"constructioncompany designs building to designteam\";\n  }\n}\n\nspecies designteam {\n  action provides_plans (constructionteam r) {\n    write \"designteam provides plans to constructionteam\";\n  }\n}\n\nspecies constructionteam {\n  action completes_construction (inspection r) {\n    write \"constructionteam completes construction to inspection\";\n  }\n}\n\nspecies inspection {\n  action passes_inspection (client r) {\n    write \"inspection passes inspection to client\";\n  }\n}\n\n  action hands_over_building (client r) {\n    write \"constructionteam hands over building to client\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create constructioncompany number: 1;\n    create client number: 1;\n    create designteam number: 1;\n    create constructionteam number: 1;\n    create inspection number: 1;\n    do (one_of(client) awards_contract(one_of(constructioncompany)));\n    do (one_of(constructioncompany) designs_building(one_of(designteam)));\n    do (one_of(designteam) provides_plans(one_of(constructionteam)));\n    do (one_of(constructionteam) completes_construction(one_of(inspection)));\n    do (one_of(inspection) passes_inspection(one_of(client)));\n    do (one_of(constructionteam) hands_over_building(one_of(client)));\n  }\n}","53":"model generated_model\n\nspecies designer {\n  action designs_collection (productionteam r) {\n    write \"designer designs collection to productionteam\";\n  }\n}\n\nspecies productionteam {\n  action produces_garments (designer r) {\n    write \"productionteam produces garments to designer\";\n  }\n}\n\n  action showcases_collection (fashionshow r) {\n    write \"designer showcases collection to fashionshow\";\n  }\n}\n\nspecies buyers {\n  action places_orders (designer r) {\n    write \"buyers places orders to designer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create designer number: 1;\n    create productionteam number: 1;\n    create fashionshow number: 1;\n    create buyers number: 1;\n    do (one_of(designer) designs_collection(one_of(productionteam)));\n    do (one_of(productionteam) produces_garments(one_of(designer)));\n    do (one_of(designer) showcases_collection(one_of(fashionshow)));\n    do (one_of(buyers) places_orders(one_of(designer)));\n  }\n}","54":"model generated_model\n\nspecies institution {\n  action recruits_teacher (hr r) {\n    write \"institution recruits teacher to hr\";\n  }\n}\n\nspecies hr {\n  action onboards_new_hire (teacher r) {\n    write \"hr onboards new hire to teacher\";\n  }\n}\n\n  action assigns_classes (teacher r) {\n    write \"institution assigns classes to teacher\";\n  }\n}\n\nspecies teacher {\n  action teaches_classes (students r) {\n    write \"teacher teaches classes to students\";\n  }\n}\n\nspecies evaluation {\n  action assesses_performance (institution r) {\n    write \"evaluation assesses performance to institution\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create institution number: 1;\n    create hr number: 1;\n    create teacher number: 1;\n    create students number: 1;\n    create evaluation number: 1;\n    do (one_of(institution) recruits_teacher(one_of(hr)));\n    do (one_of(hr) onboards_new_hire(one_of(teacher)));\n    do (one_of(institution) assigns_classes(one_of(teacher)));\n    do (one_of(teacher) teaches_classes(one_of(students)));\n    do (one_of(evaluation) assesses_performance(one_of(institution)));\n  }\n}","55":"model generated_model\n\nspecies startup {\n  action develops_app (developmentteam r) {\n    write \"startup develops app to developmentteam\";\n  }\n}\n\nspecies developmentteam {\n  action submits_for_testing (testingteam r) {\n    write \"developmentteam submits for testing to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action reports_issues (developmentteam r) {\n    write \"testingteam reports issues to developmentteam\";\n  }\n}\n\n  action launches_app (appstore r) {\n    write \"developmentteam launches app to appstore\";\n  }\n}\n\nspecies appstore {\n  action provides_access (users r) {\n    write \"appstore provides access to users\";\n  }\n}\n\nspecies users {\n  action gives_feedback (startup r) {\n    write \"users gives feedback to startup\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create startup number: 1;\n    create developmentteam number: 1;\n    create testingteam number: 1;\n    create appstore number: 1;\n    create users number: 1;\n    do (one_of(startup) develops_app(one_of(developmentteam)));\n    do (one_of(developmentteam) submits_for_testing(one_of(testingteam)));\n    do (one_of(testingteam) reports_issues(one_of(developmentteam)));\n    do (one_of(developmentteam) launches_app(one_of(appstore)));\n    do (one_of(appstore) provides_access(one_of(users)));\n    do (one_of(users) gives_feedback(one_of(startup)));\n  }\n}","56":"model generated_model\n\nspecies sender {\n  action hands_over_package (couriercompany r) {\n    write \"sender hands over package to couriercompany\";\n  }\n}\n\nspecies couriercompany {\n  action sorts_package (sortingfacility r) {\n    write \"couriercompany sorts package to sortingfacility\";\n  }\n}\n\nspecies sortingfacility {\n  action assigns_for_delivery (deliverydriver r) {\n    write \"sortingfacility assigns for delivery to deliverydriver\";\n  }\n}\n\nspecies deliverydriver {\n  action delivers_package (recipient r) {\n    write \"deliverydriver delivers package to recipient\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create sender number: 1;\n    create couriercompany number: 1;\n    create sortingfacility number: 1;\n    create deliverydriver number: 1;\n    create recipient number: 1;\n    do (one_of(sender) hands_over_package(one_of(couriercompany)));\n    do (one_of(couriercompany) sorts_package(one_of(sortingfacility)));\n    do (one_of(sortingfacility) assigns_for_delivery(one_of(deliverydriver)));\n    do (one_of(deliverydriver) delivers_package(one_of(recipient)));\n  }\n}","57":"model generated_model\n\nspecies customer {\n  action requests_new_connection (telecomcompany r) {\n    write \"customer requests new connection to telecomcompany\";\n  }\n}\n\nspecies telecomcompany {\n  action schedules_installation (technician r) {\n    write \"telecomcompany schedules installation to technician\";\n  }\n}\n\nspecies technician {\n  action configures_equipment (router r) {\n    write \"technician configures equipment to router\";\n  }\n}\n\n  action requests_activation (activationteam r) {\n    write \"technician requests activation to activationteam\";\n  }\n}\n\nspecies activationteam {\n  action activates_service (customer r) {\n    write \"activationteam activates service to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create telecomcompany number: 1;\n    create technician number: 1;\n    create router number: 1;\n    create activationteam number: 1;\n    do (one_of(customer) requests_new_connection(one_of(telecomcompany)));\n    do (one_of(telecomcompany) schedules_installation(one_of(technician)));\n    do (one_of(technician) configures_equipment(one_of(router)));\n    do (one_of(technician) requests_activation(one_of(activationteam)));\n    do (one_of(activationteam) activates_service(one_of(customer)));\n  }\n}","58":"model generated_model\n\nspecies ecommerceplatform {\n  action launches_product_line (marketing r) {\n    write \"ecommerceplatform launches product line to marketing\";\n  }\n}\n\nspecies marketing {\n  action promotes_product (customers r) {\n    write \"marketing promotes product to customers\";\n  }\n}\n\nspecies customers {\n  action places_orders (ordermanagement r) {\n    write \"customers places orders to ordermanagement\";\n  }\n}\n\nspecies ordermanagement {\n  action processes_orders (customers r) {\n    write \"ordermanagement processes orders to customers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create ecommerceplatform number: 1;\n    create marketing number: 1;\n    create customers number: 1;\n    create ordermanagement number: 1;\n    do (one_of(ecommerceplatform) launches_product_line(one_of(marketing)));\n    do (one_of(marketing) promotes_product(one_of(customers)));\n    do (one_of(customers) places_orders(one_of(ordermanagement)));\n    do (one_of(ordermanagement) processes_orders(one_of(customers)));\n  }\n}","59":"model generated_model\n\nspecies customer {\n  action submits_loan_application (onlinebank r) {\n    write \"customer submits loan application to onlinebank\";\n  }\n}\n\nspecies onlinebank {\n  action reviews_application (loanprocessing r) {\n    write \"onlinebank reviews application to loanprocessing\";\n  }\n}\n\nspecies loanprocessing {\n  action seeks_approval (approvalteam r) {\n    write \"loanprocessing seeks approval to approvalteam\";\n  }\n}\n\nspecies approvalteam {\n  action approves_loan (disbursement r) {\n    write \"approvalteam approves loan to disbursement\";\n  }\n}\n\nspecies disbursement {\n  action disburses_funds (customer r) {\n    write \"disbursement disburses funds to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create onlinebank number: 1;\n    create loanprocessing number: 1;\n    create approvalteam number: 1;\n    create disbursement number: 1;\n    do (one_of(customer) submits_loan_application(one_of(onlinebank)));\n    do (one_of(onlinebank) reviews_application(one_of(loanprocessing)));\n    do (one_of(loanprocessing) seeks_approval(one_of(approvalteam)));\n    do (one_of(approvalteam) approves_loan(one_of(disbursement)));\n    do (one_of(disbursement) disburses_funds(one_of(customer)));\n  }\n}","60":"model generated_model\n\nspecies government {\n  action launches_campaign (campaignteam r) {\n    write \"government launches campaign to campaignteam\";\n  }\n}\n\nspecies campaignteam {\n  action distributes_materials (public r) {\n    write \"campaignteam distributes materials to public\";\n  }\n}\n\nspecies public {\n  action provides_feedback (impactassessment r) {\n    write \"public provides feedback to impactassessment\";\n  }\n}\n\nspecies impactassessment {\n  action tracks_impact (government r) {\n    write \"impactassessment tracks impact to government\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create government number: 1;\n    create campaignteam number: 1;\n    create public number: 1;\n    create impactassessment number: 1;\n    do (one_of(government) launches_campaign(one_of(campaignteam)));\n    do (one_of(campaignteam) distributes_materials(one_of(public)));\n    do (one_of(public) provides_feedback(one_of(impactassessment)));\n    do (one_of(impactassessment) tracks_impact(one_of(government)));\n  }\n}","61":"model generated_model\n\nspecies flight {\n  action arrives_at_gate (airport r) {\n    write \"flight arrives at gate to airport\";\n  }\n}\n\nspecies airport {\n  action manages_baggage (baggagehandling r) {\n    write \"airport manages baggage to baggagehandling\";\n  }\n}\n\nspecies baggagehandling {\n  action delivers_baggage (passengers r) {\n    write \"baggagehandling delivers baggage to passengers\";\n  }\n}\n\n  action facilitates_transfers (transferservice r) {\n    write \"airport facilitates transfers to transferservice\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create flight number: 1;\n    create airport number: 1;\n    create baggagehandling number: 1;\n    create passengers number: 1;\n    create transferservice number: 1;\n    do (one_of(flight) arrives_at_gate(one_of(airport)));\n    do (one_of(airport) manages_baggage(one_of(baggagehandling)));\n    do (one_of(baggagehandling) delivers_baggage(one_of(passengers)));\n    do (one_of(airport) facilitates_transfers(one_of(transferservice)));\n  }\n}","62":"model generated_model\n\nspecies client {\n  action engages_services (lawfirm r) {\n    write \"client engages services to lawfirm\";\n  }\n}\n\nspecies lawfirm {\n  action conducts_research (researchteam r) {\n    write \"lawfirm conducts research to researchteam\";\n  }\n}\n\nspecies researchteam {\n  action provides_findings (lawfirm r) {\n    write \"researchteam provides findings to lawfirm\";\n  }\n}\n\n  action files_lawsuit (court r) {\n    write \"lawfirm files lawsuit to court\";\n  }\n}\n\nspecies court {\n  action schedules_hearing (lawfirm r) {\n    write \"court schedules hearing to lawfirm\";\n  }\n}\n\n  action represents_in_court (client r) {\n    write \"lawfirm represents in court to client\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create client number: 1;\n    create lawfirm number: 1;\n    create researchteam number: 1;\n    create court number: 1;\n    do (one_of(client) engages_services(one_of(lawfirm)));\n    do (one_of(lawfirm) conducts_research(one_of(researchteam)));\n    do (one_of(researchteam) provides_findings(one_of(lawfirm)));\n    do (one_of(lawfirm) files_lawsuit(one_of(court)));\n    do (one_of(court) schedules_hearing(one_of(lawfirm)));\n    do (one_of(lawfirm) represents_in_court(one_of(client)));\n  }\n}","63":"model generated_model\n\nspecies employer {\n  action requests_candidates (recruitmentagency r) {\n    write \"employer requests candidates to recruitmentagency\";\n  }\n}\n\nspecies recruitmentagency {\n  action sources_candidates (candidates r) {\n    write \"recruitmentagency sources candidates to candidates\";\n  }\n}\n\nspecies candidates {\n  action attends_interviews (interviewer r) {\n    write \"candidates attends interviews to interviewer\";\n  }\n}\n\nspecies interviewer {\n  action selects_candidates (hr r) {\n    write \"interviewer selects candidates to hr\";\n  }\n}\n\nspecies hr {\n  action places_candidates (employer r) {\n    write \"hr places candidates to employer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create employer number: 1;\n    create recruitmentagency number: 1;\n    create candidates number: 1;\n    create interviewer number: 1;\n    create hr number: 1;\n    do (one_of(employer) requests_candidates(one_of(recruitmentagency)));\n    do (one_of(recruitmentagency) sources_candidates(one_of(candidates)));\n    do (one_of(candidates) attends_interviews(one_of(interviewer)));\n    do (one_of(interviewer) selects_candidates(one_of(hr)));\n    do (one_of(hr) places_candidates(one_of(employer)));\n  }\n}","64":"model generated_model\n\nspecies patient {\n  action schedules_surgery (surgeryscheduling r) {\n    write \"patient schedules surgery to surgeryscheduling\";\n  }\n}\n\nspecies surgeryscheduling {\n  action prepares_room (operatingroom r) {\n    write \"surgeryscheduling prepares room to operatingroom\";\n  }\n}\n\nspecies surgeryteam {\n  action performs_surgery (patient r) {\n    write \"surgeryteam performs surgery to patient\";\n  }\n}\n\nspecies operatingroom {\n  action transfers_patient (recoveryroom r) {\n    write \"operatingroom transfers patient to recoveryroom\";\n  }\n}\n\nspecies recoveryroom {\n  action monitors_recovery (patient r) {\n    write \"recoveryroom monitors recovery to patient\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create patient number: 1;\n    create surgeryscheduling number: 1;\n    create operatingroom number: 1;\n    create surgeryteam number: 1;\n    create recoveryroom number: 1;\n    do (one_of(patient) schedules_surgery(one_of(surgeryscheduling)));\n    do (one_of(surgeryscheduling) prepares_room(one_of(operatingroom)));\n    do (one_of(surgeryteam) performs_surgery(one_of(patient)));\n    do (one_of(operatingroom) transfers_patient(one_of(recoveryroom)));\n    do (one_of(recoveryroom) monitors_recovery(one_of(patient)));\n  }\n}","65":"model generated_model\n\nspecies charity {\n  action launches_campaign (fundraisingteam r) {\n    write \"charity launches campaign to fundraisingteam\";\n  }\n}\n\nspecies fundraisingteam {\n  action requests_donations (donors r) {\n    write \"fundraisingteam requests donations to donors\";\n  }\n}\n\nspecies donors {\n  action sends_funds (charity r) {\n    write \"donors sends funds to charity\";\n  }\n}\n\n  action distributes_aid (beneficiaries r) {\n    write \"charity distributes aid to beneficiaries\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create charity number: 1;\n    create donors number: 1;\n    create fundraisingteam number: 1;\n    create beneficiaries number: 1;\n    do (one_of(charity) launches_campaign(one_of(fundraisingteam)));\n    do (one_of(fundraisingteam) requests_donations(one_of(donors)));\n    do (one_of(donors) sends_funds(one_of(charity)));\n    do (one_of(charity) distributes_aid(one_of(beneficiaries)));\n  }\n}","66":"model generated_model\n\nspecies energycompany {\n  action builds_solar_plant (constructionteam r) {\n    write \"energycompany builds solar plant to constructionteam\";\n  }\n}\n\nspecies constructionteam {\n  action connects_to_grid (gridoperator r) {\n    write \"constructionteam connects to grid to gridoperator\";\n  }\n}\n\nspecies gridoperator {\n  action supplies_electricity (consumers r) {\n    write \"gridoperator supplies electricity to consumers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create energycompany number: 1;\n    create constructionteam number: 1;\n    create gridoperator number: 1;\n    create consumers number: 1;\n    do (one_of(energycompany) builds_solar_plant(one_of(constructionteam)));\n    do (one_of(constructionteam) connects_to_grid(one_of(gridoperator)));\n    do (one_of(gridoperator) supplies_electricity(one_of(consumers)));\n  }\n}","67":"model generated_model\n\nspecies teammanager {\n  action identifies_players (recruiter r) {\n    write \"teammanager identifies players to recruiter\";\n  }\n}\n\nspecies recruiter {\n  action recruits_players (players r) {\n    write \"recruiter recruits players to players\";\n  }\n}\n\n  action plans_training (coaches r) {\n    write \"teammanager plans training to coaches\";\n  }\n}\n\nspecies coaches {\n  action conducts_training (players r) {\n    write \"coaches conducts training to players\";\n  }\n}\n\n  action registers_team (tournamentorganizers r) {\n    write \"teammanager registers team to tournamentorganizers\";\n  }\n}\n\nspecies players {\n  action participates_in_matches (tournamentorganizers r) {\n    write \"players participates in matches to tournamentorganizers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create teammanager number: 1;\n    create recruiter number: 1;\n    create players number: 1;\n    create coaches number: 1;\n    create tournamentorganizers number: 1;\n    do (one_of(teammanager) identifies_players(one_of(recruiter)));\n    do (one_of(recruiter) recruits_players(one_of(players)));\n    do (one_of(teammanager) plans_training(one_of(coaches)));\n    do (one_of(coaches) conducts_training(one_of(players)));\n    do (one_of(teammanager) registers_team(one_of(tournamentorganizers)));\n    do (one_of(players) participates_in_matches(one_of(tournamentorganizers)));\n  }\n}","68":"model generated_model\n\nspecies patient {\n  action admits_to_hospital (admissiondesk r) {\n    write \"patient admits to hospital to admissiondesk\";\n  }\n}\n\nspecies admissiondesk {\n  action provides_treatment_plan (treatmentteam r) {\n    write \"admissiondesk provides treatment plan to treatmentteam\";\n  }\n}\n\nspecies treatmentteam {\n  action sends_treatment_costs (billing r) {\n    write \"treatmentteam sends treatment costs to billing\";\n  }\n}\n\nspecies billing {\n  action processes_payment (patient r) {\n    write \"billing processes payment to patient\";\n  }\n}\n\nspecies dischargedesk {\n  action discharges_from_hospital (patient r) {\n    write \"dischargedesk discharges from hospital to patient\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create patient number: 1;\n    create admissiondesk number: 1;\n    create treatmentteam number: 1;\n    create billing number: 1;\n    create dischargedesk number: 1;\n    do (one_of(patient) admits_to_hospital(one_of(admissiondesk)));\n    do (one_of(admissiondesk) provides_treatment_plan(one_of(treatmentteam)));\n    do (one_of(treatmentteam) sends_treatment_costs(one_of(billing)));\n    do (one_of(billing) processes_payment(one_of(patient)));\n    do (one_of(dischargedesk) discharges_from_hospital(one_of(patient)));\n  }\n}","69":"model generated_model\n\nspecies musiclabel {\n  action signs_contract (artist r) {\n    write \"musiclabel signs contract to artist\";\n  }\n}\n\nspecies artist {\n  action records_album (recordingstudio r) {\n    write \"artist records album to recordingstudio\";\n  }\n}\n\nspecies recordingstudio {\n  action delivers_album (musiclabel r) {\n    write \"recordingstudio delivers album to musiclabel\";\n  }\n}\n\n  action releases_album (streamingplatforms r) {\n    write \"musiclabel releases album to streamingplatforms\";\n  }\n}\n\nspecies listeners {\n  action streams_music (streamingplatforms r) {\n    write \"listeners streams music to streamingplatforms\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create artist number: 1;\n    create musiclabel number: 1;\n    create recordingstudio number: 1;\n    create streamingplatforms number: 1;\n    create listeners number: 1;\n    do (one_of(musiclabel) signs_contract(one_of(artist)));\n    do (one_of(artist) records_album(one_of(recordingstudio)));\n    do (one_of(recordingstudio) delivers_album(one_of(musiclabel)));\n    do (one_of(musiclabel) releases_album(one_of(streamingplatforms)));\n    do (one_of(listeners) streams_music(one_of(streamingplatforms)));\n  }\n}","70":"model generated_model\n\nspecies client {\n  action seeks_investment_advice (financialadvisor r) {\n    write \"client seeks investment advice to financialadvisor\";\n  }\n}\n\nspecies financialadvisor {\n  action allocates_investments (portfoliomanager r) {\n    write \"financialadvisor allocates investments to portfoliomanager\";\n  }\n}\n\nspecies portfoliomanager {\n  action tracks_performance (reportingteam r) {\n    write \"portfoliomanager tracks performance to reportingteam\";\n  }\n}\n\nspecies reportingteam {\n  action provides_reports (client r) {\n    write \"reportingteam provides reports to client\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create client number: 1;\n    create financialadvisor number: 1;\n    create portfoliomanager number: 1;\n    create reportingteam number: 1;\n    do (one_of(client) seeks_investment_advice(one_of(financialadvisor)));\n    do (one_of(financialadvisor) allocates_investments(one_of(portfoliomanager)));\n    do (one_of(portfoliomanager) tracks_performance(one_of(reportingteam)));\n    do (one_of(reportingteam) provides_reports(one_of(client)));\n  }\n}","71":"model generated_model\n\nspecies supermarket {\n  action restocks_shelves (stockroom r) {\n    write \"supermarket restocks shelves to stockroom\";\n  }\n}\n\nspecies customer {\n  action selects_products (supermarket r) {\n    write \"customer selects products to supermarket\";\n  }\n}\n\n  action proceeds_to_checkout (cashier r) {\n    write \"customer proceeds to checkout to cashier\";\n  }\n}\n\nspecies cashier {\n  action processes_payment (paymentgateway r) {\n    write \"cashier processes payment to paymentgateway\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create supermarket number: 1;\n    create stockroom number: 1;\n    create cashier number: 1;\n    create paymentgateway number: 1;\n    do (one_of(supermarket) restocks_shelves(one_of(stockroom)));\n    do (one_of(customer) selects_products(one_of(supermarket)));\n    do (one_of(customer) proceeds_to_checkout(one_of(cashier)));\n    do (one_of(cashier) processes_payment(one_of(paymentgateway)));\n  }\n}","72":"model generated_model\n\nspecies gamestudio {\n  action develops_game (testingteam r) {\n    write \"gamestudio develops game to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action reports_bugs (gamestudio r) {\n    write \"testingteam reports bugs to gamestudio\";\n  }\n}\n\n  action launches_game (marketing r) {\n    write \"gamestudio launches game to marketing\";\n  }\n}\n\nspecies marketing {\n  action promotes_game (players r) {\n    write \"marketing promotes game to players\";\n  }\n}\n\nspecies players {\n  action requests_support (supportteam r) {\n    write \"players requests support to supportteam\";\n  }\n}\n\nspecies supportteam {\n  action suggests_updates (gamestudio r) {\n    write \"supportteam suggests updates to gamestudio\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create gamestudio number: 1;\n    create testingteam number: 1;\n    create marketing number: 1;\n    create players number: 1;\n    create supportteam number: 1;\n    do (one_of(gamestudio) develops_game(one_of(testingteam)));\n    do (one_of(testingteam) reports_bugs(one_of(gamestudio)));\n    do (one_of(gamestudio) launches_game(one_of(marketing)));\n    do (one_of(marketing) promotes_game(one_of(players)));\n    do (one_of(players) requests_support(one_of(supportteam)));\n    do (one_of(supportteam) suggests_updates(one_of(gamestudio)));\n  }\n}","73":"model generated_model\n\nspecies passenger {\n  action requests_ride (ridesharingapp r) {\n    write \"passenger requests ride to ridesharingapp\";\n  }\n}\n\nspecies ridesharingapp {\n  action assigns_ride (driver r) {\n    write \"ridesharingapp assigns ride to driver\";\n  }\n}\n\nspecies driver {\n  action picks_up_passenger (passenger r) {\n    write \"driver picks up passenger to passenger\";\n  }\n}\n\n  action tracks_ride (passenger r) {\n    write \"ridesharingapp tracks ride to passenger\";\n  }\n}\n\n  action pays_for_ride (paymentsystem r) {\n    write \"passenger pays for ride to paymentsystem\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create passenger number: 1;\n    create ridesharingapp number: 1;\n    create driver number: 1;\n    create paymentsystem number: 1;\n    do (one_of(passenger) requests_ride(one_of(ridesharingapp)));\n    do (one_of(ridesharingapp) assigns_ride(one_of(driver)));\n    do (one_of(driver) picks_up_passenger(one_of(passenger)));\n    do (one_of(ridesharingapp) tracks_ride(one_of(passenger)));\n    do (one_of(passenger) pays_for_ride(one_of(paymentsystem)));\n  }\n}","74":"model generated_model\n\nspecies client {\n  action engages_security_services (cybersecurity r) {\n    write \"client engages security services to cybersecurity\";\n  }\n}\n\nspecies threatdetection {\n  action detects_threat (cybersecurity r) {\n    write \"threatdetection detects threat to cybersecurity\";\n  }\n}\n\nspecies cybersecurity {\n  action analyzes_and_deploys_countermeasures (responseteam r) {\n    write \"cybersecurity analyzes and deploys countermeasures to responseteam\";\n  }\n}\n\nspecies responseteam {\n  action protects_data (clientdata r) {\n    write \"responseteam protects data to clientdata\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create client number: 1;\n    create cybersecurity number: 1;\n    create threatdetection number: 1;\n    create responseteam number: 1;\n    create clientdata number: 1;\n    do (one_of(client) engages_security_services(one_of(cybersecurity)));\n    do (one_of(threatdetection) detects_threat(one_of(cybersecurity)));\n    do (one_of(cybersecurity) analyzes_and_deploys_countermeasures(one_of(responseteam)));\n    do (one_of(responseteam) protects_data(one_of(clientdata)));\n  }\n}","75":"model generated_model\n\nspecies telecomcompany {\n  action initiates_5g_rollout (networkteam r) {\n    write \"telecomcompany initiates 5g rollout to networkteam\";\n  }\n}\n\nspecies networkteam {\n  action upgrades_network (infrastructure r) {\n    write \"networkteam upgrades network to infrastructure\";\n  }\n}\n\nspecies infrastructure {\n  action confirms_upgrade (telecomcompany r) {\n    write \"infrastructure confirms upgrade to telecomcompany\";\n  }\n}\n\n  action provides_5g_services (customers r) {\n    write \"telecomcompany provides 5g services to customers\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create telecomcompany number: 1;\n    create networkteam number: 1;\n    create infrastructure number: 1;\n    create customers number: 1;\n    do (one_of(telecomcompany) initiates_5g_rollout(one_of(networkteam)));\n    do (one_of(networkteam) upgrades_network(one_of(infrastructure)));\n    do (one_of(infrastructure) confirms_upgrade(one_of(telecomcompany)));\n    do (one_of(telecomcompany) provides_5g_services(one_of(customers)));\n  }\n}","76":"model generated_model\n\nspecies roboticscompany {\n  action designs_new_robot (designteam r) {\n    write \"roboticscompany designs new robot to designteam\";\n  }\n}\n\nspecies designteam {\n  action builds_prototype (prototyping r) {\n    write \"designteam builds prototype to prototyping\";\n  }\n}\n\nspecies prototyping {\n  action conducts_testing (testingteam r) {\n    write \"prototyping conducts testing to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action approves_for_mass_production (production r) {\n    write \"testingteam approves for mass production to production\";\n  }\n}\n\nspecies production {\n  action begins_production (roboticscompany r) {\n    write \"production begins production to roboticscompany\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create roboticscompany number: 1;\n    create designteam number: 1;\n    create prototyping number: 1;\n    create testingteam number: 1;\n    create production number: 1;\n    do (one_of(roboticscompany) designs_new_robot(one_of(designteam)));\n    do (one_of(designteam) builds_prototype(one_of(prototyping)));\n    do (one_of(prototyping) conducts_testing(one_of(testingteam)));\n    do (one_of(testingteam) approves_for_mass_production(one_of(production)));\n    do (one_of(production) begins_production(one_of(roboticscompany)));\n  }\n}","77":"model generated_model\n\nspecies cosmeticsbrand {\n  action develops_new_product (r&d r) {\n    write \"cosmeticsbrand develops new product to r&d\";\n  }\n}\n\nspecies r&d {\n  action tests_for_safety (testingteam r) {\n    write \"r&d tests for safety to testingteam\";\n  }\n}\n\nspecies testingteam {\n  action approves_product (cosmeticsbrand r) {\n    write \"testingteam approves product to cosmeticsbrand\";\n  }\n}\n\n  action plans_global_campaign (marketing r) {\n    write \"cosmeticsbrand plans global campaign to marketing\";\n  }\n}\n\nspecies marketing {\n  action distributes_product (globaldistributors r) {\n    write \"marketing distributes product to globaldistributors\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create cosmeticsbrand number: 1;\n    create r&d number: 1;\n    create testingteam number: 1;\n    create marketing number: 1;\n    create globaldistributors number: 1;\n    do (one_of(cosmeticsbrand) develops_new_product(one_of(r&d)));\n    do (one_of(r&d) tests_for_safety(one_of(testingteam)));\n    do (one_of(testingteam) approves_product(one_of(cosmeticsbrand)));\n    do (one_of(cosmeticsbrand) plans_global_campaign(one_of(marketing)));\n    do (one_of(marketing) distributes_product(one_of(globaldistributors)));\n  }\n}","78":"model generated_model\n\nspecies customer {\n  action schedules_maintenance (servicecenter r) {\n    write \"customer schedules maintenance to servicecenter\";\n  }\n}\n\nspecies servicecenter {\n  action assigns_service (maintenanceteam r) {\n    write \"servicecenter assigns service to maintenanceteam\";\n  }\n}\n\nspecies maintenanceteam {\n  action completes_service (billing r) {\n    write \"maintenanceteam completes service to billing\";\n  }\n}\n\nspecies billing {\n  action processes_payment (customer r) {\n    write \"billing processes payment to customer\";\n  }\n}\n\n  action returns_vehicle (customer r) {\n    write \"maintenanceteam returns vehicle to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create servicecenter number: 1;\n    create maintenanceteam number: 1;\n    create billing number: 1;\n    do (one_of(customer) schedules_maintenance(one_of(servicecenter)));\n    do (one_of(servicecenter) assigns_service(one_of(maintenanceteam)));\n    do (one_of(maintenanceteam) completes_service(one_of(billing)));\n    do (one_of(billing) processes_payment(one_of(customer)));\n    do (one_of(maintenanceteam) returns_vehicle(one_of(customer)));\n  }\n}","79":"model generated_model\n\nspecies citycouncil {\n  action proposes_new_zoning_law (public r) {\n    write \"citycouncil proposes new zoning law to public\";\n  }\n}\n\nspecies public {\n  action participates_in_hearings (citycouncil r) {\n    write \"public participates in hearings to citycouncil\";\n  }\n}\n\n  action drafts_final_law (legalteam r) {\n    write \"citycouncil drafts final law to legalteam\";\n  }\n}\n\nspecies legalteam {\n  action implements_law (enforcement r) {\n    write \"legalteam implements law to enforcement\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create citycouncil number: 1;\n    create public number: 1;\n    create legalteam number: 1;\n    create enforcement number: 1;\n    do (one_of(citycouncil) proposes_new_zoning_law(one_of(public)));\n    do (one_of(public) participates_in_hearings(one_of(citycouncil)));\n    do (one_of(citycouncil) drafts_final_law(one_of(legalteam)));\n    do (one_of(legalteam) implements_law(one_of(enforcement)));\n  }\n}","80":"model generated_model\n\nspecies applicant {\n  action submits_application (university r) {\n    write \"applicant submits application to university\";\n  }\n}\n\nspecies university {\n  action sends_for_review (reviewboard r) {\n    write \"university sends for review to reviewboard\";\n  }\n}\n\nspecies reviewboard {\n  action recommends_admissions (admissionscommittee r) {\n    write \"reviewboard recommends admissions to admissionscommittee\";\n  }\n}\n\nspecies admissionscommittee {\n  action admits_students (university r) {\n    write \"admissionscommittee admits students to university\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create applicant number: 1;\n    create admissionscommittee number: 1;\n    create reviewboard number: 1;\n    create university number: 1;\n    do (one_of(applicant) submits_application(one_of(university)));\n    do (one_of(university) sends_for_review(one_of(reviewboard)));\n    do (one_of(reviewboard) recommends_admissions(one_of(admissionscommittee)));\n    do (one_of(admissionscommittee) admits_students(one_of(university)));\n  }\n}","81":"model generated_model\n\nspecies sender {\n  action sends_mail (postalservice r) {\n    write \"sender sends mail to postalservice\";\n  }\n}\n\nspecies postalservice {\n  action sorts_mail (sortingfacility r) {\n    write \"postalservice sorts mail to sortingfacility\";\n  }\n}\n\nspecies sortingfacility {\n  action assigns_for_delivery (mailcarrier r) {\n    write \"sortingfacility assigns for delivery to mailcarrier\";\n  }\n}\n\nspecies mailcarrier {\n  action delivers_mail (recipient r) {\n    write \"mailcarrier delivers mail to recipient\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create sender number: 1;\n    create postalservice number: 1;\n    create sortingfacility number: 1;\n    create mailcarrier number: 1;\n    create recipient number: 1;\n    do (one_of(sender) sends_mail(one_of(postalservice)));\n    do (one_of(postalservice) sorts_mail(one_of(sortingfacility)));\n    do (one_of(sortingfacility) assigns_for_delivery(one_of(mailcarrier)));\n    do (one_of(mailcarrier) delivers_mail(one_of(recipient)));\n  }\n}","82":"model generated_model\n\nspecies customer {\n  action requests_customization (salesconsultant r) {\n    write \"customer requests customization to salesconsultant\";\n  }\n}\n\nspecies salesconsultant {\n  action finalizes_design (designteam r) {\n    write \"salesconsultant finalizes design to designteam\";\n  }\n}\n\nspecies designteam {\n  action sends_to_production (assemblyline r) {\n    write \"designteam sends to production to assemblyline\";\n  }\n}\n\nspecies assemblyline {\n  action prepares_for_delivery (deliveryservice r) {\n    write \"assemblyline prepares for delivery to deliveryservice\";\n  }\n}\n\nspecies deliveryservice {\n  action delivers_custom_car (customer r) {\n    write \"deliveryservice delivers custom car to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create customer number: 1;\n    create salesconsultant number: 1;\n    create designteam number: 1;\n    create assemblyline number: 1;\n    create deliveryservice number: 1;\n    do (one_of(customer) requests_customization(one_of(salesconsultant)));\n    do (one_of(salesconsultant) finalizes_design(one_of(designteam)));\n    do (one_of(designteam) sends_to_production(one_of(assemblyline)));\n    do (one_of(assemblyline) prepares_for_delivery(one_of(deliveryservice)));\n    do (one_of(deliveryservice) delivers_custom_car(one_of(customer)));\n  }\n}","83":"model generated_model\n\nspecies techfirm {\n  action develops_ai_model (airesearchteam r) {\n    write \"techfirm develops ai model to airesearchteam\";\n  }\n}\n\nspecies airesearchteam {\n  action provides_data (dataengineers r) {\n    write \"airesearchteam provides data to dataengineers\";\n  }\n}\n\nspecies dataengineers {\n  action trains_model (airesearchteam r) {\n    write \"dataengineers trains model to airesearchteam\";\n  }\n}\n\n  action deploys_model (businessunit r) {\n    write \"airesearchteam deploys model to businessunit\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create techfirm number: 1;\n    create airesearchteam number: 1;\n    create dataengineers number: 1;\n    create businessunit number: 1;\n    do (one_of(techfirm) develops_ai_model(one_of(airesearchteam)));\n    do (one_of(airesearchteam) provides_data(one_of(dataengineers)));\n    do (one_of(dataengineers) trains_model(one_of(airesearchteam)));\n    do (one_of(airesearchteam) deploys_model(one_of(businessunit)));\n  }\n}","84":"model generated_model\n\nspecies logisticscompany {\n  action optimizes_routes (routeplanner r) {\n    write \"logisticscompany optimizes routes to routeplanner\";\n  }\n}\n\nspecies routeplanner {\n  action loads_cargo (loadingdock r) {\n    write \"routeplanner loads cargo to loadingdock\";\n  }\n}\n\nspecies loadingdock {\n  action assigns_delivery (deliverydriver r) {\n    write \"loadingdock assigns delivery to deliverydriver\";\n  }\n}\n\nspecies deliverydriver {\n  action delivers_shipment (customer r) {\n    write \"deliverydriver delivers shipment to customer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create logisticscompany number: 1;\n    create routeplanner number: 1;\n    create loadingdock number: 1;\n    create deliverydriver number: 1;\n    create customer number: 1;\n    do (one_of(logisticscompany) optimizes_routes(one_of(routeplanner)));\n    do (one_of(routeplanner) loads_cargo(one_of(loadingdock)));\n    do (one_of(loadingdock) assigns_delivery(one_of(deliverydriver)));\n    do (one_of(deliverydriver) delivers_shipment(one_of(customer)));\n  }\n}","85":"model generated_model\n\nspecies nonprofit {\n  action organizes_auction (auctioneer r) {\n    write \"nonprofit organizes auction to auctioneer\";\n  }\n}\n\nspecies bidders {\n  action places_bids (auctioneer r) {\n    write \"bidders places bids to auctioneer\";\n  }\n}\n\nspecies auctioneer {\n  action awards_items (winners r) {\n    write \"auctioneer awards items to winners\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create nonprofit number: 1;\n    create auctioneer number: 1;\n    create bidders number: 1;\n    create winners number: 1;\n    do (one_of(nonprofit) organizes_auction(one_of(auctioneer)));\n    do (one_of(bidders) places_bids(one_of(auctioneer)));\n    do (one_of(auctioneer) awards_items(one_of(winners)));\n  }\n}","86":"model generated_model\n\nspecies developer {\n  action acquires_land (landowner r) {\n    write \"developer acquires land to landowner\";\n  }\n}\n\n  action designs_housing_project (architect r) {\n    write \"developer designs housing project to architect\";\n  }\n}\n\nspecies architect {\n  action provides_plans (constructionteam r) {\n    write \"architect provides plans to constructionteam\";\n  }\n}\n\nspecies constructionteam {\n  action builds_homes (developer r) {\n    write \"constructionteam builds homes to developer\";\n  }\n}\n\nspecies buyers {\n  action purchases_homes (developer r) {\n    write \"buyers purchases homes to developer\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create developer number: 1;\n    create landowner number: 1;\n    create architect number: 1;\n    create constructionteam number: 1;\n    create buyers number: 1;\n    do (one_of(developer) acquires_land(one_of(landowner)));\n    do (one_of(developer) designs_housing_project(one_of(architect)));\n    do (one_of(architect) provides_plans(one_of(constructionteam)));\n    do (one_of(constructionteam) builds_homes(one_of(developer)));\n    do (one_of(buyers) purchases_homes(one_of(developer)));\n  }\n}","87":"model generated_model\n\nspecies government {\n  action organizes_census (censusbureau r) {\n    write \"government organizes census to censusbureau\";\n  }\n}\n\nspecies censusbureau {\n  action collects_data (fieldagents r) {\n    write \"censusbureau collects data to fieldagents\";\n  }\n}\n\nspecies fieldagents {\n  action submits_data (dataanalysts r) {\n    write \"fieldagents submits data to dataanalysts\";\n  }\n}\n\nspecies dataanalysts {\n  action analyzes_results (government r) {\n    write \"dataanalysts analyzes results to government\";\n  }\n}\n\n  action publishes_statistics (public r) {\n    write \"government publishes statistics to public\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create government number: 1;\n    create censusbureau number: 1;\n    create fieldagents number: 1;\n    create dataanalysts number: 1;\n    create public number: 1;\n    do (one_of(government) organizes_census(one_of(censusbureau)));\n    do (one_of(censusbureau) collects_data(one_of(fieldagents)));\n    do (one_of(fieldagents) submits_data(one_of(dataanalysts)));\n    do (one_of(dataanalysts) analyzes_results(one_of(government)));\n    do (one_of(government) publishes_statistics(one_of(public)));\n  }\n}","88":"model generated_model\n\nspecies client {\n  action requests_servers (cloudprovider r) {\n    write \"client requests servers to cloudprovider\";\n  }\n}\n\nspecies cloudprovider {\n  action provisions_servers (serverprovisioning r) {\n    write \"cloudprovider provisions servers to serverprovisioning\";\n  }\n}\n\nspecies serverprovisioning {\n  action deploys_applications (deploymentteam r) {\n    write \"serverprovisioning deploys applications to deploymentteam\";\n  }\n}\n\nspecies monitoring {\n  action monitors_performance (client r) {\n    write \"monitoring monitors performance to client\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create client number: 1;\n    create cloudprovider number: 1;\n    create serverprovisioning number: 1;\n    create deploymentteam number: 1;\n    create monitoring number: 1;\n    do (one_of(client) requests_servers(one_of(cloudprovider)));\n    do (one_of(cloudprovider) provisions_servers(one_of(serverprovisioning)));\n    do (one_of(serverprovisioning) deploys_applications(one_of(deploymentteam)));\n    do (one_of(monitoring) monitors_performance(one_of(client)));\n  }\n}","89":"model generated_model\n\nspecies passenger {\n  action books_flight (bookingsystem r) {\n    write \"passenger books flight to bookingsystem\";\n  }\n}\n\nspecies bookingsystem {\n  action confirms_booking (checkin r) {\n    write \"bookingsystem confirms booking to checkin\";\n  }\n}\n\n  action checks_in (checkin r) {\n    write \"passenger checks in to checkin\";\n  }\n}\n\nspecies checkin {\n  action sends_baggage (baggagehandling r) {\n    write \"checkin sends baggage to baggagehandling\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create passenger number: 1;\n    create bookingsystem number: 1;\n    create checkin number: 1;\n    create baggagehandling number: 1;\n    do (one_of(passenger) books_flight(one_of(bookingsystem)));\n    do (one_of(bookingsystem) confirms_booking(one_of(checkin)));\n    do (one_of(passenger) checks_in(one_of(checkin)));\n    do (one_of(checkin) sends_baggage(one_of(baggagehandling)));\n  }\n}","90":"model generated_model\n\nspecies monitoringstation {\n  action sends_air_quality_data (governmentagency r) {\n    write \"monitoringstation sends air quality data to governmentagency\";\n  }\n}\n\nspecies governmentagency {\n  action analyzes_data (dataanalyst r) {\n    write \"governmentagency analyzes data to dataanalyst\";\n  }\n}\n\nspecies dataanalyst {\n  action reports_findings (governmentagency r) {\n    write \"dataanalyst reports findings to governmentagency\";\n  }\n}\n\n  action enforces_regulations (environmentalregulations r) {\n    write \"governmentagency enforces regulations to environmentalregulations\";\n  }\n}\n\nexperiment 'Generated_Experiment' type: gui {\n  init {\n    create governmentagency number: 1;\n    create monitoringstation number: 1;\n    create dataanalyst number: 1;\n    create environmentalregulations number: 1;\n    do (one_of(monitoringstation) sends_air_quality_data(one_of(governmentagency)));\n    do (one_of(governmentagency) analyzes_data(one_of(dataanalyst)));\n    do (one_of(dataanalyst) reports_findings(one_of(governmentagency)));\n    do (one_of(governmentagency) enforces_regulations(one_of(environmentalregulations)));\n  }\n}"}}