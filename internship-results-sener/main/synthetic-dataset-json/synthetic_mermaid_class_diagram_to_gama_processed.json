{"instruction":{"0":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            User <|-- Driver : inherits\n            User <|-- Rider : inherits\n            Ride -- Rider : requests\n            Ride -- Driver : fulfills\n            Payment -- Rider : makes\n            Payment -- Driver : receives\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Driver {\n              +string licenseNumber\n              +string vehicleDetails\n              +void acceptRide(Ride)\n            }\n\n            class Rider {\n              +string paymentMethod\n              +void requestRide(location, destination)\n            }\n\n            class Ride {\n              +string pickupLocation\n              +string dropLocation\n              +float fare\n            }\n\n            class Payment {\n              +float amount\n              +string method\n            }","1":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            User <|-- Instructor : inherits\n            User <|-- Student : inherits\n            Course -- Instructor : created_by\n            Course -- Student : enrolled_in\n            Quiz -- Course : part_of\n            Assignment -- Course : part_of\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Instructor {\n              +string specialization\n              +void createCourse(Course)\n            }\n\n            class Student {\n              +string major\n              +void enrollCourse(Course)\n            }\n\n            class Course {\n              +string title\n              +string description\n            }\n\n            class Quiz {\n              +string questions\n              +void evaluateAnswers()\n            }\n\n            class Assignment {\n              +string title\n              +string instructions\n              +void submit()\n            }","2":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Person <|-- Patient : inherits\n            Person <|-- Doctor : inherits\n            Appointment -- Patient : booked_by\n            Appointment -- Doctor : attended_by\n            Prescription -- Doctor : issued_by\n            Prescription -- Patient : prescribed_to\n\n            class Person {\n              +string name\n              +string contactInfo\n            }\n\n            class Patient {\n              +string medicalHistory\n              +void bookAppointment(Doctor)\n            }\n\n            class Doctor {\n              +string specialization\n              +void diagnose(Patient)\n            }\n\n            class Appointment {\n              +string date\n              +string time\n              +string reason\n            }\n\n            class Prescription {\n              +string medication\n              +int dosage\n            }","3":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            AccountHolder <|-- Customer : inherits\n            Account -- Customer : belongs_to\n            Transaction -- Account : linked_to\n            Loan -- Customer : granted_to\n\n            class AccountHolder {\n              +string name\n              +string address\n            }\n\n            class Customer {\n              +string accountNumber\n              +void deposit(float)\n              +void withdraw(float)\n            }\n\n            class Account {\n              +float balance\n              +string type\n            }\n\n            class Transaction {\n              +float amount\n              +string date\n              +string type\n            }\n\n            class Loan {\n              +float amount\n              +float interestRate\n              +void applyForLoan()\n            }","4":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Disease <|-- Virus : inherits\n            Disease <|-- Bacteria : inherits\n            Outbreak -- Disease : related_to\n            Patient -- Outbreak : involved_in\n            Report -- Outbreak : describes\n\n            class Disease {\n              +string name\n              +string symptoms\n            }\n\n            class Virus {\n              +string rnaSequence\n              +void mutate()\n            }\n\n            class Bacteria {\n              +string dnaSequence\n              +void mutate()\n            }\n\n            class Outbreak {\n              +string location\n              +int numberOfCases\n              +void trackSpread()\n            }\n\n            class Patient {\n              +string name\n              +int age\n              +string status\n            }\n\n            class Report {\n              +string date\n              +string findings\n            }","5":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Respondent -- Survey : participates_in\n            Survey -- Question : contains\n            Response -- Respondent : given_by\n\n            class Respondent {\n              +string name\n              +int age\n              +string gender\n            }\n\n            class Survey {\n              +string title\n              +string description\n              +void distribute()\n            }\n\n            class Question {\n              +string text\n              +string type\n            }\n\n            class Response {\n              +string answer\n              +date dateGiven\n            }","6":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Employee <|-- Manager : inherits\n            Employee <|-- Staff : inherits\n            Department -- Employee : part_of\n            Task -- Employee : assigned_to\n            PerformanceReview -- Employee : for\n\n            class Employee {\n              +string name\n              +string id\n              +string position\n            }\n\n            class Manager {\n              +string department\n              +void assignTask(Task)\n            }\n\n            class Staff {\n              +string role\n              +void completeTask(Task)\n            }\n\n            class Department {\n              +string name\n              +string location\n            }\n\n            class Task {\n              +string title\n              +string description\n              +date dueDate\n            }\n\n            class PerformanceReview {\n              +string reviewer\n              +string comments\n            }","7":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Emergency -- ResponseTeam : managed_by\n            ResponseTeam -- Member : consists_of\n            Resource -- ResponseTeam : allocated_to\n            IncidentReport -- Emergency : triggers\n\n            class Emergency {\n              +string type\n              +string location\n              +date dateReported\n            }\n\n            class ResponseTeam {\n              +string name\n              +string specialization\n            }\n\n            class Member {\n              +string name\n              +string role\n            }\n\n            class Resource {\n              +string name\n              +int quantity\n              +void allocate()\n            }\n\n            class IncidentReport {\n              +string description\n              +string status\n            }","8":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            User <|-- Traveler : inherits\n            User <|-- Agent : inherits\n            Booking -- Traveler : made_by\n            Booking -- Agent : managed_by\n            Destination -- Booking : linked_to\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Traveler {\n              +string preferences\n              +void bookTrip(Destination)\n            }\n\n            class Agent {\n              +string agency\n              +void manageBooking(Booking)\n            }\n\n            class Booking {\n              +date startDate\n              +date endDate\n              +float price\n            }\n\n            class Destination {\n              +string name\n              +string description\n            }","9":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Campaign -- Manager : organized_by\n            Campaign -- Ad : contains\n            Audience -- Campaign : targeted_by\n            Platform -- Ad : displayed_on\n\n            class Campaign {\n              +string title\n              +float budget\n              +void launch()\n            }\n\n            class Manager {\n              +string name\n              +string department\n              +void planCampaign()\n            }\n\n            class Ad {\n              +string content\n              +date startDate\n              +date endDate\n            }\n\n            class Audience {\n              +string demographics\n              +string interests\n            }\n\n            class Platform {\n              +string name\n              +string type\n            }","10":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Product -- Inventory : stored_in\n            Supplier -- Product : provides\n            Order -- Product : contains\n            Shipment -- Order : fulfills\n\n            class Product {\n              +string name\n              +float price\n              +int quantity\n            }\n\n            class Inventory {\n              +string location\n              +int capacity\n              +void checkStock()\n            }\n\n            class Supplier {\n              +string name\n              +string contactInfo\n            }\n\n            class Order {\n              +date orderDate\n              +float totalAmount\n            }\n\n            class Shipment {\n              +date shipmentDate\n              +string carrier\n            }","11":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Patient -- Consultation : requests\n            Doctor -- Consultation : provides\n            Prescription -- Consultation : issued_for\n            MedicalRecord -- Patient : contains\n\n            class Patient {\n              +string name\n              +string contactInfo\n              +void requestConsultation(Doctor)\n            }\n\n            class Doctor {\n              +string name\n              +string specialization\n              +void provideConsultation(Patient)\n            }\n\n            class Consultation {\n              +date date\n              +string notes\n            }\n\n            class Prescription {\n              +string medication\n              +int dosage\n            }\n\n            class MedicalRecord {\n              +string history\n              +string allergies\n            }","12":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Property -- Owner : belongs_to\n            Tenant -- Property : rents\n            Lease -- Tenant : signed_by\n            MaintenanceRequest -- Property : related_to\n\n            class Property {\n              +string address\n              +float value\n            }\n\n            class Owner {\n              +string name\n              +string contactInfo\n            }\n\n            class Tenant {\n              +string name\n              +string rentalHistory\n            }\n\n            class Lease {\n              +date startDate\n              +date endDate\n              +float rentAmount\n            }\n\n            class MaintenanceRequest {\n              +string issue\n              +date requestDate\n            }","13":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Supplier -- RawMaterial : supplies\n            Manufacturer -- Product : produces\n            Distributor -- Product : distributes\n            Retailer -- Product : sells\n\n            class Supplier {\n              +string name\n              +string location\n            }\n\n            class RawMaterial {\n              +string type\n              +float quantity\n            }\n\n            class Manufacturer {\n              +string name\n              +string location\n            }\n\n            class Product {\n              +string name\n              +float price\n            }\n\n            class Distributor {\n              +string name\n              +string region\n            }\n\n            class Retailer {\n              +string name\n              +string location\n            }","14":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Project -- Manager : managed_by\n            Task -- Project : part_of\n            Resource -- Task : used_in\n            Contractor -- Project : hired_by\n\n            class Project {\n              +string name\n              +float budget\n              +date deadline\n            }\n\n            class Manager {\n              +string name\n              +string experience\n            }\n\n            class Task {\n              +string description\n              +date startDate\n              +date endDate\n            }\n\n            class Resource {\n              +string type\n              +int quantity\n            }\n\n            class Contractor {\n              +string name\n              +string specialty\n            }","15":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Customer -- Order : places\n            Product -- Order : included_in\n            Payment -- Order : linked_to\n            Delivery -- Order : associated_with\n\n            class Customer {\n              +string name\n              +string email\n            }\n\n            class Order {\n              +date orderDate\n              +float totalPrice\n            }\n\n            class Product {\n              +string name\n              +float price\n              +int stock\n            }\n\n            class Payment {\n              +string method\n              +float amount\n            }\n\n            class Delivery {\n              +string address\n              +date deliveryDate\n            }","16":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            PowerPlant -- Grid : connected_to\n            Substation -- Grid : part_of\n            Consumer -- Grid : served_by\n            OutageReport -- Grid : related_to\n\n            class PowerPlant {\n              +string name\n              +float capacity\n            }\n\n            class Grid {\n              +string region\n              +int numberOfConsumers\n            }\n\n            class Substation {\n              +string name\n              +string location\n            }\n\n            class Consumer {\n              +string name\n              +string address\n            }\n\n            class OutageReport {\n              +string description\n              +date reportedDate\n            }","17":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Policy -- Customer : held_by\n            Claim -- Policy : associated_with\n            Agent -- Customer : assigned_to\n            Payment -- Policy : linked_to\n\n            class Policy {\n              +string policyNumber\n              +float coverageAmount\n            }\n\n            class Customer {\n              +string name\n              +string contactInfo\n            }\n\n            class Claim {\n              +string claimNumber\n              +float claimAmount\n            }\n\n            class Agent {\n              +string name\n              +string region\n            }\n\n            class Payment {\n              +float amount\n              +date dueDate\n            }","18":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Machine -- ProductionLine : part_of\n            Sensor -- Machine : monitors\n            Operator -- Machine : oversees\n            MaintenanceSchedule -- Machine : linked_to\n\n            class Machine {\n              +string id\n              +string type\n              +float outputCapacity\n            }\n\n            class ProductionLine {\n              +string name\n              +int numberOfMachines\n            }\n\n            class Sensor {\n              +string sensorType\n              +void monitor()\n            }\n\n            class Operator {\n              +string name\n              +string shift\n            }\n\n            class MaintenanceSchedule {\n              +date date\n              +string tasks\n            }","19":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Farm -- Crop : grows\n            Farmer -- Farm : owns\n            Equipment -- Farm : used_in\n            Harvest -- Crop : related_to\n\n            class Farm {\n              +string name\n              +float area\n            }\n\n            class Crop {\n              +string name\n              +string season\n            }\n\n            class Farmer {\n              +string name\n              +int experience\n            }\n\n            class Equipment {\n              +string name\n              +string type\n            }\n\n            class Harvest {\n              +date date\n              +float yield\n            }","20":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Forest -- Ranger : protected_by\n            Animal -- Forest : lives_in\n            Threat -- Forest : endangers\n            ConservationPlan -- Forest : applies_to\n\n            class Forest {\n              +string name\n              +float area\n              +string location\n            }\n\n            class Ranger {\n              +string name\n              +string station\n              +void patrol()\n            }\n\n            class Animal {\n              +string species\n              +int population\n            }\n\n            class Threat {\n              +string type\n              +string description\n            }\n\n            class ConservationPlan {\n              +string name\n              +date startDate\n              +date endDate\n            }","21":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            User <|-- Subscriber : inherits\n            Subscription -- Subscriber : linked_to\n            Content -- Subscription : accesses\n            Genre -- Content : categorized_by\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Subscriber {\n              +date subscriptionDate\n              +void renewSubscription()\n            }\n\n            class Subscription {\n              +float monthlyFee\n              +string type\n            }\n\n            class Content {\n              +string title\n              +date releaseDate\n            }\n\n            class Genre {\n              +string name\n              +string description\n            }","22":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Vehicle -- Route : operates_on\n            Driver -- Vehicle : drives\n            Passenger -- Vehicle : rides\n            Ticket -- Passenger : purchased_by\n\n            class Vehicle {\n              +string type\n              +string id\n              +int capacity\n            }\n\n            class Route {\n              +string name\n              +string startPoint\n              +string endPoint\n            }\n\n            class Driver {\n              +string name\n              +string license\n              +void operate()\n            }\n\n            class Passenger {\n              +string name\n              +string ticketNumber\n            }\n\n            class Ticket {\n              +float price\n              +date dateOfTravel\n            }","23":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Developer -- Task : assigned_to\n            Task -- Feature : implements\n            Feature -- Project : part_of\n            BugReport -- Task : related_to\n\n            class Developer {\n              +string name\n              +string role\n            }\n\n            class Task {\n              +string title\n              +date dueDate\n              +string status\n            }\n\n            class Feature {\n              +string name\n              +string description\n            }\n\n            class Project {\n              +string name\n              +date startDate\n              +date endDate\n            }\n\n            class BugReport {\n              +string description\n              +date reportedDate\n            }","24":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Applicant -- Application : submits\n            Application -- Program : applies_to\n            Program -- Department : part_of\n            AdmissionReview -- Application : evaluated_by\n\n            class Applicant {\n              +string name\n              +string email\n              +string qualifications\n            }\n\n            class Application {\n              +date submissionDate\n              +string status\n            }\n\n            class Program {\n              +string name\n              +string level\n            }\n\n            class Department {\n              +string name\n              +string faculty\n            }\n\n            class AdmissionReview {\n              +string reviewer\n              +string comments\n              +date reviewDate\n            }","25":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Trader -- Portfolio : manages\n            Stock -- Portfolio : included_in\n            Trade -- Stock : executed_on\n            Market -- Stock : listed_on\n\n            class Trader {\n              +string name\n              +string accountNumber\n              +void placeOrder()\n            }\n\n            class Portfolio {\n              +string id\n              +float totalValue\n            }\n\n            class Stock {\n              +string tickerSymbol\n              +float currentPrice\n            }\n\n            class Trade {\n              +string type\n              +int quantity\n              +date tradeDate\n            }\n\n            class Market {\n              +string name\n              +string location\n            }","26":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Patient -- Appointment : schedules\n            Doctor -- Appointment : attends\n            LabResult -- Patient : linked_to\n            MedicalRecord -- Patient : associated_with\n\n            class Patient {\n              +string name\n              +string dob\n              +string contactInfo\n            }\n\n            class Appointment {\n              +date appointmentDate\n              +string reason\n            }\n\n            class Doctor {\n              +string name\n              +string specialization\n            }\n\n            class LabResult {\n              +string testName\n              +string result\n              +date testDate\n            }\n\n            class MedicalRecord {\n              +string recordNumber\n              +string history\n            }","27":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Product -- Warehouse : stored_in\n            Inventory -- Product : tracks\n            Shipment -- Warehouse : dispatched_from\n            Supplier -- Product : delivers_to\n\n            class Product {\n              +string name\n              +string sku\n              +int quantity\n            }\n\n            class Warehouse {\n              +string name\n              +string location\n            }\n\n            class Inventory {\n              +int stockLevel\n              +date lastUpdated\n            }\n\n            class Shipment {\n              +string trackingNumber\n              +date shipmentDate\n            }\n\n            class Supplier {\n              +string name\n              +string contactInfo\n            }","28":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Vehicle -- Fleet : belongs_to\n            FleetManager -- Fleet : manages\n            MaintenanceRecord -- Vehicle : associated_with\n            Driver -- Vehicle : assigned_to\n\n            class Vehicle {\n              +string vin\n              +string make\n              +string model\n            }\n\n            class Fleet {\n              +string name\n              +int numberOfVehicles\n            }\n\n            class FleetManager {\n              +string name\n              +string contactInfo\n            }\n\n            class MaintenanceRecord {\n              +date maintenanceDate\n              +string details\n            }\n\n            class Driver {\n              +string name\n              +string licenseNumber\n            }","29":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Teacher -- Class : teaches\n            Student -- Class : attends\n            Assignment -- Class : assigned_by\n            Grade -- Assignment : linked_to\n\n            class Teacher {\n              +string name\n              +string subject\n            }\n\n            class Class {\n              +string name\n              +string gradeLevel\n            }\n\n            class Student {\n              +string name\n              +int age\n            }\n\n            class Assignment {\n              +string title\n              +date dueDate\n            }\n\n            class Grade {\n              +float score\n              +string feedback\n            }","30":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Cashier -- Transaction : processes\n            Product -- Transaction : sold_in\n            Receipt -- Transaction : generated_by\n            Customer -- Transaction : associated_with\n\n            class Cashier {\n              +string name\n              +string employeeId\n            }\n\n            class Transaction {\n              +date date\n              +float totalAmount\n            }\n\n            class Product {\n              +string name\n              +float price\n            }\n\n            class Receipt {\n              +string receiptNumber\n              +date dateOfIssue\n            }\n\n            class Customer {\n              +string name\n              +string loyaltyCardNumber\n            }","31":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            User -- Post : creates\n            Post -- Comment : receives\n            Like -- Post : related_to\n            FriendRequest -- User : sends_to\n\n            class User {\n              +string username\n              +string email\n              +date dateJoined\n            }\n\n            class Post {\n              +string content\n              +date dateCreated\n            }\n\n            class Comment {\n              +string content\n              +date datePosted\n            }\n\n            class Like {\n              +string type\n              +date dateLiked\n            }\n\n            class FriendRequest {\n              +date dateSent\n              +string status\n            }","32":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Member -- Loan : borrows\n            Book -- Loan : issued_in\n            Librarian -- Loan : processes\n            Reservation -- Book : linked_to\n\n            class Member {\n              +string name\n              +string membershipId\n            }\n\n            class Loan {\n              +date issueDate\n              +date returnDate\n            }\n\n            class Book {\n              +string title\n              +string author\n            }\n\n            class Librarian {\n              +string name\n              +string employeeId\n            }\n\n            class Reservation {\n              +date reservationDate\n              +string status\n            }","33":"given the following UML class diagram written in Mermaid JS code, generate equivalent GAML (GAMA markup language) code: classDiagram\n            Patient -- Treatment : receives\n            Doctor -- Treatment : administers\n            Prescription -- Treatment : linked_to\n            Pharmacy -- Prescription : filled_by\n\n            class Patient {\n              +string name\n              +string insuranceNumber\n            }\n\n            class Treatment {\n              +string treatmentType\n              +date treatmentDate\n            }\n\n            class Doctor {\n              +string name\n              +string specialization\n            }\n\n            class Prescription {\n              +string medication\n              +string dosage\n            }\n\n            class Pharmacy {\n              +string name\n              +string location\n            }"},"output":{"0":"model RideSharingSystem\n\nspecies User {\n    string name;\n    string email;\n}\n\nspecies Driver parent: User {\n    string licenseNumber;\n    string vehicleDetails;\n    action acceptRide(Ride ride) {\n        \/\/ Implementation of accepting a ride\n    }\n}\n\nspecies Rider parent: User {\n    string paymentMethod;\n    action requestRide(string location, string destination) {\n        \/\/ Implementation of requesting a ride\n    }\n}\n\nspecies Ride {\n    string pickupLocation;\n    string dropLocation;\n    float fare;\n    Rider rider;  \/\/ Link to Rider\n    Driver driver;  \/\/ Link to Driver\n}\n\nspecies Payment {\n    float amount;\n    string method;\n    Rider rider;  \/\/ Link to Rider\n    Driver driver;  \/\/ Link to Driver\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","1":"model OnlineLearningPlatform\n\nspecies User {\n    string name;\n    string email;\n}\n\nspecies Instructor parent: User {\n    string specialization;\n    action createCourse(Course course) {\n        \/\/ Implementation of creating a course\n    }\n}\n\nspecies Student parent: User {\n    string major;\n    action enrollCourse(Course course) {\n        \/\/ Implementation of enrolling in a course\n    }\n}\n\nspecies Course {\n    string title;\n    string description;\n    Instructor instructor;  \/\/ Link to Instructor\n    Student student;  \/\/ Link to Student\n}\n\nspecies Quiz {\n    string questions;\n    action evaluateAnswers() {\n        \/\/ Implementation of evaluating answers\n    }\n}\n\nspecies Assignment {\n    string title;\n    string instructions;\n    action submit() {\n        \/\/ Implementation of submitting an assignment\n    }\n    Course course;  \/\/ Link to Course\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","2":"model HealthcareSystem\n\nspecies Person {\n    string name;\n    string contactInfo;\n}\n\nspecies Patient parent: Person {\n    string medicalHistory;\n    action bookAppointment(Doctor doctor) {\n        \/\/ Implementation of booking an appointment\n    }\n}\n\nspecies Doctor parent: Person {\n    string specialization;\n    action diagnose(Patient patient) {\n        \/\/ Implementation of diagnosing a patient\n    }\n}\n\nspecies Appointment {\n    string date;\n    string time;\n    string reason;\n    Patient patient;  \/\/ Link to Patient\n    Doctor doctor;  \/\/ Link to Doctor\n}\n\nspecies Prescription {\n    string medication;\n    int dosage;\n    Doctor doctor;  \/\/ Link to Doctor\n    Patient patient;  \/\/ Link to Patient\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","3":"model BankingSystem\n\nspecies AccountHolder {\n    string name;\n    string address;\n}\n\nspecies Customer parent: AccountHolder {\n    string accountNumber;\n    action deposit(float amount) {\n        \/\/ Implementation of deposit\n    }\n    action withdraw(float amount) {\n        \/\/ Implementation of withdrawal\n    }\n}\n\nspecies Account {\n    float balance;\n    string type;\n    Customer customer;  \/\/ Link to Customer\n}\n\nspecies Transaction {\n    float amount;\n    string date;\n    string type;\n    Account account;  \/\/ Link to Account\n}\n\nspecies Loan {\n    float amount;\n    float interestRate;\n    action applyForLoan() {\n        \/\/ Implementation of applying for a loan\n    }\n    Customer customer;  \/\/ Link to Customer\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","4":"model DiseaseOutbreakTracking\n\nspecies Disease {\n    string name;\n    string symptoms;\n}\n\nspecies Virus parent: Disease {\n    string rnaSequence;\n    action mutate() {\n        \/\/ Implementation of mutation\n    }\n}\n\nspecies Bacteria parent: Disease {\n    string dnaSequence;\n    action mutate() {\n        \/\/ Implementation of mutation\n    }\n}\n\nspecies Outbreak {\n    string location;\n    int numberOfCases;\n    action trackSpread() {\n        \/\/ Implementation of tracking the spread\n    }\n    Disease disease;  \/\/ Link to Disease\n    Patient patient;  \/\/ Link to involved Patient\n}\n\nspecies Patient {\n    string name;\n    int age;\n    string status;\n    Outbreak outbreak;  \/\/ Link to Outbreak\n}\n\nspecies Report {\n    string date;\n    string findings;\n    Outbreak outbreak;  \/\/ Link to Outbreak\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","5":"model DemographicSurveySystem\n\nspecies Respondent {\n    string name;\n    int age;\n    string gender;\n    Survey survey;  \/\/ Link to participated Survey\n}\n\nspecies Survey {\n    string title;\n    string description;\n    action distribute() {\n        \/\/ Implementation of distributing the survey\n    }\n    Question question;  \/\/ Link to contained Question\n    Respondent respondent;  \/\/ Link to participating Respondent\n}\n\nspecies Question {\n    string text;\n    string type;\n    Survey survey;  \/\/ Link to Survey\n}\n\nspecies Response {\n    string answer;\n    date dateGiven;\n    Respondent respondent;  \/\/ Link to Respondent\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","6":"model HumanResourceManagementSystem\n\nspecies Employee {\n    string name;\n    string id;\n    string position;\n    Department department;  \/\/ Link to Department\n}\n\nspecies Manager parent: Employee {\n    string department;\n    action assignTask(Task task) {\n        \/\/ Implementation of assigning a task\n    }\n}\n\nspecies Staff parent: Employee {\n    string role;\n    action completeTask(Task task) {\n        \/\/ Implementation of completing a task\n    }\n}\n\nspecies Department {\n    string name;\n    string location;\n    Employee employee;  \/\/ Link to Employee\n}\n\nspecies Task {\n    string title;\n    string description;\n    date dueDate;\n    Employee employee;  \/\/ Link to assigned Employee\n}\n\nspecies PerformanceReview {\n    string reviewer;\n    string comments;\n    Employee employee;  \/\/ Link to Employee\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","7":"model EmergencyResponseSystem\n\nspecies Emergency {\n    string type;\n    string location;\n    date dateReported;\n    ResponseTeam responseTeam;  \/\/ Link to managing ResponseTeam\n    IncidentReport incidentReport;  \/\/ Link to triggered IncidentReport\n}\n\nspecies ResponseTeam {\n    string name;\n    string specialization;\n    Emergency emergency;  \/\/ Link to managed Emergency\n    Member member;  \/\/ Link to Members\n    Resource resource;  \/\/ Link to allocated Resource\n}\n\nspecies Member {\n    string name;\n    string role;\n    ResponseTeam responseTeam;  \/\/ Link to ResponseTeam\n}\n\nspecies Resource {\n    string name;\n    int quantity;\n    action allocate() {\n        \/\/ Implementation of resource allocation\n    }\n    ResponseTeam responseTeam;  \/\/ Link to ResponseTeam\n}\n\nspecies IncidentReport {\n    string description;\n    string status;\n    Emergency emergency;  \/\/ Link to Emergency\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","8":"model TravelBookingPlatform\n\nspecies User {\n    string name;\n    string email;\n}\n\nspecies Traveler parent: User {\n    string preferences;\n    action bookTrip(Destination destination) {\n        \/\/ Implementation of booking a trip\n    }\n}\n\nspecies Agent parent: User {\n    string agency;\n    action manageBooking(Booking booking) {\n        \/\/ Implementation of managing a booking\n    }\n}\n\nspecies Booking {\n    date startDate;\n    date endDate;\n    float price;\n    Traveler traveler;  \/\/ Link to Traveler\n    Agent agent;  \/\/ Link to Agent\n    Destination destination;  \/\/ Link to Destination\n}\n\nspecies Destination {\n    string name;\n    string description;\n    Booking booking;  \/\/ Link to Booking\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","9":"model DigitalCampaignManagement\n\nspecies Campaign {\n    string title;\n    float budget;\n    action launch() {\n        \/\/ Implementation of launching a campaign\n    }\n    Manager manager;  \/\/ Link to organizing Manager\n    Ad ad;  \/\/ Link to contained Ad\n    Audience audience;  \/\/ Link to targeted Audience\n}\n\nspecies Manager {\n    string name;\n    string department;\n    action planCampaign() {\n        \/\/ Implementation of planning a campaign\n    }\n    Campaign campaign;  \/\/ Link to Campaign\n}\n\nspecies Ad {\n    string content;\n    date startDate;\n    date endDate;\n    Campaign campaign;  \/\/ Link to Campaign\n    Platform platform;  \/\/ Link to displayed Platform\n}\n\nspecies Audience {\n    string demographics;\n    string interests;\n    Campaign campaign;  \/\/ Link to targeted Campaign\n}\n\nspecies Platform {\n    string name;\n    string type;\n    Ad ad;  \/\/ Link to Ad\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","10":"model SupplyChainManagement\n\nspecies Product {\n    string name;\n    float price;\n    int quantity;\n    Supplier supplier;  \/\/ Link to Supplier\n    Inventory inventory;  \/\/ Link to Inventory\n    Order order;  \/\/ Link to Order\n}\n\nspecies Inventory {\n    string location;\n    int capacity;\n    action checkStock() {\n        \/\/ Implementation of stock checking\n    }\n    Product product;  \/\/ Link to Product\n}\n\nspecies Supplier {\n    string name;\n    string contactInfo;\n    Product product;  \/\/ Link to provided Product\n}\n\nspecies Order {\n    date orderDate;\n    float totalAmount;\n    Product product;  \/\/ Link to contained Product\n    Shipment shipment;  \/\/ Link to fulfilling Shipment\n}\n\nspecies Shipment {\n    date shipmentDate;\n    string carrier;\n    Order order;  \/\/ Link to fulfilled Order\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","11":"model HealthcareConsultationSystem\n\nspecies Patient {\n    string name;\n    string contactInfo;\n    action requestConsultation(Doctor doctor) {\n        \/\/ Implementation of requesting a consultation\n    }\n    MedicalRecord medicalRecord;  \/\/ Link to MedicalRecord\n}\n\nspecies Doctor {\n    string name;\n    string specialization;\n    action provideConsultation(Patient patient) {\n        \/\/ Implementation of providing a consultation\n    }\n    Consultation consultation;  \/\/ Link to provided Consultation\n}\n\nspecies Consultation {\n    date date;\n    string notes;\n    Patient patient;  \/\/ Link to requesting Patient\n    Doctor doctor;  \/\/ Link to providing Doctor\n    Prescription prescription;  \/\/ Link to issued Prescription\n}\n\nspecies Prescription {\n    string medication;\n    int dosage;\n    Consultation consultation;  \/\/ Link to Consultation\n}\n\nspecies MedicalRecord {\n    string history;\n    string allergies;\n    Patient patient;  \/\/ Link to Patient\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","12":"model PropertyRentalSystem\n\nspecies Property {\n    string address;\n    float value;\n    Owner owner;  \/\/ Link to Owner\n    Tenant tenant;  \/\/ Link to renting Tenant\n    MaintenanceRequest maintenanceRequest;  \/\/ Link to related MaintenanceRequest\n}\n\nspecies Owner {\n    string name;\n    string contactInfo;\n    Property property;  \/\/ Link to owned Property\n}\n\nspecies Tenant {\n    string name;\n    string rentalHistory;\n    Property property;  \/\/ Link to rented Property\n    Lease lease;  \/\/ Link to signed Lease\n}\n\nspecies Lease {\n    date startDate;\n    date endDate;\n    float rentAmount;\n    Tenant tenant;  \/\/ Link to Tenant\n}\n\nspecies MaintenanceRequest {\n    string issue;\n    date requestDate;\n    Property property;  \/\/ Link to Property\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","13":"model ProductSupplyChain\n\nspecies Supplier {\n    string name;\n    string location;\n    RawMaterial rawMaterial;  \/\/ Link to supplied RawMaterial\n}\n\nspecies RawMaterial {\n    string type;\n    float quantity;\n    Supplier supplier;  \/\/ Link to Supplier\n    Manufacturer manufacturer;  \/\/ Link to Manufacturer\n}\n\nspecies Manufacturer {\n    string name;\n    string location;\n    Product product;  \/\/ Link to produced Product\n}\n\nspecies Product {\n    string name;\n    float price;\n    Manufacturer manufacturer;  \/\/ Link to Manufacturer\n    Distributor distributor;  \/\/ Link to Distributor\n    Retailer retailer;  \/\/ Link to Retailer\n}\n\nspecies Distributor {\n    string name;\n    string region;\n    Product product;  \/\/ Link to distributed Product\n}\n\nspecies Retailer {\n    string name;\n    string location;\n    Product product;  \/\/ Link to sold Product\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","14":"model ConstructionProjectManagement\n\nspecies Project {\n    string name;\n    float budget;\n    date deadline;\n    Manager manager;  \/\/ Link to Manager\n    Task task;  \/\/ Link to Project Task\n    Contractor contractor;  \/\/ Link to Contractor\n}\n\nspecies Manager {\n    string name;\n    string experience;\n    Project project;  \/\/ Link to managed Project\n}\n\nspecies Task {\n    string description;\n    date startDate;\n    date endDate;\n    Project project;  \/\/ Link to Project\n    Resource resource;  \/\/ Link to used Resource\n}\n\nspecies Resource {\n    string type;\n    int quantity;\n    Task task;  \/\/ Link to Task\n}\n\nspecies Contractor {\n    string name;\n    string specialty;\n    Project project;  \/\/ Link to Project\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","15":"model ECommerceOrderSystem\n\nspecies Customer {\n    string name;\n    string email;\n    Order order;  \/\/ Link to placed Order\n}\n\nspecies Order {\n    date orderDate;\n    float totalPrice;\n    Customer customer;  \/\/ Link to Customer\n    Product product;  \/\/ Link to included Product\n    Payment payment;  \/\/ Link to linked Payment\n    Delivery delivery;  \/\/ Link to associated Delivery\n}\n\nspecies Product {\n    string name;\n    float price;\n    int stock;\n    Order order;  \/\/ Link to Order\n}\n\nspecies Payment {\n    string method;\n    float amount;\n    Order order;  \/\/ Link to Order\n}\n\nspecies Delivery {\n    string address;\n    date deliveryDate;\n    Order order;  \/\/ Link to Order\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","16":"model ElectricalGridManagement\n\nspecies PowerPlant {\n    string name;\n    float capacity;\n    Grid grid;  \/\/ Link to connected Grid\n}\n\nspecies Grid {\n    string region;\n    int numberOfConsumers;\n    PowerPlant powerPlant;  \/\/ Link to PowerPlant\n    Substation substation;  \/\/ Link to Substation\n    Consumer consumer;  \/\/ Link to served Consumer\n    OutageReport outageReport;  \/\/ Link to related OutageReport\n}\n\nspecies Substation {\n    string name;\n    string location;\n    Grid grid;  \/\/ Link to Grid\n}\n\nspecies Consumer {\n    string name;\n    string address;\n    Grid grid;  \/\/ Link to Grid\n}\n\nspecies OutageReport {\n    string description;\n    date reportedDate;\n    Grid grid;  \/\/ Link to Grid\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","17":"model InsurancePolicyManagement\n\nspecies Policy {\n    string policyNumber;\n    float coverageAmount;\n    Customer customer;  \/\/ Link to Customer\n    Claim claim;  \/\/ Link to associated Claim\n    Payment payment;  \/\/ Link to linked Payment\n}\n\nspecies Customer {\n    string name;\n    string contactInfo;\n    Policy policy;  \/\/ Link to held Policy\n    Agent agent;  \/\/ Link to assigned Agent\n}\n\nspecies Claim {\n    string claimNumber;\n    float claimAmount;\n    Policy policy;  \/\/ Link to Policy\n}\n\nspecies Agent {\n    string name;\n    string region;\n    Customer customer;  \/\/ Link to assigned Customer\n}\n\nspecies Payment {\n    float amount;\n    date dueDate;\n    Policy policy;  \/\/ Link to Policy\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","18":"model ManufacturingSystem\n\nspecies Machine {\n    string id;\n    string type;\n    float outputCapacity;\n    ProductionLine productionLine;  \/\/ Link to ProductionLine\n    Sensor sensor;  \/\/ Link to monitoring Sensor\n    Operator operator;  \/\/ Link to overseeing Operator\n    MaintenanceSchedule maintenanceSchedule;  \/\/ Link to MaintenanceSchedule\n}\n\nspecies ProductionLine {\n    string name;\n    int numberOfMachines;\n    Machine machine;  \/\/ Link to Machine\n}\n\nspecies Sensor {\n    string sensorType;\n    action monitor() {\n        \/\/ Implementation of monitoring\n    }\n    Machine machine;  \/\/ Link to monitored Machine\n}\n\nspecies Operator {\n    string name;\n    string shift;\n    Machine machine;  \/\/ Link to overseen Machine\n}\n\nspecies MaintenanceSchedule {\n    date date;\n    string tasks;\n    Machine machine;  \/\/ Link to Machine\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","19":"model AgricultureManagement\n\nspecies Farm {\n    string name;\n    float area;\n    Farmer farmer;  \/\/ Link to owning Farmer\n    Crop crop;  \/\/ Link to grown Crop\n    Equipment equipment;  \/\/ Link to used Equipment\n}\n\nspecies Crop {\n    string name;\n    string season;\n    Farm farm;  \/\/ Link to Farm\n    Harvest harvest;  \/\/ Link to related Harvest\n}\n\nspecies Farmer {\n    string name;\n    int experience;\n    Farm farm;  \/\/ Link to owned Farm\n}\n\nspecies Equipment {\n    string name;\n    string type;\n    Farm farm;  \/\/ Link to used in Farm\n}\n\nspecies Harvest {\n    date date;\n    float yield;\n    Crop crop;  \/\/ Link to related Crop\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","20":"model ForestConservation\n\nspecies Forest {\n    string name;\n    float area;\n    string location;\n    Ranger ranger;  \/\/ Link to protecting Ranger\n    Animal animal;  \/\/ Link to living Animal\n    Threat threat;  \/\/ Link to endangering Threat\n    ConservationPlan conservationPlan;  \/\/ Link to applied ConservationPlan\n}\n\nspecies Ranger {\n    string name;\n    string station;\n    action patrol() {\n        \/\/ Implementation of patrolling\n    }\n    Forest forest;  \/\/ Link to protected Forest\n}\n\nspecies Animal {\n    string species;\n    int population;\n    Forest forest;  \/\/ Link to Forest\n}\n\nspecies Threat {\n    string type;\n    string description;\n    Forest forest;  \/\/ Link to endangered Forest\n}\n\nspecies ConservationPlan {\n    string name;\n    date startDate;\n    date endDate;\n    Forest forest;  \/\/ Link to Forest\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","21":"model SubscriptionContentPlatform\n\nspecies User {\n    string name;\n    string email;\n}\n\nspecies Subscriber parent: User {\n    date subscriptionDate;\n    action renewSubscription() {\n        \/\/ Implementation of renewing subscription\n    }\n    Subscription subscription;  \/\/ Link to Subscription\n}\n\nspecies Subscription {\n    float monthlyFee;\n    string type;\n    Subscriber subscriber;  \/\/ Link to Subscriber\n    Content content;  \/\/ Link to accessed Content\n}\n\nspecies Content {\n    string title;\n    date releaseDate;\n    Subscription subscription;  \/\/ Link to Subscription\n    Genre genre;  \/\/ Link to categorized Genre\n}\n\nspecies Genre {\n    string name;\n    string description;\n    Content content;  \/\/ Link to Content\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","22":"model PublicTransportationSystem\n\nspecies Vehicle {\n    string type;\n    string id;\n    int capacity;\n    Route route;  \/\/ Link to operated Route\n    Driver driver;  \/\/ Link to Driver\n    Passenger passenger;  \/\/ Link to Passenger\n}\n\nspecies Route {\n    string name;\n    string startPoint;\n    string endPoint;\n    Vehicle vehicle;  \/\/ Link to Vehicle\n}\n\nspecies Driver {\n    string name;\n    string license;\n    action operate() {\n        \/\/ Implementation of operating a vehicle\n    }\n    Vehicle vehicle;  \/\/ Link to driven Vehicle\n}\n\nspecies Passenger {\n    string name;\n    string ticketNumber;\n    Vehicle vehicle;  \/\/ Link to Vehicle\n    Ticket ticket;  \/\/ Link to purchased Ticket\n}\n\nspecies Ticket {\n    float price;\n    date dateOfTravel;\n    Passenger passenger;  \/\/ Link to Passenger\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","23":"model SoftwareDevelopmentProcess\n\nspecies Developer {\n    string name;\n    string role;\n    Task task;  \/\/ Link to assigned Task\n}\n\nspecies Task {\n    string title;\n    date dueDate;\n    string status;\n    Developer developer;  \/\/ Link to Developer\n    Feature feature;  \/\/ Link to implemented Feature\n    BugReport bugReport;  \/\/ Link to related BugReport\n}\n\nspecies Feature {\n    string name;\n    string description;\n    Task task;  \/\/ Link to Task\n    Project project;  \/\/ Link to Project\n}\n\nspecies Project {\n    string name;\n    date startDate;\n    date endDate;\n    Feature feature;  \/\/ Link to Feature\n}\n\nspecies BugReport {\n    string description;\n    date reportedDate;\n    Task task;  \/\/ Link to Task\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","24":"model UniversityAdmissionSystem\n\nspecies Applicant {\n    string name;\n    string email;\n    string qualifications;\n    Application application;  \/\/ Link to submitted Application\n}\n\nspecies Application {\n    date submissionDate;\n    string status;\n    Applicant applicant;  \/\/ Link to Applicant\n    Program program;  \/\/ Link to applied Program\n    AdmissionReview admissionReview;  \/\/ Link to AdmissionReview\n}\n\nspecies Program {\n    string name;\n    string level;\n    Department department;  \/\/ Link to Department\n    Application application;  \/\/ Link to Application\n}\n\nspecies Department {\n    string name;\n    string faculty;\n    Program program;  \/\/ Link to Program\n}\n\nspecies AdmissionReview {\n    string reviewer;\n    string comments;\n    date reviewDate;\n    Application application;  \/\/ Link to evaluated Application\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","25":"model StockTradingSystem\n\nspecies Trader {\n    string name;\n    string accountNumber;\n    action placeOrder() {\n        \/\/ Implementation of placing an order\n    }\n    Portfolio portfolio;  \/\/ Link to managed Portfolio\n}\n\nspecies Portfolio {\n    string id;\n    float totalValue;\n    Trader trader;  \/\/ Link to managing Trader\n    Stock stock;  \/\/ Link to included Stock\n}\n\nspecies Stock {\n    string tickerSymbol;\n    float currentPrice;\n    Portfolio portfolio;  \/\/ Link to Portfolio\n    Trade trade;  \/\/ Link to executed Trade\n    Market market;  \/\/ Link to listed Market\n}\n\nspecies Trade {\n    string type;\n    int quantity;\n    date tradeDate;\n    Stock stock;  \/\/ Link to Stock\n}\n\nspecies Market {\n    string name;\n    string location;\n    Stock stock;  \/\/ Link to Stock\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","26":"model MedicalAppointmentSystem\n\nspecies Patient {\n    string name;\n    date dob;\n    string contactInfo;\n    Appointment appointment;  \/\/ Link to scheduled Appointment\n    LabResult labResult;  \/\/ Link to linked LabResult\n    MedicalRecord medicalRecord;  \/\/ Link to associated MedicalRecord\n}\n\nspecies Appointment {\n    date appointmentDate;\n    string reason;\n    Patient patient;  \/\/ Link to Patient\n    Doctor doctor;  \/\/ Link to attending Doctor\n}\n\nspecies Doctor {\n    string name;\n    string specialization;\n    Appointment appointment;  \/\/ Link to attended Appointment\n}\n\nspecies LabResult {\n    string testName;\n    string result;\n    date testDate;\n    Patient patient;  \/\/ Link to Patient\n}\n\nspecies MedicalRecord {\n    string recordNumber;\n    string history;\n    Patient patient;  \/\/ Link to associated Patient\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","27":"model InventoryManagementSystem\n\nspecies Product {\n    string name;\n    string sku;\n    int quantity;\n    Warehouse warehouse;  \/\/ Link to stored Warehouse\n    Inventory inventory;  \/\/ Link to tracked Inventory\n    Supplier supplier;  \/\/ Link to delivering Supplier\n}\n\nspecies Warehouse {\n    string name;\n    string location;\n    Product product;  \/\/ Link to stored Product\n    Shipment shipment;  \/\/ Link to dispatched Shipment\n}\n\nspecies Inventory {\n    int stockLevel;\n    date lastUpdated;\n    Product product;  \/\/ Link to Product\n}\n\nspecies Shipment {\n    string trackingNumber;\n    date shipmentDate;\n    Warehouse warehouse;  \/\/ Link to Warehouse\n}\n\nspecies Supplier {\n    string name;\n    string contactInfo;\n    Product product;  \/\/ Link to delivered Product\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","28":"model FleetManagementSystem\n\nspecies Vehicle {\n    string vin;\n    string make;\n    string model;\n    Fleet fleet;  \/\/ Link to Fleet\n    MaintenanceRecord maintenanceRecord;  \/\/ Link to associated MaintenanceRecord\n    Driver driver;  \/\/ Link to assigned Driver\n}\n\nspecies Fleet {\n    string name;\n    int numberOfVehicles;\n    Vehicle vehicle;  \/\/ Link to Vehicle\n    FleetManager fleetManager;  \/\/ Link to managing FleetManager\n}\n\nspecies FleetManager {\n    string name;\n    string contactInfo;\n    Fleet fleet;  \/\/ Link to managed Fleet\n}\n\nspecies MaintenanceRecord {\n    date maintenanceDate;\n    string details;\n    Vehicle vehicle;  \/\/ Link to Vehicle\n}\n\nspecies Driver {\n    string name;\n    string licenseNumber;\n    Vehicle vehicle;  \/\/ Link to assigned Vehicle\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","29":"model EducationalManagementSystem\n\nspecies Teacher {\n    string name;\n    string subject;\n    Class class;  \/\/ Link to taught Class\n}\n\nspecies Class {\n    string name;\n    string gradeLevel;\n    Teacher teacher;  \/\/ Link to Teacher\n    Student student;  \/\/ Link to attending Student\n    Assignment assignment;  \/\/ Link to Assignment\n}\n\nspecies Student {\n    string name;\n    int age;\n    Class class;  \/\/ Link to attended Class\n}\n\nspecies Assignment {\n    string title;\n    date dueDate;\n    Class class;  \/\/ Link to assigned in Class\n    Grade grade;  \/\/ Link to linked Grade\n}\n\nspecies Grade {\n    float score;\n    string feedback;\n    Assignment assignment;  \/\/ Link to Assignment\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","30":"model RetailTransactionSystem\n\nspecies Cashier {\n    string name;\n    string employeeId;\n    Transaction transaction;  \/\/ Link to processed Transaction\n}\n\nspecies Transaction {\n    date date;\n    float totalAmount;\n    Cashier cashier;  \/\/ Link to processing Cashier\n    Product product;  \/\/ Link to sold Product\n    Receipt receipt;  \/\/ Link to generated Receipt\n    Customer customer;  \/\/ Link to associated Customer\n}\n\nspecies Product {\n    string name;\n    float price;\n    Transaction transaction;  \/\/ Link to Transaction\n}\n\nspecies Receipt {\n    string receiptNumber;\n    date dateOfIssue;\n    Transaction transaction;  \/\/ Link to Transaction\n}\n\nspecies Customer {\n    string name;\n    string loyaltyCardNumber;\n    Transaction transaction;  \/\/ Link to Transaction\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","31":"model SocialMediaPlatform\n\nspecies User {\n    string username;\n    string email;\n    date dateJoined;\n    Post post;  \/\/ Link to created Post\n    FriendRequest friendRequest;  \/\/ Link to sent FriendRequest\n}\n\nspecies Post {\n    string content;\n    date dateCreated;\n    User user;  \/\/ Link to creating User\n    Comment comment;  \/\/ Link to received Comment\n    Like like;  \/\/ Link to related Like\n}\n\nspecies Comment {\n    string content;\n    date datePosted;\n    Post post;  \/\/ Link to Post\n}\n\nspecies Like {\n    string type;\n    date dateLiked;\n    Post post;  \/\/ Link to Post\n}\n\nspecies FriendRequest {\n    date dateSent;\n    string status;\n    User user;  \/\/ Link to sending User\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","32":"model LibraryManagementSystem\n\nspecies Member {\n    string name;\n    string membershipId;\n    Loan loan;  \/\/ Link to borrowed Loan\n}\n\nspecies Loan {\n    date issueDate;\n    date returnDate;\n    Member member;  \/\/ Link to borrowing Member\n    Book book;  \/\/ Link to issued Book\n    Librarian librarian;  \/\/ Link to processing Librarian\n}\n\nspecies Book {\n    string title;\n    string author;\n    Loan loan;  \/\/ Link to Loan\n    Reservation reservation;  \/\/ Link to linked Reservation\n}\n\nspecies Librarian {\n    string name;\n    string employeeId;\n    Loan loan;  \/\/ Link to processed Loan\n}\n\nspecies Reservation {\n    date reservationDate;\n    string status;\n    Book book;  \/\/ Link to Book\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}","33":"model HealthcareTreatmentSystem\n\nspecies Patient {\n    string name;\n    string insuranceNumber;\n    Treatment treatment;  \/\/ Link to received Treatment\n}\n\nspecies Treatment {\n    string treatmentType;\n    date treatmentDate;\n    Patient patient;  \/\/ Link to receiving Patient\n    Doctor doctor;  \/\/ Link to administering Doctor\n    Prescription prescription;  \/\/ Link to linked Prescription\n}\n\nspecies Doctor {\n    string name;\n    string specialization;\n    Treatment treatment;  \/\/ Link to administered Treatment\n}\n\nspecies Prescription {\n    string medication;\n    string dosage;\n    Treatment treatment;  \/\/ Link to Treatment\n    Pharmacy pharmacy;  \/\/ Link to filling Pharmacy\n}\n\nspecies Pharmacy {\n    string name;\n    string location;\n    Prescription prescription;  \/\/ Link to filled Prescription\n}\n\nexperiment Simulation {\n    \/\/ Simulation setup\n}"}}