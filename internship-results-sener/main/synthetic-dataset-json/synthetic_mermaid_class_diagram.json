[
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Transportation - Ride-sharing Platform. Classes involved are User, Driver, Rider, Ride, and Payment.",
        "output": "classDiagram\n            User <|-- Driver : inherits\n            User <|-- Rider : inherits\n            Ride -- Rider : requests\n            Ride -- Driver : fulfills\n            Payment -- Rider : makes\n            Payment -- Driver : receives\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Driver {\n              +string licenseNumber\n              +string vehicleDetails\n              +void acceptRide(Ride)\n            }\n\n            class Rider {\n              +string paymentMethod\n              +void requestRide(location, destination)\n            }\n\n            class Ride {\n              +string pickupLocation\n              +string dropLocation\n              +float fare\n            }\n\n            class Payment {\n              +float amount\n              +string method\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - Online Learning Platform. Classes involved are User, Instructor, Student, Course, Quiz, and Assignment.",
        "output": "classDiagram\n            User <|-- Instructor : inherits\n            User <|-- Student : inherits\n            Course -- Instructor : created_by\n            Course -- Student : enrolled_in\n            Quiz -- Course : part_of\n            Assignment -- Course : part_of\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Instructor {\n              +string specialization\n              +void createCourse(Course)\n            }\n\n            class Student {\n              +string major\n              +void enrollCourse(Course)\n            }\n\n            class Course {\n              +string title\n              +string description\n            }\n\n            class Quiz {\n              +string questions\n              +void evaluateAnswers()\n            }\n\n            class Assignment {\n              +string title\n              +string instructions\n              +void submit()\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Medicine - Hospital Management System. Classes involved are Person, Patient, Doctor, Appointment, and Prescription.",
        "output": "classDiagram\n            Person <|-- Patient : inherits\n            Person <|-- Doctor : inherits\n            Appointment -- Patient : booked_by\n            Appointment -- Doctor : attended_by\n            Prescription -- Doctor : issued_by\n            Prescription -- Patient : prescribed_to\n\n            class Person {\n              +string name\n              +string contactInfo\n            }\n\n            class Patient {\n              +string medicalHistory\n              +void bookAppointment(Doctor)\n            }\n\n            class Doctor {\n              +string specialization\n              +void diagnose(Patient)\n            }\n\n            class Appointment {\n              +string date\n              +string time\n              +string reason\n            }\n\n            class Prescription {\n              +string medication\n              +int dosage\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Banking System. Classes involved are AccountHolder, Customer, Account, Transaction, and Loan.",
        "output": "classDiagram\n            AccountHolder <|-- Customer : inherits\n            Account -- Customer : belongs_to\n            Transaction -- Account : linked_to\n            Loan -- Customer : granted_to\n\n            class AccountHolder {\n              +string name\n              +string address\n            }\n\n            class Customer {\n              +string accountNumber\n              +void deposit(float)\n              +void withdraw(float)\n            }\n\n            class Account {\n              +float balance\n              +string type\n            }\n\n            class Transaction {\n              +float amount\n              +string date\n              +string type\n            }\n\n            class Loan {\n              +float amount\n              +float interestRate\n              +void applyForLoan()\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Epidemiology - Disease Outbreak Tracking. Classes involved are Disease, Virus, Bacteria, Outbreak, Patient, and Report.",
        "output": "classDiagram\n            Disease <|-- Virus : inherits\n            Disease <|-- Bacteria : inherits\n            Outbreak -- Disease : related_to\n            Patient -- Outbreak : involved_in\n            Report -- Outbreak : describes\n\n            class Disease {\n              +string name\n              +string symptoms\n            }\n\n            class Virus {\n              +string rnaSequence\n              +void mutate()\n            }\n\n            class Bacteria {\n              +string dnaSequence\n              +void mutate()\n            }\n\n            class Outbreak {\n              +string location\n              +int numberOfCases\n              +void trackSpread()\n            }\n\n            class Patient {\n              +string name\n              +int age\n              +string status\n            }\n\n            class Report {\n              +string date\n              +string findings\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Social Science - Demographic Survey System. Classes involved are Respondent, Survey, Question, and Response.",
        "output": "classDiagram\n            Respondent -- Survey : participates_in\n            Survey -- Question : contains\n            Response -- Respondent : given_by\n\n            class Respondent {\n              +string name\n              +int age\n              +string gender\n            }\n\n            class Survey {\n              +string title\n              +string description\n              +void distribute()\n            }\n\n            class Question {\n              +string text\n              +string type\n            }\n\n            class Response {\n              +string answer\n              +date dateGiven\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Organization - Human Resource Management System. Classes involved are Employee, Manager, Staff, Department, Task, and PerformanceReview.",
        "output": "classDiagram\n            Employee <|-- Manager : inherits\n            Employee <|-- Staff : inherits\n            Department -- Employee : part_of\n            Task -- Employee : assigned_to\n            PerformanceReview -- Employee : for\n\n            class Employee {\n              +string name\n              +string id\n              +string position\n            }\n\n            class Manager {\n              +string department\n              +void assignTask(Task)\n            }\n\n            class Staff {\n              +string role\n              +void completeTask(Task)\n            }\n\n            class Department {\n              +string name\n              +string location\n            }\n\n            class Task {\n              +string title\n              +string description\n              +date dueDate\n            }\n\n            class PerformanceReview {\n              +string reviewer\n              +string comments\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Disaster Planning - Emergency Response System. Classes involved are Emergency, ResponseTeam, Member, Resource, and IncidentReport.",
        "output": "classDiagram\n            Emergency -- ResponseTeam : managed_by\n            ResponseTeam -- Member : consists_of\n            Resource -- ResponseTeam : allocated_to\n            IncidentReport -- Emergency : triggers\n\n            class Emergency {\n              +string type\n              +string location\n              +date dateReported\n            }\n\n            class ResponseTeam {\n              +string name\n              +string specialization\n            }\n\n            class Member {\n              +string name\n              +string role\n            }\n\n            class Resource {\n              +string name\n              +int quantity\n              +void allocate()\n            }\n\n            class IncidentReport {\n              +string description\n              +string status\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Tourism - Travel Booking Platform. Classes involved are User, Traveler, Agent, Booking, and Destination.",
        "output": "classDiagram\n            User <|-- Traveler : inherits\n            User <|-- Agent : inherits\n            Booking -- Traveler : made_by\n            Booking -- Agent : managed_by\n            Destination -- Booking : linked_to\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Traveler {\n              +string preferences\n              +void bookTrip(Destination)\n            }\n\n            class Agent {\n              +string agency\n              +void manageBooking(Booking)\n            }\n\n            class Booking {\n              +date startDate\n              +date endDate\n              +float price\n            }\n\n            class Destination {\n              +string name\n              +string description\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Marketing - Digital Campaign Management. Classes involved are Campaign, Manager, Ad, Audience, and Platform.",
        "output": "classDiagram\n            Campaign -- Manager : organized_by\n            Campaign -- Ad : contains\n            Audience -- Campaign : targeted_by\n            Platform -- Ad : displayed_on\n\n            class Campaign {\n              +string title\n              +float budget\n              +void launch()\n            }\n\n            class Manager {\n              +string name\n              +string department\n              +void planCampaign()\n            }\n\n            class Ad {\n              +string content\n              +date startDate\n              +date endDate\n            }\n\n            class Audience {\n              +string demographics\n              +string interests\n            }\n\n            class Platform {\n              +string name\n              +string type\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Business - Inventory Management System. Classes involved are Product, Inventory, Supplier, Order, and Shipment.",
        "output": "classDiagram\n            Product -- Inventory : stored_in\n            Supplier -- Product : provides\n            Order -- Product : contains\n            Shipment -- Order : fulfills\n\n            class Product {\n              +string name\n              +float price\n              +int quantity\n            }\n\n            class Inventory {\n              +string location\n              +int capacity\n              +void checkStock()\n            }\n\n            class Supplier {\n              +string name\n              +string contactInfo\n            }\n\n            class Order {\n              +date orderDate\n              +float totalAmount\n            }\n\n            class Shipment {\n              +date shipmentDate\n              +string carrier\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Telemedicine Platform. Classes involved are Patient, Doctor, Consultation, Prescription, and MedicalRecord.",
        "output": "classDiagram\n            Patient -- Consultation : requests\n            Doctor -- Consultation : provides\n            Prescription -- Consultation : issued_for\n            MedicalRecord -- Patient : contains\n\n            class Patient {\n              +string name\n              +string contactInfo\n              +void requestConsultation(Doctor)\n            }\n\n            class Doctor {\n              +string name\n              +string specialization\n              +void provideConsultation(Patient)\n            }\n\n            class Consultation {\n              +date date\n              +string notes\n            }\n\n            class Prescription {\n              +string medication\n              +int dosage\n            }\n\n            class MedicalRecord {\n              +string history\n              +string allergies\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Real Estate - Property Management System. Classes involved are Property, Owner, Tenant, Lease, and MaintenanceRequest.",
        "output": "classDiagram\n            Property -- Owner : belongs_to\n            Tenant -- Property : rents\n            Lease -- Tenant : signed_by\n            MaintenanceRequest -- Property : related_to\n\n            class Property {\n              +string address\n              +float value\n            }\n\n            class Owner {\n              +string name\n              +string contactInfo\n            }\n\n            class Tenant {\n              +string name\n              +string rentalHistory\n            }\n\n            class Lease {\n              +date startDate\n              +date endDate\n              +float rentAmount\n            }\n\n            class MaintenanceRequest {\n              +string issue\n              +date requestDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Logistics - Supply Chain Management. Classes involved are Supplier, RawMaterial, Manufacturer, Product, Distributor, and Retailer.",
        "output": "classDiagram\n            Supplier -- RawMaterial : supplies\n            Manufacturer -- Product : produces\n            Distributor -- Product : distributes\n            Retailer -- Product : sells\n\n            class Supplier {\n              +string name\n              +string location\n            }\n\n            class RawMaterial {\n              +string type\n              +float quantity\n            }\n\n            class Manufacturer {\n              +string name\n              +string location\n            }\n\n            class Product {\n              +string name\n              +float price\n            }\n\n            class Distributor {\n              +string name\n              +string region\n            }\n\n            class Retailer {\n              +string name\n              +string location\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Construction - Project Management System. Classes involved are Project, Manager, Task, Resource, and Contractor.",
        "output": "classDiagram\n            Project -- Manager : managed_by\n            Task -- Project : part_of\n            Resource -- Task : used_in\n            Contractor -- Project : hired_by\n\n            class Project {\n              +string name\n              +float budget\n              +date deadline\n            }\n\n            class Manager {\n              +string name\n              +string experience\n            }\n\n            class Task {\n              +string description\n              +date startDate\n              +date endDate\n            }\n\n            class Resource {\n              +string type\n              +int quantity\n            }\n\n            class Contractor {\n              +string name\n              +string specialty\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Retail - E-commerce Platform. Classes involved are Customer, Order, Product, Payment, and Delivery.",
        "output": "classDiagram\n            Customer -- Order : places\n            Product -- Order : included_in\n            Payment -- Order : linked_to\n            Delivery -- Order : associated_with\n\n            class Customer {\n              +string name\n              +string email\n            }\n\n            class Order {\n              +date orderDate\n              +float totalPrice\n            }\n\n            class Product {\n              +string name\n              +float price\n              +int stock\n            }\n\n            class Payment {\n              +string method\n              +float amount\n            }\n\n            class Delivery {\n              +string address\n              +date deliveryDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Energy - Power Grid Management. Classes involved are PowerPlant, Grid, Substation, Consumer, and OutageReport.",
        "output": "classDiagram\n            PowerPlant -- Grid : connected_to\n            Substation -- Grid : part_of\n            Consumer -- Grid : served_by\n            OutageReport -- Grid : related_to\n\n            class PowerPlant {\n              +string name\n              +float capacity\n            }\n\n            class Grid {\n              +string region\n              +int numberOfConsumers\n            }\n\n            class Substation {\n              +string name\n              +string location\n            }\n\n            class Consumer {\n              +string name\n              +string address\n            }\n\n            class OutageReport {\n              +string description\n              +date reportedDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Insurance - Policy Management System. Classes involved are Policy, Customer, Claim, Agent, and Payment.",
        "output": "classDiagram\n            Policy -- Customer : held_by\n            Claim -- Policy : associated_with\n            Agent -- Customer : assigned_to\n            Payment -- Policy : linked_to\n\n            class Policy {\n              +string policyNumber\n              +float coverageAmount\n            }\n\n            class Customer {\n              +string name\n              +string contactInfo\n            }\n\n            class Claim {\n              +string claimNumber\n              +float claimAmount\n            }\n\n            class Agent {\n              +string name\n              +string region\n            }\n\n            class Payment {\n              +float amount\n              +date dueDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Manufacturing - Factory Automation System. Classes involved are Machine, ProductionLine, Sensor, Operator, and MaintenanceSchedule.",
        "output": "classDiagram\n            Machine -- ProductionLine : part_of\n            Sensor -- Machine : monitors\n            Operator -- Machine : oversees\n            MaintenanceSchedule -- Machine : linked_to\n\n            class Machine {\n              +string id\n              +string type\n              +float outputCapacity\n            }\n\n            class ProductionLine {\n              +string name\n              +int numberOfMachines\n            }\n\n            class Sensor {\n              +string sensorType\n              +void monitor()\n            }\n\n            class Operator {\n              +string name\n              +string shift\n            }\n\n            class MaintenanceSchedule {\n              +date date\n              +string tasks\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Agriculture - Farm Management System. Classes involved are Farm, Crop, Farmer, Equipment, and Harvest.",
        "output": "classDiagram\n            Farm -- Crop : grows\n            Farmer -- Farm : owns\n            Equipment -- Farm : used_in\n            Harvest -- Crop : related_to\n\n            class Farm {\n              +string name\n              +float area\n            }\n\n            class Crop {\n              +string name\n              +string season\n            }\n\n            class Farmer {\n              +string name\n              +int experience\n            }\n\n            class Equipment {\n              +string name\n              +string type\n            }\n\n            class Harvest {\n              +date date\n              +float yield\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Environmental Management - Forest Conservation. Classes involved are Forest, Ranger, Animal, Threat, and ConservationPlan.",
        "output": "classDiagram\n            Forest -- Ranger : protected_by\n            Animal -- Forest : lives_in\n            Threat -- Forest : endangers\n            ConservationPlan -- Forest : applies_to\n\n            class Forest {\n              +string name\n              +float area\n              +string location\n            }\n\n            class Ranger {\n              +string name\n              +string station\n              +void patrol()\n            }\n\n            class Animal {\n              +string species\n              +int population\n            }\n\n            class Threat {\n              +string type\n              +string description\n            }\n\n            class ConservationPlan {\n              +string name\n              +date startDate\n              +date endDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Media - Streaming Platform. Classes involved are User, Subscriber, Subscription, Content, and Genre.",
        "output": "classDiagram\n            User <|-- Subscriber : inherits\n            Subscription -- Subscriber : linked_to\n            Content -- Subscription : accesses\n            Genre -- Content : categorized_by\n\n            class User {\n              +string name\n              +string email\n            }\n\n            class Subscriber {\n              +date subscriptionDate\n              +void renewSubscription()\n            }\n\n            class Subscription {\n              +float monthlyFee\n              +string type\n            }\n\n            class Content {\n              +string title\n              +date releaseDate\n            }\n\n            class Genre {\n              +string name\n              +string description\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Transportation - Public Transit System. Classes involved are Vehicle, Route, Driver, Passenger, and Ticket.",
        "output": "classDiagram\n            Vehicle -- Route : operates_on\n            Driver -- Vehicle : drives\n            Passenger -- Vehicle : rides\n            Ticket -- Passenger : purchased_by\n\n            class Vehicle {\n              +string type\n              +string id\n              +int capacity\n            }\n\n            class Route {\n              +string name\n              +string startPoint\n              +string endPoint\n            }\n\n            class Driver {\n              +string name\n              +string license\n              +void operate()\n            }\n\n            class Passenger {\n              +string name\n              +string ticketNumber\n            }\n\n            class Ticket {\n              +float price\n              +date dateOfTravel\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Technology - Software Development Lifecycle. Classes involved are Developer, Task, Feature, Project, and BugReport.",
        "output": "classDiagram\n            Developer -- Task : assigned_to\n            Task -- Feature : implements\n            Feature -- Project : part_of\n            BugReport -- Task : related_to\n\n            class Developer {\n              +string name\n              +string role\n            }\n\n            class Task {\n              +string title\n              +date dueDate\n              +string status\n            }\n\n            class Feature {\n              +string name\n              +string description\n            }\n\n            class Project {\n              +string name\n              +date startDate\n              +date endDate\n            }\n\n            class BugReport {\n              +string description\n              +date reportedDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - University Admission System. Classes involved are Applicant, Application, Program, Department, and AdmissionReview.",
        "output": "classDiagram\n            Applicant -- Application : submits\n            Application -- Program : applies_to\n            Program -- Department : part_of\n            AdmissionReview -- Application : evaluated_by\n\n            class Applicant {\n              +string name\n              +string email\n              +string qualifications\n            }\n\n            class Application {\n              +date submissionDate\n              +string status\n            }\n\n            class Program {\n              +string name\n              +string level\n            }\n\n            class Department {\n              +string name\n              +string faculty\n            }\n\n            class AdmissionReview {\n              +string reviewer\n              +string comments\n              +date reviewDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Stock Trading Platform. Classes involved are Trader, Portfolio, Stock, Trade, and Market.",
        "output": "classDiagram\n            Trader -- Portfolio : manages\n            Stock -- Portfolio : included_in\n            Trade -- Stock : executed_on\n            Market -- Stock : listed_on\n\n            class Trader {\n              +string name\n              +string accountNumber\n              +void placeOrder()\n            }\n\n            class Portfolio {\n              +string id\n              +float totalValue\n            }\n\n            class Stock {\n              +string tickerSymbol\n              +float currentPrice\n            }\n\n            class Trade {\n              +string type\n              +int quantity\n              +date tradeDate\n            }\n\n            class Market {\n              +string name\n              +string location\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Patient Portal System. Classes involved are Patient, Appointment, Doctor, LabResult, and MedicalRecord.",
        "output": "classDiagram\n            Patient -- Appointment : schedules\n            Doctor -- Appointment : attends\n            LabResult -- Patient : linked_to\n            MedicalRecord -- Patient : associated_with\n\n            class Patient {\n              +string name\n              +string dob\n              +string contactInfo\n            }\n\n            class Appointment {\n              +date appointmentDate\n              +string reason\n            }\n\n            class Doctor {\n              +string name\n              +string specialization\n            }\n\n            class LabResult {\n              +string testName\n              +string result\n              +date testDate\n            }\n\n            class MedicalRecord {\n              +string recordNumber\n              +string history\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Logistics - Warehouse Management System. Classes involved are Product, Warehouse, Inventory, Shipment, and Supplier.",
        "output": "classDiagram\n            Product -- Warehouse : stored_in\n            Inventory -- Product : tracks\n            Shipment -- Warehouse : dispatched_from\n            Supplier -- Product : delivers_to\n\n            class Product {\n              +string name\n              +string sku\n              +int quantity\n            }\n\n            class Warehouse {\n              +string name\n              +string location\n            }\n\n            class Inventory {\n              +int stockLevel\n              +date lastUpdated\n            }\n\n            class Shipment {\n              +string trackingNumber\n              +date shipmentDate\n            }\n\n            class Supplier {\n              +string name\n              +string contactInfo\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Transportation - Fleet Management System. Classes involved are Vehicle, Fleet, FleetManager, MaintenanceRecord, and Driver.",
        "output": "classDiagram\n            Vehicle -- Fleet : belongs_to\n            FleetManager -- Fleet : manages\n            MaintenanceRecord -- Vehicle : associated_with\n            Driver -- Vehicle : assigned_to\n\n            class Vehicle {\n              +string vin\n              +string make\n              +string model\n            }\n\n            class Fleet {\n              +string name\n              +int numberOfVehicles\n            }\n\n            class FleetManager {\n              +string name\n              +string contactInfo\n            }\n\n            class MaintenanceRecord {\n              +date maintenanceDate\n              +string details\n            }\n\n            class Driver {\n              +string name\n              +string licenseNumber\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - School Management System. Classes involved are Teacher, Class, Student, Assignment, and Grade.",
        "output": "classDiagram\n            Teacher -- Class : teaches\n            Student -- Class : attends\n            Assignment -- Class : assigned_by\n            Grade -- Assignment : linked_to\n\n            class Teacher {\n              +string name\n              +string subject\n            }\n\n            class Class {\n              +string name\n              +string gradeLevel\n            }\n\n            class Student {\n              +string name\n              +int age\n            }\n\n            class Assignment {\n              +string title\n              +date dueDate\n            }\n\n            class Grade {\n              +float score\n              +string feedback\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Retail - Point of Sale System. Classes involved are Cashier, Transaction, Product, Receipt, and Customer.",
        "output": "classDiagram\n            Cashier -- Transaction : processes\n            Product -- Transaction : sold_in\n            Receipt -- Transaction : generated_by\n            Customer -- Transaction : associated_with\n\n            class Cashier {\n              +string name\n              +string employeeId\n            }\n\n            class Transaction {\n              +date date\n              +float totalAmount\n            }\n\n            class Product {\n              +string name\n              +float price\n            }\n\n            class Receipt {\n              +string receiptNumber\n              +date dateOfIssue\n            }\n\n            class Customer {\n              +string name\n              +string loyaltyCardNumber\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Social Media - User Interaction System. Classes involved are User, Post, Comment, Like, and FriendRequest.",
        "output": "classDiagram\n            User -- Post : creates\n            Post -- Comment : receives\n            Like -- Post : related_to\n            FriendRequest -- User : sends_to\n\n            class User {\n              +string username\n              +string email\n              +date dateJoined\n            }\n\n            class Post {\n              +string content\n              +date dateCreated\n            }\n\n            class Comment {\n              +string content\n              +date datePosted\n            }\n\n            class Like {\n              +string type\n              +date dateLiked\n            }\n\n            class FriendRequest {\n              +date dateSent\n              +string status\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Tourism - Hotel Management System. Classes involved are Guest, Reservation, Room, Service, and Invoice.",
        "output": "classDiagram\n            Guest -- Reservation : makes\n            Room -- Reservation : associated_with\n            Service -- Room : offered_in\n            Invoice -- Reservation : generated_for\n\n            class Guest {\n              +string name\n              +string contactInfo\n            }\n\n            class Reservation {\n              +date checkInDate\n              +date checkOutDate\n            }\n\n            class Room {\n              +string roomNumber\n              +string type\n              +float rate\n            }\n\n            class Service {\n              +string name\n              +float cost\n            }\n\n            class Invoice {\n              +string invoiceNumber\n              +float totalAmount\n              +date issueDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Real Estate - Rental Application System. Classes involved are Applicant, Application, Property, Landlord, and Lease.",
        "output": "classDiagram\n            Applicant -- Application : submits\n            Application -- Property : applies_to\n            Landlord -- Property : owns\n            Lease -- Application : results_in\n\n            class Applicant {\n              +string name\n              +string contactInfo\n              +string employmentStatus\n            }\n\n            class Application {\n              +date submissionDate\n              +string status\n            }\n\n            class Property {\n              +string address\n              +float rentalPrice\n            }\n\n            class Landlord {\n              +string name\n              +string contactInfo\n            }\n\n            class Lease {\n              +date startDate\n              +date endDate\n              +float monthlyRent\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Pharmacy Management System. Classes involved are Pharmacist, Prescription, Medication, Patient, and Inventory.",
        "output": "classDiagram\n            Pharmacist -- Prescription : fills\n            Prescription -- Medication : contains\n            Patient -- Prescription : prescribed_to\n            Inventory -- Medication : tracks\n\n            class Pharmacist {\n              +string name\n              +string licenseNumber\n            }\n\n            class Prescription {\n              +date issueDate\n              +string dosageInstructions\n            }\n\n            class Medication {\n              +string name\n              +string type\n              +int quantity\n            }\n\n            class Patient {\n              +string name\n              +string contactInfo\n            }\n\n            class Inventory {\n              +string location\n              +int stockLevel\n              +date lastUpdated\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Business - Customer Relationship Management. Classes involved are Customer, Interaction, SalesRep, Product, and Feedback.",
        "output": "classDiagram\n            Customer -- Interaction : engages_in\n            SalesRep -- Interaction : manages\n            Product -- Interaction : discusses\n            Feedback -- Interaction : results_in\n\n            class Customer {\n              +string name\n              +string contactInfo\n              +string customerId\n            }\n\n            class Interaction {\n              +date interactionDate\n              +string type\n              +string notes\n            }\n\n            class SalesRep {\n              +string name\n              +string email\n              +string employeeId\n            }\n\n            class Product {\n              +string name\n              +float price\n              +string sku\n            }\n\n            class Feedback {\n              +string content\n              +int rating\n              +date feedbackDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - Course Management System. Classes involved are Instructor, Course, Student, CourseMaterial, and Grade.",
        "output": "classDiagram\n            Instructor -- Course : teaches\n            Student -- Course : enrolls_in\n            CourseMaterial -- Course : included_in\n            Grade -- Student : assigned_for\n\n            class Instructor {\n              +string name\n              +string department\n            }\n\n            class Course {\n              +string title\n              +string description\n              +int credits\n            }\n\n            class Student {\n              +string name\n              +string major\n              +string studentId\n            }\n\n            class CourseMaterial {\n              +string title\n              +string format\n              +date publicationDate\n            }\n\n            class Grade {\n              +string courseTitle\n              +float score\n              +string letterGrade\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Accounting Software System. Classes involved are Accountant, Transaction, Account, Invoice, and Payment.",
        "output": "classDiagram\n            Accountant -- Transaction : records\n            Transaction -- Account : affects\n            Invoice -- Transaction : linked_to\n            Payment -- Invoice : associated_with\n\n            class Accountant {\n              +string name\n              +string certification\n            }\n\n            class Transaction {\n              +date transactionDate\n              +float amount\n              +string type\n            }\n\n            class Account {\n              +string name\n              +float balance\n            }\n\n            class Invoice {\n              +string invoiceNumber\n              +date issueDate\n              +float totalAmount\n            }\n\n            class Payment {\n              +string method\n              +date paymentDate\n              +float amount\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Environmental Management - Waste Management System. Classes involved are Household, WasteBin, WasteTruck, WasteFacility, and RecyclableMaterial.",
        "output": "classDiagram\n            Household -- WasteBin : uses\n            WasteBin -- WasteTruck : collected_by\n            WasteTruck -- WasteFacility : delivers_to\n            RecyclableMaterial -- WasteFacility : processed_at\n\n            class Household {\n              +string address\n              +int numberOfResidents\n            }\n\n            class WasteBin {\n              +string binType\n              +float capacity\n            }\n\n            class WasteTruck {\n              +string truckId\n              +string driverName\n            }\n\n            class WasteFacility {\n              +string name\n              +string location\n              +string facilityType\n            }\n\n            class RecyclableMaterial {\n              +string materialType\n              +float quantity\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Technology - IT Support Ticketing System. Classes involved are User, Ticket, ITSupport, Category, and Resolution.",
        "output": "classDiagram\n            User -- Ticket : raises\n            ITSupport -- Ticket : resolves\n            Category -- Ticket : categorized_in\n            Resolution -- Ticket : linked_to\n\n            class User {\n              +string name\n              +string department\n              +string userId\n            }\n\n            class Ticket {\n              +string ticketNumber\n              +date issueDate\n              +string status\n            }\n\n            class ITSupport {\n              +string name\n              +string specialization\n              +string supportLevel\n            }\n\n            class Category {\n              +string name\n              +string description\n            }\n\n            class Resolution {\n              +string resolutionDetails\n              +date resolutionDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Marketing - Social Media Analytics. Classes involved are Campaign, Post, Metric, Report, and Analyst.",
        "output": "classDiagram\n            Campaign -- Post : includes\n            Post -- Metric : generates\n            Metric -- Report : summarized_in\n            Analyst -- Report : interprets\n\n            class Campaign {\n              +string name\n              +date startDate\n              +date endDate\n              +float budget\n            }\n\n            class Post {\n              +string content\n              +date postDate\n              +int engagement\n            }\n\n            class Metric {\n              +string name\n              +int value\n            }\n\n            class Report {\n              +string title\n              +date reportDate\n            }\n\n            class Analyst {\n              +string name\n              +string role\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Transportation - Shipping Logistics. Classes involved are Shipment, Container, Item, Ship, and Port.",
        "output": "classDiagram\n            Shipment -- Container : includes\n            Container -- Item : stores\n            Ship -- Shipment : carries\n            Port -- Ship : docks_at\n\n            class Shipment {\n              +string shipmentId\n              +date departureDate\n              +date arrivalDate\n            }\n\n            class Container {\n              +string containerId\n              +float weight\n              +float volume\n            }\n\n            class Item {\n              +string itemName\n              +float weight\n              +int quantity\n            }\n\n            class Ship {\n              +string shipName\n              +string capacity\n            }\n\n            class Port {\n              +string portName\n              +string location\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Tourism - Tour Management System. Classes involved are TourGuide, Tour, Tourist, Booking, and Itinerary.",
        "output": "classDiagram\n            TourGuide -- Tour : leads\n            Tourist -- Tour : participates_in\n            Booking -- Tour : associated_with\n            Itinerary -- Tour : follows\n\n            class TourGuide {\n              +string name\n              +string language\n            }\n\n            class Tour {\n              +string tourName\n              +date startDate\n              +date endDate\n            }\n\n            class Tourist {\n              +string name\n              +string nationality\n            }\n\n            class Booking {\n              +string bookingId\n              +date bookingDate\n              +float totalCost\n            }\n\n            class Itinerary {\n              +string location\n              +date visitDate\n              +string description\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Budget Management System. Classes involved are Budget, Expense, Category, Report, and Manager.",
        "output": "classDiagram\n            Budget -- Expense : includes\n            Expense -- Category : categorized_in\n            Report -- Budget : summarizes\n            Manager -- Budget : oversees\n\n            class Budget {\n              +string budgetId\n              +float totalAmount\n              +date startDate\n              +date endDate\n            }\n\n            class Expense {\n              +string expenseId\n              +float amount\n              +date expenseDate\n            }\n\n            class Category {\n              +string categoryName\n              +string description\n            }\n\n            class Report {\n              +string reportId\n              +date reportDate\n              +string summary\n            }\n\n            class Manager {\n              +string name\n              +string department\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Emergency Room Management. Classes involved are Patient, ERVisit, TriageNurse, Doctor, and MedicalRecord.",
        "output": "classDiagram\n            Patient -- ERVisit : undergoes\n            TriageNurse -- ERVisit : assesses\n            Doctor -- ERVisit : treats\n            MedicalRecord -- ERVisit : updated_with\n\n            class Patient {\n              +string name\n              +string dob\n              +string medicalHistory\n            }\n\n            class ERVisit {\n              +date visitDate\n              +string reasonForVisit\n              +string outcome\n            }\n\n            class TriageNurse {\n              +string name\n              +string qualifications\n            }\n\n            class Doctor {\n              +string name\n              +string specialty\n            }\n\n            class MedicalRecord {\n              +string recordId\n              +string history\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Real Estate - Property Listing System. Classes involved are Agent, Listing, Property, Buyer, and Offer.",
        "output": "classDiagram\n            Agent -- Listing : creates\n            Listing -- Property : describes\n            Buyer -- Listing : inquires_about\n            Offer -- Listing : associated_with\n\n            class Agent {\n              +string name\n              +string agency\n            }\n\n            class Listing {\n              +string listingId\n              +date datePosted\n              +float price\n            }\n\n            class Property {\n              +string address\n              +float area\n              +string type\n            }\n\n            class Buyer {\n              +string name\n              +string contactInfo\n            }\n\n            class Offer {\n              +float offerPrice\n              +date offerDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Technology - Cloud Storage System. Classes involved are User, File, Folder, StoragePlan, and AccessLog.",
        "output": "classDiagram\n            User -- File : uploads\n            Folder -- File : contains\n            StoragePlan -- User : associated_with\n            AccessLog -- File : recorded_in\n\n            class User {\n              +string name\n              +string email\n              +string userId\n            }\n\n            class File {\n              +string fileName\n              +float fileSize\n              +date uploadDate\n            }\n\n            class Folder {\n              +string folderName\n              +date creationDate\n            }\n\n            class StoragePlan {\n              +string planName\n              +float storageLimit\n              +float cost\n            }\n\n            class AccessLog {\n              +date accessDate\n              +string action\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Retail - Loyalty Program Management. Classes involved are Customer, LoyaltyAccount, Purchase, Reward, and Transaction.",
        "output": "classDiagram\n            Customer -- LoyaltyAccount : has\n            Purchase -- LoyaltyAccount : linked_to\n            Reward -- LoyaltyAccount : redeemed_by\n            Transaction -- Purchase : associated_with\n\n            class Customer {\n              +string name\n              +string contactInfo\n              +string loyaltyId\n            }\n\n            class LoyaltyAccount {\n              +int points\n              +date lastActivity\n            }\n\n            class Purchase {\n              +float amount\n              +date purchaseDate\n            }\n\n            class Reward {\n              +string rewardName\n              +int pointsRequired\n            }\n\n            class Transaction {\n              +string transactionId\n              +date transactionDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Logistics - Freight Forwarding System. Classes involved are Consignor, ShipmentOrder, Carrier, Freight, and Delivery.",
        "output": "classDiagram\n            Consignor -- ShipmentOrder : creates\n            ShipmentOrder -- Carrier : assigned_to\n            Freight -- ShipmentOrder : includes\n            Delivery -- ShipmentOrder : results_in\n\n            class Consignor {\n              +string name\n              +string contactInfo\n            }\n\n            class ShipmentOrder {\n              +string orderId\n              +date orderDate\n              +string status\n            }\n\n            class Carrier {\n              +string name\n              +string vehicleType\n            }\n\n            class Freight {\n              +string description\n              +float weight\n              +string dimensions\n            }\n\n            class Delivery {\n              +date deliveryDate\n              +string deliveryStatus\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Dental Clinic Management. Classes involved are Dentist, Appointment, Patient, Treatment, and Billing.",
        "output": "classDiagram\n            Dentist -- Appointment : attends\n            Patient -- Appointment : schedules\n            Treatment -- Appointment : includes\n            Billing -- Appointment : associated_with\n\n            class Dentist {\n              +string name\n              +string specialization\n            }\n\n            class Appointment {\n              +date appointmentDate\n              +string reason\n              +string status\n            }\n\n            class Patient {\n              +string name\n              +string contactInfo\n            }\n\n            class Treatment {\n              +string treatmentType\n              +float cost\n            }\n\n            class Billing {\n              +float totalAmount\n              +date billingDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - Virtual Classroom System. Classes involved are Teacher, Session, Student, LessonMaterial, and Assignment.",
        "output": "classDiagram\n            Teacher -- Session : conducts\n            Student -- Session : attends\n            LessonMaterial -- Session : associated_with\n            Assignment -- LessonMaterial : based_on\n\n            class Teacher {\n              +string name\n              +string subject\n            }\n\n            class Session {\n              +string sessionId\n              +date sessionDate\n              +string topic\n            }\n\n            class Student {\n              +string name\n              +string studentId\n            }\n\n            class LessonMaterial {\n              +string materialTitle\n              +string format\n              +date publicationDate\n            }\n\n            class Assignment {\n              +string title\n              +date dueDate\n              +string description\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Business - Payroll Management System. Classes involved are Employee, Payroll, Payslip, TaxDeduction, and SalaryComponent.",
        "output": "classDiagram\n            Employee -- Payroll : receives\n            Payroll -- Payslip : includes\n            TaxDeduction -- Payroll : associated_with\n            SalaryComponent -- Payroll : calculated_from\n\n            class Employee {\n              +string name\n              +string employeeId\n              +string department\n            }\n\n            class Payroll {\n              +date payrollDate\n              +float grossPay\n              +float netPay\n            }\n\n            class Payslip {\n              +string payslipId\n              +date issueDate\n              +float totalAmount\n            }\n\n            class TaxDeduction {\n              +string taxType\n              +float amount\n            }\n\n            class SalaryComponent {\n              +string componentName\n              +float amount\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Mortgage Management System. Classes involved are Customer, Mortgage, Property, Payment, and InterestRate.",
        "output": "classDiagram\n            Customer -- Mortgage : applies_for\n            Mortgage -- Property : secured_by\n            Payment -- Mortgage : associated_with\n            InterestRate -- Mortgage : calculated_on\n\n            class Customer {\n              +string name\n              +string contactInfo\n            }\n\n            class Mortgage {\n              +string mortgageId\n              +float loanAmount\n              +date startDate\n            }\n\n            class Property {\n              +string address\n              +float value\n            }\n\n            class Payment {\n              +float amount\n              +date paymentDate\n            }\n\n            class InterestRate {\n              +float rate\n              +date effectiveDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Logistics - Inventory Tracking System. Classes involved are Warehouse, InventoryItem, Supplier, StockLevel, and RestockOrder.",
        "output": "classDiagram\n            Warehouse -- InventoryItem : contains\n            InventoryItem -- Supplier : supplied_by\n            StockLevel -- InventoryItem : tracks\n            RestockOrder -- InventoryItem : triggers\n\n            class Warehouse {\n              +string warehouseId\n              +string location\n            }\n\n            class InventoryItem {\n              +string itemId\n              +string name\n              +int quantity\n            }\n\n            class Supplier {\n              +string name\n              +string contactInfo\n            }\n\n            class StockLevel {\n              +int currentLevel\n              +int reorderThreshold\n            }\n\n            class RestockOrder {\n              +date orderDate\n              +int quantityOrdered\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Tourism - Cruise Management System. Classes involved are Passenger, Booking, Cabin, Activity, and Destination.",
        "output": "classDiagram\n            Passenger -- Booking : makes\n            Cabin -- Booking : associated_with\n            Activity -- Cruise : offers\n            Destination -- Cruise : visits\n\n            class Passenger {\n              +string name\n              +string nationality\n              +date dob\n            }\n\n            class Booking {\n              +string bookingId\n              +date bookingDate\n              +float totalCost\n            }\n\n            class Cabin {\n              +string cabinNumber\n              +string type\n            }\n\n            class Activity {\n              +string activityName\n              +date activityDate\n            }\n\n            class Destination {\n              +string location\n              +date arrivalDate\n              +date departureDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Retail - Product Return Management. Classes involved are Customer, ReturnRequest, Product, Refund, and Restock.",
        "output": "classDiagram\n            Customer -- ReturnRequest : submits\n            ReturnRequest -- Product : involves\n            Refund -- ReturnRequest : associated_with\n            Restock -- Product : triggers\n\n            class Customer {\n              +string name\n              +string orderId\n              +string contactInfo\n            }\n\n            class ReturnRequest {\n              +string requestId\n              +date requestDate\n              +string reason\n            }\n\n            class Product {\n              +string productId\n              +string name\n              +float price\n            }\n\n            class Refund {\n              +float amount\n              +date refundDate\n            }\n\n            class Restock {\n              +date restockDate\n              +int quantityRestocked\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Technology - DevOps Pipeline System. Classes involved are Developer, CodeRepository, Build, Test, and Deployment.",
        "output": "classDiagram\n            Developer -- CodeRepository : commits_to\n            Build -- Pipeline : initiated_by\n            Test -- Pipeline : executed_in\n            Deployment -- Pipeline : results_in\n\n            class Developer {\n              +string name\n              +string role\n            }\n\n            class CodeRepository {\n              +string repoName\n              +date creationDate\n            }\n\n            class Build {\n              +string buildId\n              +date buildDate\n              +string status\n            }\n\n            class Test {\n              +string testName\n              +date testDate\n              +string result\n            }\n\n            class Deployment {\n              +string deploymentId\n              +date deploymentDate\n              +string environment\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Tax Filing System. Classes involved are Taxpayer, TaxReturn, Income, Deduction, and Payment.",
        "output": "classDiagram\n            Taxpayer -- TaxReturn : files\n            TaxReturn -- Income : reports\n            Deduction -- TaxReturn : associated_with\n            Payment -- TaxReturn : related_to\n\n            class Taxpayer {\n              +string name\n              +string ssn\n              +string filingStatus\n            }\n\n            class TaxReturn {\n              +string returnId\n              +date filingDate\n              +float taxDue\n            }\n\n            class Income {\n              +string source\n              +float amount\n              +date receivedDate\n            }\n\n            class Deduction {\n              +string deductionType\n              +float amount\n            }\n\n            class Payment {\n              +float amount\n              +date paymentDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Medical Imaging System. Classes involved are Radiologist, ImagingOrder, Patient, Scan, and Report.",
        "output": "classDiagram\n            Radiologist -- ImagingOrder : reviews\n            Patient -- ImagingOrder : undergoes\n            Scan -- ImagingOrder : produces\n            Report -- Scan : associated_with\n\n            class Radiologist {\n              +string name\n              +string specialty\n            }\n\n            class ImagingOrder {\n              +string orderId\n              +date orderDate\n              +string imagingType\n            }\n\n            class Patient {\n              +string name\n              +string dob\n              +string contactInfo\n            }\n\n            class Scan {\n              +string scanId\n              +date scanDate\n              +string scanType\n            }\n\n            class Report {\n              +string reportId\n              +date reportDate\n              +string findings\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Transportation - Vehicle Maintenance System. Classes involved are Vehicle, MaintenanceRecord, Technician, Service, and Part.",
        "output": "classDiagram\n            Vehicle -- MaintenanceRecord : associated_with\n            Technician -- MaintenanceRecord : creates\n            Service -- MaintenanceRecord : includes\n            Part -- Service : required_for\n\n            class Vehicle {\n              +string vin\n              +string make\n              +string model\n              +int year\n            }\n\n            class MaintenanceRecord {\n              +string recordId\n              +date serviceDate\n              +string description\n            }\n\n            class Technician {\n              +string name\n              +string certification\n            }\n\n            class Service {\n              +string serviceName\n              +float cost\n            }\n\n            class Part {\n              +string partName\n              +string partNumber\n              +float cost\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Tourism - Museum Management System. Classes involved are Visitor, Ticket, Exhibit, Artifact, and Guide.",
        "output": "classDiagram\n            Visitor -- Ticket : purchases\n            Exhibit -- Ticket : grants_access_to\n            Artifact -- Exhibit : contains\n            Guide -- Exhibit : provides_tour_for\n\n            class Visitor {\n              +string name\n              +string contactInfo\n            }\n\n            class Ticket {\n              +string ticketId\n              +date issueDate\n              +float price\n            }\n\n            class Exhibit {\n              +string exhibitName\n              +date startDate\n              +date endDate\n            }\n\n            class Artifact {\n              +string artifactName\n              +string origin\n              +date acquisitionDate\n            }\n\n            class Guide {\n              +string name\n              +string specialty\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Retail - Warehouse Automation System. Classes involved are Robot, Task, Product, Conveyor, and Sensor.",
        "output": "classDiagram\n            Robot -- Task : performs\n            Task -- Product : associated_with\n            Conveyor -- Product : transports\n            Sensor -- Robot : guides\n\n            class Robot {\n              +string robotId\n              +string model\n              +string manufacturer\n            }\n\n            class Task {\n              +string taskId\n              +string description\n              +date assignedDate\n            }\n\n            class Product {\n              +string productId\n              +string name\n              +float weight\n            }\n\n            class Conveyor {\n              +string conveyorId\n              +string location\n            }\n\n            class Sensor {\n              +string sensorType\n              +string manufacturer\n              +string model\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Investment Portfolio Management. Classes involved are Investor, Portfolio, Asset, Trade, and PerformanceReport.",
        "output": "classDiagram\n            Investor -- Portfolio : owns\n            Portfolio -- Asset : contains\n            Trade -- Asset : results_in\n            PerformanceReport -- Portfolio : summarized_in\n\n            class Investor {\n              +string name\n              +string contactInfo\n              +string investorId\n            }\n\n            class Portfolio {\n              +string portfolioId\n              +float totalValue\n              +string riskLevel\n            }\n\n            class Asset {\n              +string assetName\n              +string assetType\n              +float marketValue\n            }\n\n            class Trade {\n              +string tradeId\n              +date tradeDate\n              +string tradeType\n              +float tradeValue\n            }\n\n            class PerformanceReport {\n              +string reportId\n              +date reportDate\n              +string summary\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - Scholarship Management System. Classes involved are Student, Application, Scholarship, Committee, and Award.",
        "output": "classDiagram\n            Student -- Application : submits\n            Application -- Scholarship : applies_for\n            Committee -- Application : reviews\n            Award -- Scholarship : granted_by\n\n            class Student {\n              +string name\n              +string studentId\n              +string major\n            }\n\n            class Application {\n              +string applicationId\n              +date submissionDate\n              +string status\n            }\n\n            class Scholarship {\n              +string scholarshipName\n              +float amount\n              +date awardDate\n            }\n\n            class Committee {\n              +string committeeName\n              +string members\n            }\n\n            class Award {\n              +string awardId\n              +float amount\n              +date disbursementDate\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Transportation - Railway Reservation System. Classes involved are Passenger, Reservation, Train, Seat, and Ticket.",
        "output": "classDiagram\n            Passenger -- Reservation : makes\n            Train -- Reservation : associated_with\n            Seat -- Train : assigned_to\n            Ticket -- Reservation : linked_to\n\n            class Passenger {\n              +string name\n              +string contactInfo\n            }\n\n            class Reservation {\n              +string reservationId\n              +date reservationDate\n              +float totalCost\n            }\n\n            class Train {\n              +string trainNumber\n              +string route\n              +date departureDate\n            }\n\n            class Seat {\n              +string seatNumber\n              +string class\n              +float fare\n            }\n\n            class Ticket {\n              +string ticketNumber\n              +date issueDate\n              +float price\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Telehealth Consultation System. Classes involved are Patient, Consultation, Doctor, Diagnosis, and Prescription.",
        "output": "classDiagram\n            Patient -- Consultation : books\n            Doctor -- Consultation : provides\n            Diagnosis -- Consultation : results_in\n            Prescription -- Diagnosis : associated_with\n\n            class Patient {\n              +string name\n              +string contactInfo\n              +date dob\n            }\n\n            class Consultation {\n              +string consultationId\n              +date consultationDate\n              +string status\n            }\n\n            class Doctor {\n              +string name\n              +string specialty\n            }\n\n            class Diagnosis {\n              +string diagnosisId\n              +string condition\n              +string notes\n            }\n\n            class Prescription {\n              +string prescriptionId\n              +date issueDate\n              +string medication\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Real Estate - Property Appraisal System. Classes involved are Appraiser, Appraisal, Property, Client, and Report.",
        "output": "classDiagram\n            Appraiser -- Appraisal : conducts\n            Property -- Appraisal : linked_to\n            Client -- Appraisal : requests\n            Report -- Appraisal : generated_for\n\n            class Appraiser {\n              +string name\n              +string certification\n              +string contactInfo\n            }\n\n            class Appraisal {\n              +string appraisalId\n              +date appraisalDate\n              +float appraisedValue\n            }\n\n            class Property {\n              +string propertyId\n              +string address\n              +float marketValue\n            }\n\n            class Client {\n              +string name\n              +string contactInfo\n            }\n\n            class Report {\n              +string reportId\n              +date reportDate\n              +string findings\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Technology - Cybersecurity Incident Management. Classes involved are Incident, Report, Analyst, Threat, and Mitigation.",
        "output": "classDiagram\n            Incident -- Report : documented_in\n            Analyst -- Report : analyzes\n            Threat -- Incident : identified_in\n            Mitigation -- Threat : results_in\n\n            class Incident {\n              +string incidentId\n              +date incidentDate\n              +string description\n            }\n\n            class Report {\n              +string reportId\n              +date reportDate\n              +string findings\n            }\n\n            class Analyst {\n              +string name\n              +string role\n            }\n\n            class Threat {\n              +string threatType\n              +string severity\n            }\n\n            class Mitigation {\n              +string mitigationId\n              +date mitigationDate\n              +string actionsTaken\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Logistics - Vehicle Routing System. Classes involved are Driver, Vehicle, Route, Delivery, and Customer.",
        "output": "classDiagram\n            Driver -- Vehicle : operates\n            Vehicle -- Route : follows\n            Route -- Delivery : linked_to\n            Delivery -- Customer : received_by\n\n            class Driver {\n              +string name\n              +string licenseNumber\n            }\n\n            class Vehicle {\n              +string vehicleId\n              +string model\n              +int capacity\n            }\n\n            class Route {\n              +string routeId\n              +string origin\n              +string destination\n            }\n\n            class Delivery {\n              +string deliveryId\n              +date deliveryDate\n              +string status\n            }\n\n            class Customer {\n              +string name\n              +string address\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Tourism - Adventure Tour Management. Classes involved are AdventureGuide, Tour, Participant, Equipment, and SafetyBriefing.",
        "output": "classDiagram\n            AdventureGuide -- Tour : leads\n            Participant -- Tour : joins\n            Equipment -- Tour : required_for\n            SafetyBriefing -- Tour : conducted_for\n\n            class AdventureGuide {\n              +string name\n              +string certification\n            }\n\n            class Tour {\n              +string tourId\n              +date tourDate\n              +string location\n            }\n\n            class Participant {\n              +string name\n              +string contactInfo\n            }\n\n            class Equipment {\n              +string equipmentName\n              +int quantity\n              +string condition\n            }\n\n            class SafetyBriefing {\n              +string briefingId\n              +date briefingDate\n              +string content\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Education - Alumni Management System. Classes involved are Alumni, Event, Organizer, Donation, and Newsletter.",
        "output": "classDiagram\n            Alumni -- Event : participates_in\n            Event -- Organizer : coordinated_by\n            Donation -- Alumni : contributes_to\n            Newsletter -- Alumni : subscribed_to\n\n            class Alumni {\n              +string name\n              +string graduationYear\n              +string contactInfo\n            }\n\n            class Event {\n              +string eventId\n              +date eventDate\n              +string location\n            }\n\n            class Organizer {\n              +string name\n              +string role\n            }\n\n            class Donation {\n              +string donationId\n              +float amount\n              +date donationDate\n            }\n\n            class Newsletter {\n              +string newsletterId\n              +date issueDate\n              +string content\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Finance - Credit Card Management System. Classes involved are Cardholder, CreditCard, Transaction, Statement, and Payment.",
        "output": "classDiagram\n            Cardholder -- CreditCard : owns\n            CreditCard -- Transaction : linked_to\n            Statement -- CreditCard : generates\n            Payment -- Statement : associated_with\n\n            class Cardholder {\n              +string name\n              +string contactInfo\n              +string cardholderId\n            }\n\n            class CreditCard {\n              +string cardNumber\n              +string expiryDate\n              +float creditLimit\n            }\n\n            class Transaction {\n              +string transactionId\n              +date transactionDate\n              +float amount\n            }\n\n            class Statement {\n              +string statementId\n              +date issueDate\n              +float balance\n            }\n\n            class Payment {\n              +string paymentId\n              +date paymentDate\n              +float amount\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Mental Health Counseling System. Classes involved are Counselor, Session, Patient, TreatmentPlan, and ProgressNote.",
        "output": "classDiagram\n            Counselor -- Session : conducts\n            Patient -- Session : attends\n            TreatmentPlan -- Patient : associated_with\n            ProgressNote -- Session : results_in\n\n            class Counselor {\n              +string name\n              +string licenseNumber\n              +string specialization\n            }\n\n            class Session {\n              +string sessionId\n              +date sessionDate\n              +string topic\n            }\n\n            class Patient {\n              +string name\n              +date dob\n              +string contactInfo\n            }\n\n            class TreatmentPlan {\n              +string planId\n              +string diagnosis\n              +string goals\n            }\n\n            class ProgressNote {\n              +string noteId\n              +date noteDate\n              +string observations\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Real Estate - Commercial Leasing System. Classes involved are Business, LeaseAgreement, PropertyManager, CommercialProperty, and Payment.",
        "output": "classDiagram\n            Business -- LeaseAgreement : enters_into\n            PropertyManager -- LeaseAgreement : oversees\n            CommercialProperty -- LeaseAgreement : linked_to\n            Payment -- LeaseAgreement : associated_with\n\n            class Business {\n              +string name\n              +string industry\n              +string contactInfo\n            }\n\n            class LeaseAgreement {\n              +string agreementId\n              +date startDate\n              +date endDate\n              +float rent\n            }\n\n            class PropertyManager {\n              +string name\n              +string contactInfo\n            }\n\n            class CommercialProperty {\n              +string propertyId\n              +string address\n              +float area\n            }\n\n            class Payment {\n              +string paymentId\n              +date paymentDate\n              +float amount\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Technology - Blockchain Transaction System. Classes involved are User, Wallet, Transaction, Blockchain, and Node.",
        "output": "classDiagram\n            User -- Wallet : owns\n            Wallet -- Transaction : initiates\n            Transaction -- Blockchain : recorded_on\n            Node -- Blockchain : participates_in\n\n            class User {\n              +string name\n              +string email\n              +string userId\n            }\n\n            class Wallet {\n              +string walletId\n              +float balance\n              +string currency\n            }\n\n            class Transaction {\n              +string transactionId\n              +date transactionDate\n              +float amount\n            }\n\n            class Blockchain {\n              +string blockchainId\n              +int blockCount\n              +date creationDate\n            }\n\n            class Node {\n              +string nodeId\n              +string location\n              +string status\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Retail - Online Food Delivery System. Classes involved are Customer, Order, Restaurant, DeliveryDriver, and FoodItem.",
        "output": "classDiagram\n            Customer -- Order : places\n            Order -- Restaurant : sent_to\n            DeliveryDriver -- Order : delivers\n            FoodItem -- Order : contains\n\n            class Customer {\n              +string name\n              +string address\n              +string contactInfo\n            }\n\n            class Order {\n              +string orderId\n              +date orderDate\n              +float totalCost\n            }\n\n            class Restaurant {\n              +string name\n              +string location\n              +string cuisineType\n            }\n\n            class DeliveryDriver {\n              +string name\n              +string licenseNumber\n              +string contactInfo\n            }\n\n            class FoodItem {\n              +string itemName\n              +float price\n              +int quantity\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Logistics - Air Cargo Management System. Classes involved are Shipment, Cargo, Airplane, Airport, and CargoHandler.",
        "output": "classDiagram\n            Shipment -- Cargo : contains\n            Airplane -- Cargo : transports\n            Airport -- Airplane : services\n            CargoHandler -- Cargo : manages\n\n            class Shipment {\n              +string shipmentId\n              +date shipmentDate\n              +string status\n            }\n\n            class Cargo {\n              +string cargoId\n              +float weight\n              +string description\n            }\n\n            class Airplane {\n              +string airplaneId\n              +string model\n              +float cargoCapacity\n            }\n\n            class Airport {\n              +string name\n              +string location\n              +string code\n            }\n\n            class CargoHandler {\n              +string name\n              +string contactInfo\n              +string role\n            }\n        "
    },
    {
        "instruction": "Create a Mermaid JS UML class diagram for the following scenario: Healthcare - Medical Supply Inventory System. Classes involved are Supplier, MedicalSupply, Inventory, Request, and Department.",
        "output": "classDiagram\n            Supplier -- MedicalSupply : provides\n            MedicalSupply -- Inventory : stored_in\n            Request -- Inventory : allocated_from\n            Department -- Request : submits\n\n            class Supplier {\n              +string name\n              +string contactInfo\n              +string certification\n            }\n\n            class MedicalSupply {\n              +string supplyId\n              +string name\n              +int quantity\n            }\n\n            class Inventory {\n              +string inventoryId\n              +string location\n              +int stockLevel\n            }\n\n            class Request {\n              +string requestId\n              +date requestDate\n              +int quantityRequested\n            }\n\n            class Department {\n              +string departmentName\n              +string contactInfo\n            }\n        "
    }
]